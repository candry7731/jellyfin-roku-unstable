"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TestCase = /** @class */ (function () {
    function TestCase(name, funcName, isSolo, isIgnored, lineNumber, params, paramTestIndex, paramLineNumber, expectedNumberOfParams) {
        if (params === void 0) { params = null; }
        if (paramTestIndex === void 0) { paramTestIndex = 0; }
        if (paramLineNumber === void 0) { paramLineNumber = 0; }
        if (expectedNumberOfParams === void 0) { expectedNumberOfParams = 0; }
        this.isSolo = isSolo;
        this.funcName = funcName;
        this.isIgnored = isIgnored;
        this.name = name;
        this.lineNumber = lineNumber;
        this.paramLineNumber = paramLineNumber;
        this.assertIndex = 0;
        this.assertLineNumberMap = {};
        this.rawParams = params;
        this.expectedNumberOfParams = expectedNumberOfParams;
        this.paramTestIndex = paramTestIndex;
        this.isParamTest = false;
        if (params) {
            this.name += this.paramTestIndex.toString().trim();
        }
    }
    TestCase.prototype.asJson = function () {
        return {
            isSolo: this.isSolo,
            funcName: this.funcName,
            isIgnored: this.isIgnored,
            isParamTest: this.isParamTest,
            name: this.name,
            lineNumber: this.lineNumber,
            paramLineNumber: this.paramLineNumber,
            assertIndex: this.assertIndex,
            assertLineNumberMap: this.assertLineNumberMap,
            rawParams: this.rawParams ? JSON.stringify(this.rawParams).replace(/null/g, 'invalid') : '',
            paramTestIndex: this.paramTestIndex,
            expectedNumberOfParams: this.expectedNumberOfParams,
            isParamsValid: (this.rawParams || []).length === this.expectedNumberOfParams
        };
    };
    TestCase.prototype.asText = function () {
        return "\n        {\n          isSolo: " + this.isSolo + "\n          funcName: \"" + (this.funcName || '') + "\"\n          isIgnored: " + this.isIgnored + "\n          isParamTest: " + this.isParamTest + "\n          name: \"" + (this.name || '') + "\"\n          lineNumber: " + this.lineNumber + "\n          paramLineNumber: " + this.paramLineNumber + "\n          assertIndex: " + this.assertIndex + "\n          assertLineNumberMap: " + JSON.stringify(this.assertLineNumberMap) + "\n          rawParams: " + (this.rawParams ? JSON.stringify(this.rawParams).replace(/null/g, 'invalid') : '[]') + "\n          paramTestIndex: " + this.paramTestIndex + "\n          expectedNumberOfParams: " + this.expectedNumberOfParams + "\n          isParamsValid: " + ((this.rawParams || []).length === this.expectedNumberOfParams) + "\n        }";
    };
    TestCase.prototype.addAssertLine = function (lineNumber) {
        this.assertLineNumberMap[this.assertIndex.toString().trim()] = lineNumber;
        this.assertIndex++;
    };
    return TestCase;
}());
exports.TestCase = TestCase;
