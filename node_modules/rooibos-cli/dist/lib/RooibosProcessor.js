"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var CodeCoverageProcessor_1 = require("./CodeCoverageProcessor");
var Feedback_1 = require("./Feedback");
var File_1 = require("./File");
var FunctionMap_1 = require("./FunctionMap");
var RuntimeConfig_1 = require("./RuntimeConfig");
var pkg = require('../../package.json');
var RooibosProcessor = /** @class */ (function () {
    function RooibosProcessor(config) {
        this._config = config;
        console.log('Running project processor');
        if (!config.projectPath) {
            throw new Error('Config does not contain projectPath property');
        }
        if (!config.sourceFilePattern && config.isRecordingCodeCoverage) {
            throw new Error('Config does not contain sourceFilePattern regex\'s, ' +
                'which are required when recording code coverage');
        }
        if (!config.testsFilePattern) {
            throw new Error('Config does not contain testsFilePattern regex\'s');
        }
    }
    Object.defineProperty(RooibosProcessor.prototype, "config", {
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    RooibosProcessor.prototype.processFiles = function () {
        console.log("Running processor at path " + this.config.projectPath + " ");
        var outputText = this.createFileHeaderText();
        var functionMap = new FunctionMap_1.default();
        console.log("Adding runtimeConfig ");
        this.runtimeConfig = new RuntimeConfig_1.RuntimeConfig(functionMap, this.config);
        this.runtimeConfig.process();
        console.log("Adding function map ");
        outputText += '\n' + functionMap.getFunctionMapText();
        console.log("Adding runtime config function ");
        outputText += '\n' + this.getRuntimeConfigText();
        console.log("Adding version function ");
        outputText += '\n' + this.getVersionText();
        outputText += '\n' + this.createTestsHeaderText();
        outputText += '\n' + this.runtimeConfig.createTestSuiteLookupFunction();
        outputText += '\n' + this.runtimeConfig.createIgnoredTestsInfoFunction();
        outputText += '\n' + this.createFileFooterText();
        var mapFileName = path.join(this.config.projectPath, this.config.outputPath, 'rooibosFunctionMap.brs');
        var file = new File_1.default(path.resolve(path.dirname(mapFileName)), path.dirname(mapFileName), path.basename(mapFileName), '.brs');
        file.setFileContents(outputText);
        console.log("Writing to " + file.fullPath);
        file.saveFileContents();
        if (this.config.isRecordingCodeCoverage) {
            console.log("this is a code coverage build. Adding code coverage calls");
            var coverageProcessor = new CodeCoverageProcessor_1.CodeCoverageProcessor(this.config);
            coverageProcessor.process();
        }
        else {
            console.log("this is NOT a code coverage build.");
        }
        this.reportErrors();
        this.reportWarnings();
        if (Feedback_1.getFeedbackErrors().length > 0) {
            throw new Error('rooibos-cli failed to parse tests due to reported errors');
        }
    };
    RooibosProcessor.prototype.reportErrors = function () {
        if (Feedback_1.getFeedbackErrors().length > 0) {
            console.log("\n    The following errors occurred during processing:\n\n    ======\n    ");
            Feedback_1.getFeedbackErrors().forEach(function (errorText) { return console.log("[ERROR] " + errorText); });
            console.log("\n    ======\n    ");
        }
    };
    RooibosProcessor.prototype.reportWarnings = function () {
        if (Feedback_1.getFeedbackWarnings().length > 0) {
            console.log("\n    The following warnings occurred during processing:\n\n    ======\n    ");
            Feedback_1.getFeedbackWarnings().forEach(function (errorText) { return console.log("[WARN] " + errorText); });
            console.log("\n    ======\n    ");
        }
    };
    RooibosProcessor.prototype.createFileHeaderText = function () {
        return "\n    '***************************************************\n    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)\n    ' ***************************************************\n    ";
    };
    RooibosProcessor.prototype.createFileFooterText = function () {
        return "\n\n    '***************************************************\n    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)\n    ' ***************************************************\n    ";
    };
    RooibosProcessor.prototype.createTestsHeaderText = function () {
        return "\n    '***************************************************\n    ' Unit test suites defitintions\n    '***************************************************\n    ";
    };
    RooibosProcessor.prototype.getRuntimeConfigText = function () {
        return "\n\n    function RBSFM_getRuntimeConfig()\n        return {\n          \"failFast\": " + this.config.failFast + "\n          \"logLevel\": " + this.config.logLevel + "\n          \"showOnlyFailures\": " + this.config.showFailuresOnly + "\n          \"printLcov\": " + (this.config.printLcov === true) + "\n          \"rooibosPreprocessorVersion\": \"" + pkg.version + "\"\n          \"port\": " + (this.config.port || 'Invalid') + "\n          }\n    end function\n    ";
    };
    RooibosProcessor.prototype.getVersionText = function () {
        return "\n    function RBSFM_getPreprocessorVersion()\n        return \"" + pkg.version + "\"\n    end function\n    ";
    };
    return RooibosProcessor;
}());
exports.RooibosProcessor = RooibosProcessor;
