"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var fs = require("fs-extra");
var chai_1 = require("chai");
var Feedback_1 = require("./Feedback");
var Tag_1 = require("./Tag");
var TestSuiteBuilder_1 = require("./TestSuiteBuilder");
var TestUtils_1 = require("./TestUtils");
var __1 = require("..");
var chaiSubset = require('chai-subset');
chai.use(chaiSubset);
var builder;
var sourcePath = 'src/test/stubProject';
var targetPath = 'build';
var specDir = 'build/source/tests/specs';
function clearFiles() {
    fs.removeSync(targetPath);
}
function copyFiles(alternatePath) {
    if (alternatePath === void 0) { alternatePath = null; }
    try {
        fs.copySync(alternatePath || sourcePath, targetPath);
    }
    catch (err) {
        console.error(err);
    }
}
describe('TestSuiteBuilder tests ', function () {
    beforeEach(function () {
        builder = new TestSuiteBuilder_1.TestSuiteBuilder(50, false);
    });
    describe('Initialization', function () {
        it('correctly sets source paths and config', function () {
            chai_1.expect(builder.maxLinesWithoutSuiteDirective).to.equal(50);
        });
    });
    describe('getFunctionFromLine', function () {
        it('checks non function lines', function () {
            chai_1.expect(builder.getFunctionFromLine('')).to.be.null;
            chai_1.expect(builder.getFunctionFromLine('    ')).to.be.null;
            chai_1.expect(builder.getFunctionFromLine(' m.this  = "someValue')).to.be.null;
            chai_1.expect(builder.getFunctionFromLine("'   function long_word_Different1(with Args) as void")).to.be.null;
            chai_1.expect(builder.getFunctionFromLine("'function foo() as void")).to.be.null;
        });
        it('checks function lines', function () {
            chai_1.expect(builder.getFunctionFromLine('function foo() as void')).to.equal('foo');
            chai_1.expect(builder.getFunctionFromLine('sub foo() as void')).to.equal('foo');
            chai_1.expect(builder.getFunctionFromLine('   sub foo() as void')).to.equal('foo');
            chai_1.expect(builder.getFunctionFromLine('   function foo() as void')).to.equal('foo');
            chai_1.expect(builder.getFunctionFromLine('   function long_word_Different1() as void')).to.equal('long_word_Different1');
            chai_1.expect(builder.getFunctionFromLine('   function long_word_Different1(with Args) as void')).to.equal('long_word_Different1');
        });
    });
    describe('getTagText', function () {
        it('no text/not a tag', function () {
            chai_1.expect(builder.getTagText("@TestSuite", Tag_1.Tag.TEST_SUITE)).to.be.empty;
            chai_1.expect(builder.getTagText("NOT", Tag_1.Tag.TEST_SUITE)).to.be.empty;
        });
        it('has text and has tag', function () {
            chai_1.expect(builder.getTagText("@TestSuite someText", Tag_1.Tag.TEST_SUITE)).to.equal("someText");
            chai_1.expect(builder.getTagText("@TestSuite someText here", Tag_1.Tag.TEST_SUITE)).to.equal("someText here");
            chai_1.expect(builder.getTagText("@TestSuite     someText here2", Tag_1.Tag.TEST_SUITE)).to.equal("someText here2");
        });
    });
    describe('processFile', function () {
        beforeEach(function () {
            clearFiles();
            copyFiles();
        });
        it('ignores null file descriptor', function () {
            var testSuite = builder.processFile(null);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.false;
        });
        it('ignores empty file contents', function () {
            var file = TestUtils_1.makeFile("source", "test.brs");
            file.setFileContents('');
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.false;
        });
        it('processes valid test file', function () {
            var file = TestUtils_1.makeFile(specDir, "VideoModuleTests.brs");
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
        });
        it('processes solo test suite', function () {
            var file = TestUtils_1.makeFile(specDir, "soloSuite.brs");
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
            chai_1.expect(testSuite.isSolo).to.be.true;
        });
        it('processes solo group', function () {
            var file = TestUtils_1.makeFile(specDir, "soloGroup.brs");
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
            chai_1.expect(testSuite.hasSoloGroups).to.be.true;
        });
        it('processes solo test', function () {
            var file = TestUtils_1.makeFile(specDir, "soloTest.brs");
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
            chai_1.expect(testSuite.hasSoloTests).to.be.true;
        });
        it('simple params', function () {
            var file = TestUtils_1.makeFile(specDir, "paramsTest.brs");
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
            chai_1.expect(testSuite.itGroups[0].testCases[0].expectedNumberOfParams).to.equal(2);
            chai_1.expect(testSuite.itGroups[0].testCases[0].rawParams.length).to.equal(2);
            chai_1.expect(testSuite.itGroups[0].filename).to.equal('paramsTest');
            chai_1.expect(testSuite.itGroups[0].testCases[1].expectedNumberOfParams).to.equal(2);
            chai_1.expect(testSuite.itGroups[0].testCases[1].rawParams.length).to.equal(2);
        });
        it('complex params', function () {
            var file = TestUtils_1.makeFile(specDir, "complexParamsTests.brs");
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
            chai_1.expect(testSuite.itGroups[0].soloTestCases[0].expectedNumberOfParams).to.equal(3);
            chai_1.expect(testSuite.itGroups[0].soloTestCases[0].rawParams.length).to.equal(3);
            chai_1.expect(testSuite.itGroups[0].soloTestCases[1].expectedNumberOfParams).to.equal(3);
            chai_1.expect(testSuite.itGroups[0].soloTestCases[1].rawParams.length).to.equal(3);
        });
        it('url params bug #40', function () {
            var file = TestUtils_1.makeFile(specDir, "urlParams.brs");
            var testSuite = builder.processFile(file);
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
            chai_1.expect(testSuite.itGroups[0].testCases[0].expectedNumberOfParams).to.equal(3);
            chai_1.expect(testSuite.itGroups[0].testCases[0].rawParams.length).to.equal(3);
            chai_1.expect(testSuite.itGroups[0].testCases[0].rawParams[1].type).to.equal('http://101.rooibos.com');
        });
        describe('legacy support', function () {
            beforeEach(function () {
                builder = new TestSuiteBuilder_1.TestSuiteBuilder(50, true);
            });
            it('parsing of tests and asserts', function () {
                var file = TestUtils_1.makeFile(specDir, "legacyFrameworkTests.brs");
                var testSuite = builder.processFile(file);
                chai_1.expect(testSuite).to.not.be.null;
                chai_1.expect(testSuite.isValid).to.be.true;
                chai_1.expect(testSuite.hasSoloTests).to.be.false;
                chai_1.expect(testSuite.isSolo).to.be.false;
                chai_1.expect(testSuite.hasIgnoredTests).to.be.false;
                chai_1.expect(testSuite.isIgnored).to.be.false;
                chai_1.expect(testSuite.name).to.equal('MainTestSuite');
                chai_1.expect(testSuite.itGroups[0].filename).to.equal('legacyFrameworkTests');
                chai_1.expect(testSuite.itGroups[0].testCases.length).to.equal(7);
                chai_1.expect(testSuite.itGroups[0].testCases[2].funcName).to.equal('testcase__main_checkstreamformattype');
                chai_1.expect(testSuite.itGroups[0].testCases[2].name).to.equal('CheckStreamFormatType');
                chai_1.expect(testSuite.itGroups[0].testCases[2].lineNumber).to.equal(79);
                chai_1.expect(testSuite.itGroups[0].testCases[2].assertLineNumberMap['0']).to.equal(81);
                chai_1.expect(testSuite.itGroups[0].testCases[2].assertLineNumberMap['1']).to.equal(82);
                chai_1.expect(testSuite.itGroups[0].testCases[2].assertLineNumberMap['2']).to.equal(83);
            });
            it('parsing of ignored test', function () {
                var file = TestUtils_1.makeFile(specDir, "legacyFrameworkTests_isIgnored.brs");
                var testSuite = builder.processFile(file);
                chai_1.expect(testSuite).to.not.be.null;
                chai_1.expect(testSuite.isValid).to.be.true;
                chai_1.expect(testSuite.hasSoloTests).to.be.false;
                chai_1.expect(testSuite.isSolo).to.be.false;
                chai_1.expect(testSuite.hasIgnoredTests).to.be.false;
                chai_1.expect(testSuite.isIgnored).to.be.true;
                chai_1.expect(testSuite.name).to.equal('MainTestSuite');
                chai_1.expect(testSuite.itGroups[0].testCases.length).to.equal(7);
            });
            it('parsing of solo', function () {
                var file = TestUtils_1.makeFile(specDir, "legacyFrameworkTests_isSolo.brs");
                var testSuite = builder.processFile(file);
                chai_1.expect(testSuite).to.not.be.null;
                chai_1.expect(testSuite.isValid).to.be.true;
                chai_1.expect(testSuite.hasSoloTests).to.be.false;
                chai_1.expect(testSuite.isSolo).to.be.true;
                chai_1.expect(testSuite.hasIgnoredTests).to.be.false;
                chai_1.expect(testSuite.isIgnored).to.be.false;
                chai_1.expect(testSuite.name).to.equal('MainTestSuite');
                chai_1.expect(testSuite.itGroups[0].testCases.length).to.equal(7);
            });
            it('parsing of solo tests', function () {
                var file = TestUtils_1.makeFile(specDir, "legacyFrameworkTests_solos.brs");
                var testSuite = builder.processFile(file);
                chai_1.expect(testSuite).to.not.be.null;
                chai_1.expect(testSuite.isValid).to.be.true;
                chai_1.expect(testSuite.hasSoloTests).to.be.true;
                chai_1.expect(testSuite.isSolo).to.be.true;
                chai_1.expect(testSuite.hasIgnoredTests).to.be.false;
                chai_1.expect(testSuite.isIgnored).to.be.false;
                chai_1.expect(testSuite.name).to.equal('MainTestSuite');
                chai_1.expect(testSuite.itGroups[0].testCases.length).to.equal(5);
                chai_1.expect(testSuite.itGroups[0].soloTestCases.length).to.equal(2);
                chai_1.expect(testSuite.itGroups[0].soloTestCases[1].funcName).to.equal('testcase__main_checkstreamformattype');
                chai_1.expect(testSuite.itGroups[0].soloTestCases[1].name).to.equal('CheckStreamFormatType');
                chai_1.expect(testSuite.itGroups[0].soloTestCases[1].lineNumber).to.equal(103);
            });
            it('parsing of ignored tests', function () {
                var file = TestUtils_1.makeFile(specDir, "legacyFrameworkTests_ignoredTests.brs");
                var testSuite = builder.processFile(file);
                chai_1.expect(testSuite).to.not.be.null;
                chai_1.expect(testSuite.isValid).to.be.true;
                chai_1.expect(testSuite.hasSoloTests).to.be.false;
                chai_1.expect(testSuite.isSolo).to.be.false;
                chai_1.expect(testSuite.hasIgnoredTests).to.be.true;
                chai_1.expect(testSuite.isIgnored).to.be.false;
                chai_1.expect(testSuite.name).to.equal('MainTestSuite');
                chai_1.expect(testSuite.itGroups[0].testCases.length).to.equal(5);
                chai_1.expect(testSuite.itGroups[0].soloTestCases.length).to.equal(0);
                chai_1.expect(testSuite.itGroups[0].ignoredTestCases.length).to.equal(2);
                chai_1.expect(testSuite.itGroups[0].ignoredTestCases[0].funcName).to.equal('testcase__main_checkdatacount');
                chai_1.expect(testSuite.itGroups[0].ignoredTestCases[0].name).to.equal('CheckDataCount');
                chai_1.expect(testSuite.itGroups[0].ignoredTestCases[1].funcName).to.equal('testcase__main_checkstreamformattype');
                chai_1.expect(testSuite.itGroups[0].ignoredTestCases[1].name).to.equal('CheckStreamFormatType');
            });
            it('parsing of setup and teardown', function () {
                var file = TestUtils_1.makeFile(specDir, "legacyFrameworkTests_setupAndTearDown.brs");
                var testSuite = builder.processFile(file);
                chai_1.expect(testSuite).to.not.be.null;
                chai_1.expect(testSuite.isValid).to.be.true;
                chai_1.expect(testSuite.name).to.equal('MainTestSuite');
                chai_1.expect(testSuite.setupFunctionName).to.equal('MainTestSuite__SetUp');
                chai_1.expect(testSuite.tearDownFunctionName).to.equal('MainTestSuite__TearDown');
                chai_1.expect(testSuite.itGroups[0].testCases.length).to.equal(7);
            });
        });
        describe('duplicates', function () {
            beforeEach(function () {
                clearFiles();
                copyFiles('src/test/stubProjectDuplicateTestCases');
                Feedback_1.resetFeedback();
            });
            it('errors on duplicate testCase name', function () {
                var file = TestUtils_1.makeFile(specDir, "soloGroup.brs");
                file.getFileContents();
                var testSuite = builder.processFile(file);
                var errors = Feedback_1.getFeedbackErrors();
                chai_1.expect(errors).to.not.be.empty;
            });
            it('errors on duplicate itGroup name', function () {
                var file = TestUtils_1.makeFile(specDir, "soloSuite.brs");
                file.getFileContents();
                var testSuite = builder.processFile(file);
                var errors = Feedback_1.getFeedbackErrors();
                chai_1.expect(errors).to.not.be.empty;
            });
            it('errors on duplicate suite name', function () {
                builder = new TestSuiteBuilder_1.TestSuiteBuilder(50, false);
                var file = TestUtils_1.makeFile(specDir, "urlParams.brs");
                builder.processFile(file);
                var errors = Feedback_1.getFeedbackErrors();
                chai_1.expect(errors).to.be.empty;
                file = TestUtils_1.makeFile(specDir, "urlParams.brs");
                builder.processFile(file);
                errors = Feedback_1.getFeedbackErrors();
                chai_1.expect(errors).to.not.be.empty;
            });
        });
    });
    describe('isTag', function () {
        beforeEach(function () {
            builder = new TestSuiteBuilder_1.TestSuiteBuilder(50, false);
        });
        it('identifies only tag', function () {
            chai_1.expect(builder.isTag("'@Only", Tag_1.Tag.SOLO)).to.be.true;
            chai_1.expect(builder.isTag("'@only", Tag_1.Tag.SOLO)).to.be.true;
            chai_1.expect(builder.isTag("   '@only", Tag_1.Tag.SOLO)).to.be.true;
        });
    });
    describe('getTagText with spaces', function () {
        beforeEach(function () {
            builder = new TestSuiteBuilder_1.TestSuiteBuilder(50, false);
        });
        it('identifies only tag', function () {
            chai_1.expect(builder.getTagText("'@Only some values", Tag_1.Tag.SOLO)).to.equal('some values');
            chai_1.expect(builder.getTagText("'@only some values", Tag_1.Tag.SOLO)).to.equal('some values');
            chai_1.expect(builder.getTagText("   '@Only some values", Tag_1.Tag.SOLO)).to.equal('some values');
            chai_1.expect(builder.getTagText("   '@only some values", Tag_1.Tag.SOLO)).to.equal('some values');
        });
    });
    describe('test local projects:  - skip these in ci', function () {
        beforeEach(function () {
            builder = new TestSuiteBuilder_1.TestSuiteBuilder(50, false);
        });
        it('smc', function () {
            return __awaiter(this, void 0, void 0, function () {
                var testFiles, config, processor;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            testFiles = [];
                            if (process.env.TEST_FILES_PATTERN) {
                                console.log('using overridden test files');
                                testFiles = JSON.parse(process.env.TEST_FILES_PATTERN);
                            }
                            else {
                                testFiles = [
                                    '**/tests/**/*.bs',
                                    '**/tests/**/*.brs',
                                    '!**/rooibosDist.brs',
                                    '!**/rooibosFunctionMap.brs',
                                    '!**/TestsScene.brs'
                                ];
                            }
                            config = __1.createProcessorConfig({
                                projectPath: '/home/george/hope/smc/pot-smithsonian-channel-roku-xm/build',
                                showFailuresOnly: true,
                                testsFilePattern: testFiles
                            });
                            processor = new __1.RooibosProcessor(config);
                            return [4 /*yield*/, processor.processFiles()];
                        case 1:
                            _a.sent();
                            console.log('done');
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
});
