"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var fs = require("fs-extra");
var path = require("path");
var chai_1 = require("chai");
var RooibosProcessor_1 = require("./RooibosProcessor");
var TestCase_1 = require("./TestCase");
var chaiSubset = require('chai-subset');
chai.use(chaiSubset);
var sourcePath = path.resolve(__dirname, '../test/stubProjectNoSolos');
var targetPath = path.resolve(__dirname, '../../build');
var processor;
var config = require('../test/testProcessorConfig.json');
function clearFiles() {
    fs.removeSync(targetPath);
}
function copyFiles() {
    try {
        fs.copySync(sourcePath, targetPath);
    }
    catch (err) {
        console.error(err);
    }
}
describe('TestCase tests ', function () {
    beforeEach(function () {
        processor = new RooibosProcessor_1.RooibosProcessor(config);
        processor.processFiles();
    });
    describe('asJson', function () {
        beforeEach(function () {
            clearFiles();
            copyFiles();
        });
        it('processes valid test file', function () {
            var testSuite = processor.runtimeConfig.testSuites[3];
            chai_1.expect(testSuite).to.not.be.null;
            chai_1.expect(testSuite.isValid).to.be.true;
            var json = testSuite.asJson();
            chai_1.expect(json).to.not.be.null;
            chai_1.expect(json.itGroups['1'].testCases['1'].isParamsValid).to.be.true;
            chai_1.expect(json.itGroups['1'].testCases['1'].isParamTest).to.be.true;
            chai_1.expect(json.itGroups['1'].testCases['1'].expectedNumberOfParams).to.equal(3);
            chai_1.expect(json.itGroups['1'].testCases['1'].rawParams).to.equal('[2,"mpg",["video_0","video_1"]]');
        });
        it('rawParams value for non params test', function () {
            var testCase = new TestCase_1.TestCase('test', 'testFunc', true, false, 10);
            var json = testCase.asJson();
            chai_1.expect(json).to.not.be.null;
            chai_1.expect(json.isParamTest).to.be.false;
            chai_1.expect(json.isParamsValid).to.be.true;
            chai_1.expect(json.expectedNumberOfParams).to.equal(0);
            chai_1.expect(json.rawParams).to.equal('');
        });
    });
});
