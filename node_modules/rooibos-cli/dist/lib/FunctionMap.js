"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Debug = require("debug");
var debug = Debug('FunctionMap');
var FunctionMap = /** @class */ (function () {
    function FunctionMap() {
        this.functionRegex = '^(function|sub)\\s+(.*[^\\(])\\(';
        this.functionMaps = {};
    }
    /**
     * get the function map text for the given file
     * @param directory
     * @param filename
     * @param assoicatedFile
     */
    FunctionMap.prototype.processFile = function (file) {
        debug("processing file ", file.fullPath);
        //brute force, get EVERY function declaration!
        var matches = this.getFunctionsMatchesValues(file.getFileContents(), this.functionRegex, 2);
        this.functionMaps[file.normalizedFileName] = matches;
        return matches;
    };
    FunctionMap.prototype.getFunctionsMatchesValues = function (input, pattern, groupIndex) {
        var values = [];
        var matches;
        var regex = new RegExp(pattern, 'gim');
        while (matches = regex.exec(input)) {
            values.push(matches[groupIndex]);
        }
        return values;
    };
    /**
     * getFunctionMapText
     * after processing of all the files, returns the block of code that contains all of the mapping functions
     * rooibos will later use.
     * @returns {string} text that contains the function maps, which rooibos needs for looking things up
     */
    FunctionMap.prototype.getFunctionMapText = function () {
        var text = this.createHeaderText();
        text += this.createGetFunctionsForFile();
        for (var filename in this.functionMaps) {
            text += this.createGetFunctionsMethod(filename, this.functionMaps[filename]);
        }
        text += this.createGetFilenames();
        return text;
    };
    FunctionMap.prototype.createGetFunctionsForFile = function () {
        var text = 'function RBSFM_getFunctionsForFile(filename)\n' +
            '  map = {\n';
        for (var filename in this.functionMaps) {
            text += "    \"" + filename + "\":RBSFM_getFunctions_" + filename + " \n";
        }
        text += '  } \n' +
            '  return map[filename]\n' +
            'end function\n\n';
        return text;
    };
    FunctionMap.prototype.createGetFilenames = function () {
        var text = 'function RBSFM_getFilenames()\n' +
            '  return [\n';
        for (var filename in this.functionMaps) {
            text += "    \"" + filename + "\", \n";
        }
        text += '  ] \n' +
            'end function\n\n';
        return text;
    };
    FunctionMap.prototype.createGetFunctionsMethod = function (filename, functionNames) {
        var text = "function RBSFM_getFunctions_" + filename + "()\n" +
            '  return {\n';
        functionNames.forEach(function (functionName) {
            text += "    \"" + functionName + "\":" + functionName + " \n";
        });
        text += '  } \n\n' +
            'end function\n\n';
        return text;
    };
    FunctionMap.prototype.createHeaderText = function () {
        return "\n    '***************************************************\n    'Function maps\n    '***************************************************\n    ";
    };
    return FunctionMap;
}());
exports.default = FunctionMap;
