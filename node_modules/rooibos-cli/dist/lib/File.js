"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var FileType_1 = require("./FileType");
/**
 * describes a file in our project.
 */
var File = /** @class */ (function () {
    function File(fsPath, projectPath, filename, extension) {
        this.filename = filename;
        this._fsPath = fsPath;
        this._fullPath = path.join(fsPath, filename);
        this._pkgPath = path.join(projectPath, filename);
        this._pkgUri = "pkg:/" + path.join(projectPath, filename);
        this.projectPath = projectPath;
        this.extension = extension;
        this._importedNamespaceNames = new Set();
        this.componentIds = new Set();
        this.associatedFile = null;
        this.parentFile = null;
        this._fileContents = null;
        this.hasProcessedImports = false;
    }
    Object.defineProperty(File.prototype, "fileType", {
        get: function () {
            switch (this.extension.toLowerCase()) {
                case '.brs':
                    return this.associatedFile ? FileType_1.FileType.CodeBehind : FileType_1.FileType.Brs;
                case '.bs':
                    return this.associatedFile ? FileType_1.FileType.CodeBehind : FileType_1.FileType.Bs;
                case '.xml':
                    return this.associatedFile ? FileType_1.FileType.ViewXml : FileType_1.FileType.Xml;
                default:
                    return FileType_1.FileType.Other;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "fsPath", {
        get: function () {
            return this._fsPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "importedNamespaceNames", {
        get: function () {
            return this._importedNamespaceNames;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "fullPath", {
        get: function () {
            return this._fullPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "pkgPath", {
        get: function () {
            return this._pkgPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "pkgUri", {
        get: function () {
            return this._pkgUri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "normalizedFileName", {
        get: function () {
            return this.filename.replace('.brs', '').replace('-', '_').replace('.', '_');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "normalizedFullFileName", {
        get: function () {
            return this.fullPath.replace('/', '_') + this.normalizedFileName;
        },
        enumerable: true,
        configurable: true
    });
    File.prototype.getFileContents = function () {
        if (this._fileContents === null) {
            this._fileContents = fs.readFileSync(this.fullPath, 'utf8');
        }
        return this._fileContents;
    };
    File.prototype.setFileContents = function (fileContents) {
        this._fileContents = fileContents;
    };
    File.prototype.saveFileContents = function () {
        fs.writeFileSync(this.fullPath, this._fileContents, 'utf8');
    };
    File.prototype.unloadContents = function () {
        this._fileContents = null;
    };
    File.prototype.toString = function () {
        return "DESCRIPTOR: " + this.filename + " TYPE " + this.fileType + " PATH " + this.fullPath;
    };
    return File;
}());
exports.default = File;
