"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var fs = require("fs-extra");
var chai_1 = require("chai");
var FunctionMap_1 = require("./FunctionMap");
var RuntimeConfig_1 = require("./RuntimeConfig");
var chaiSubset = require('chai-subset');
var config = require('../test/testProcessorConfig.json');
chai.use(chaiSubset);
var runtimeConfig;
var sourcePathBunchOfFiles = 'src/test/stubProject';
var sourcePathOneFile = 'src/test/stubProjectOnlyTests_oneFile';
var sourcePathSoloTests = 'src/test/stubProjectOnlyTests';
var sourcePathSoloGroup = 'src/test/stubProjectOnlyItGroup';
var sourcePathSoloSuites = 'src/test/stubProjectOnlySuite';
var sourcePathNoSolos = 'src/test/stubProjectNoSolos';
var targetPath = 'build';
function clearFiles() {
    fs.removeSync(targetPath);
}
function copyFiles(sourcePath) {
    try {
        fs.copySync(sourcePath, targetPath);
    }
    catch (err) {
        console.error(err);
    }
}
describe('RuntimeConfig tests ', function () {
    beforeEach(function () {
        var functionMap = new FunctionMap_1.default();
        runtimeConfig = new RuntimeConfig_1.RuntimeConfig(functionMap, config);
    });
    describe('oneFile', function () {
        beforeEach(function () {
            clearFiles();
        });
        it('processes valid test file', function () {
            copyFiles(sourcePathOneFile);
            runtimeConfig.process();
            var suites = runtimeConfig.testSuites;
            chai_1.expect(suites).to.not.be.null;
        });
        it('processes bunch of files', function () {
            copyFiles(sourcePathBunchOfFiles);
            runtimeConfig.process();
            var suites = runtimeConfig.testSuites;
            chai_1.expect(suites).to.not.be.null;
        });
        it('processes files with solo suite', function () {
            copyFiles(sourcePathSoloSuites);
            runtimeConfig.process();
            var suites = runtimeConfig.testSuites;
            chai_1.expect(suites).to.not.be.null;
        });
        it('processes files with solo group', function () {
            copyFiles(sourcePathSoloGroup);
            runtimeConfig.process();
            var suites = runtimeConfig.testSuites;
            chai_1.expect(suites).to.not.be.null;
        });
        it('processes files with solo tests', function () {
            copyFiles(sourcePathSoloTests);
            runtimeConfig.process();
            var suites = runtimeConfig.testSuites;
            chai_1.expect(suites).to.not.be.null;
        });
        it('processes files with no solo tests', function () {
            copyFiles(sourcePathNoSolos);
            runtimeConfig.process();
            var suites = runtimeConfig.testSuites;
            chai_1.expect(suites).to.not.be.null;
            var json = runtimeConfig.asJson(); //TODO test these return values
        });
    });
});
