"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Feedback_1 = require("./Feedback");
var ItGroup = /** @class */ (function () {
    function ItGroup(name, isSolo, isIgnore, filename, isLegacy) {
        if (isLegacy === void 0) { isLegacy = false; }
        this.testCaseNames = new Set();
        this.name = name;
        this.isSolo = isSolo;
        this.hasSoloTests = false;
        this.isIncluded = false;
        this.isIgnored = isIgnore;
        this.filename = filename;
        this.testCases = [];
        this.ignoredTestCases = [];
        this.soloTestCases = [];
        this.isLegacy = isLegacy;
    }
    ItGroup.prototype.asJson = function () {
        return {
            testCases: this.testCases.filter(function (testCase) { return testCase.isIncluded; })
                .map(function (testCase) { return testCase.asJson(); }),
            ignoredTestCases: this.ignoredTestCases.filter(function (testCase) { return testCase.isIncluded; })
                .map(function (testCase) { return testCase.asJson(); }),
            soloTestCases: this.soloTestCases.filter(function (testCase) { return testCase.isIncluded; })
                .map(function (testCase) { return testCase.asJson(); }),
            filename: this.filename,
            setupFunctionName: this.setupFunctionName,
            tearDownFunctionName: this.tearDownFunctionName,
            beforeEachFunctionName: this.beforeEachFunctionName,
            afterEachFunctionName: this.afterEachFunctionName,
            isSolo: this.isSolo,
            isIgnored: this.isIgnored,
            hasSoloTests: this.hasSoloTests,
            name: this.name
        };
    };
    ItGroup.prototype.asText = function () {
        var testCases = this.testCases.filter(function (testCase) { return testCase.isIncluded; })
            .map(function (testCase) { return testCase.asText(); });
        var ignoredTestCases = this.ignoredTestCases.filter(function (testCase) { return testCase.isIncluded; })
            .map(function (testCase) { return testCase.asText(); });
        var soloTestCases = this.soloTestCases.filter(function (testCase) { return testCase.isIncluded; })
            .map(function (testCase) { return testCase.asText(); });
        return "\n      {\n        testCases: [" + testCases + "]\n        ignoredTestCases: [" + ignoredTestCases + "]\n        soloTestCases: [" + soloTestCases + "]\n        filename: \"" + this.filename + "\"\n        setupFunctionName: \"" + (this.setupFunctionName || '') + "\"\n        tearDownFunctionName: \"" + (this.tearDownFunctionName || '') + "\"\n        beforeEachFunctionName: \"" + (this.beforeEachFunctionName || '') + "\"\n        afterEachFunctionName: \"" + (this.afterEachFunctionName || '') + "\"\n        isSolo: " + this.isSolo + "\n        isLegacy: " + this.isLegacy + "\n        isIgnored: " + this.isIgnored + "\n        hasSoloTests: " + this.hasSoloTests + "\n        name: \"" + (this.name || '') + "\"\n      }";
    };
    ItGroup.prototype.addTestCase = function (testCase) {
        if (this.testCaseNames.has(testCase.name)) {
            Feedback_1.feedbackError(this.file, "\ntestCase with name '" + testCase.name + "' already declared in group '" + this.name + "'");
        }
        this.testCaseNames.add(testCase.name);
        if (testCase.isSolo) {
            this.soloTestCases.push(testCase);
            this.hasSoloTests = true;
        }
        else if (testCase.isIgnored) {
            this.ignoredTestCases.push(testCase);
        }
        else {
            this.testCases.push(testCase);
        }
    };
    return ItGroup;
}());
exports.ItGroup = ItGroup;
