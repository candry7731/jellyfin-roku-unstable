"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Debug = require("debug");
var path = require("path");
var File_1 = require("./File");
var TestSuiteBuilder_1 = require("./TestSuiteBuilder");
var debug = Debug('RooibosProcessor');
var RuntimeConfig = /** @class */ (function () {
    function RuntimeConfig(functionMap, config) {
        this.ignoredCount = 0;
        this._hasSoloSuites = false;
        this._hasSoloGroups = false;
        this._hasSoloTests = false;
        this._testSuites = [];
        this.ignoredTestNames = [];
        this._functionMap = functionMap;
        this._config = config;
    }
    Object.defineProperty(RuntimeConfig.prototype, "testSuites", {
        get: function () {
            return this._testSuites;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Process all of the tests files in the given folder,
     * Create TestSuites, and functionMaps
     * @function processSourceFolder
     */
    RuntimeConfig.prototype.process = function () {
        //TODO - make async.
        //TODO - cachetimestamps for files - for performance
        var testSuiteBuilder = new TestSuiteBuilder_1.TestSuiteBuilder(50, this._config.legacySupport);
        var glob = require('glob-all');
        var targetPath = path.resolve(this._config.projectPath);
        debug("processing files at path " + targetPath + " with pattern " + this._config.testsFilePattern);
        var files = glob.sync(this._config.testsFilePattern, { cwd: targetPath });
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var filePath = files_1[_i];
            debug("processing file: " + filePath);
            var extension = path.extname(filePath).toLowerCase();
            if (extension === '.brs' || extension === '.bs') {
                var projectPath = path.dirname(filePath);
                var fullPath = path.join(targetPath, projectPath);
                var filename = path.basename(filePath);
                var file = new File_1.default(fullPath, projectPath, filename, path.extname(filename));
                this._functionMap.processFile(file);
                var testSuite = testSuiteBuilder.processFile(file);
                if (testSuite.isValid) {
                    this.testSuites.push(testSuite);
                    if (testSuite.isSolo) {
                        this._hasSoloSuites = true;
                    }
                    if (testSuite.hasSoloTests) {
                        this._hasSoloTests = true;
                    }
                    if (testSuite.hasSoloGroups) {
                        this._hasSoloGroups = true;
                    }
                }
                else {
                    debug("ignoring invalid suite");
                }
            }
        }
        this.updateIncludedFlags();
    };
    RuntimeConfig.prototype.createIgnoredTestsInfoFunction = function () {
        var text = "\n    function RBSFM_getIgnoredTestInfo()\n        return {\n          \"count\": " + this.ignoredCount + "\n          \"items\":[\n        ";
        this.ignoredTestNames.forEach(function (ignoredText) {
            text += "\"" + ignoredText + "\",\n";
        });
        text += "\n      ]}\n    end function\n";
        return text;
    };
    RuntimeConfig.prototype.createTestSuiteLookupFunction = function () {
        var text = "\n    function RBSFM_getTestSuitesForProject()\n        return [\n        ";
        this.testSuites.forEach(function (testSuite) {
            if (testSuite.isIncluded) {
                text += "\n" + testSuite.asText() + ",\n";
            }
        });
        text += "\n      ]\n    end function\n";
        return text;
    };
    /**
     * Once we know what's ignored/solo/etc, we can ascertain if we're going
     * to include it in the final json payload
     */
    RuntimeConfig.prototype.updateIncludedFlags = function () {
        var _this = this;
        this.testSuites.forEach(function (testSuite) {
            if (_this._hasSoloTests && !testSuite.hasSoloTests) {
                testSuite.isIncluded = false;
            }
            else if (_this._hasSoloSuites && !testSuite.isSolo) {
                testSuite.isIncluded = false;
            }
            else if (testSuite.isIgnored) {
                testSuite.isIncluded = false;
                _this.ignoredTestNames.push('|-' + testSuite.name + ' [WHOLE SUITE]');
                _this.ignoredCount++;
            }
            else {
                testSuite.isIncluded = true;
            }
            // debug('testSuite  ' + testSuite.name);
            testSuite.itGroups.forEach(function (itGroup) {
                // debug('GROUP  ' + itGroup.name);
                if (itGroup.isIgnored) {
                    _this.ignoredCount += itGroup.testCases.length;
                    _this.ignoredTestNames.push('  |-' + itGroup.name + ' [WHOLE GROUP]');
                }
                else {
                    if (itGroup.ignoredTestCases.length > 0) {
                        _this.ignoredTestNames.push('  |-' + itGroup.name);
                        _this.ignoredCount += itGroup.ignoredTestCases.length;
                        itGroup.ignoredTestCases.forEach(function (ignoredTestCase) {
                            if (!ignoredTestCase.isParamTest) {
                                _this.ignoredTestNames.push('  | |--' + ignoredTestCase.name);
                            }
                            else if (ignoredTestCase.paramTestIndex === 0) {
                                var testCaseName = ignoredTestCase.name;
                                if (testCaseName.length > 1 && testCaseName.substr(testCaseName.length - 1) === '0') {
                                    testCaseName = testCaseName.substr(0, testCaseName.length - 1);
                                }
                                _this.ignoredTestNames.push('  | |--' + testCaseName);
                            }
                        });
                    }
                    if (_this._hasSoloTests && !itGroup.hasSoloTests && !itGroup.isSolo) {
                        itGroup.isIncluded = false;
                    }
                    else if (itGroup.testCases.length === 0 && itGroup.soloTestCases.length === 0) {
                        itGroup.isIncluded = false;
                    }
                    else {
                        itGroup.isIncluded = testSuite.isIncluded;
                    }
                    itGroup.testCases.forEach(function (testCase) {
                        // debug(testCase.name + ' this._hasSoloTests ' + this._hasSoloTests + ' testCase.isSolo ' + testCase.isSolo);
                        if (_this._hasSoloTests && !testCase.isSolo) {
                            testCase.isIncluded = false;
                        }
                        else {
                            testCase.isIncluded = itGroup.isIncluded || testCase.isSolo;
                        }
                    });
                    itGroup.soloTestCases.forEach(function (testCase) {
                        // debug(testCase.name + ' this._hasSoloTests ' + this._hasSoloTests + ' testCase.isSolo ' + testCase.isSolo);
                        testCase.isIncluded = true;
                    });
                }
            });
        });
    };
    RuntimeConfig.prototype.asJson = function () {
        return this.testSuites.filter(function (testSuite) { return testSuite.isIncluded; })
            .map(function (testSuite) { return testSuite.asJson(); });
    };
    return RuntimeConfig;
}());
exports.RuntimeConfig = RuntimeConfig;
