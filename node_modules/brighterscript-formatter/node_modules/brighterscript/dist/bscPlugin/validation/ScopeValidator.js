"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopeValidator = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const reflection_1 = require("../../astUtils/reflection");
const Cache_1 = require("../../Cache");
const DiagnosticMessages_1 = require("../../DiagnosticMessages");
const util_1 = require("../../util");
class ScopeValidator {
    constructor(event) {
        this.event = event;
    }
    process() {
        this.validateEnumUsage();
        this.detectDuplicateEnums();
    }
    /**
     * Find all expressions and validate the ones that look like enums
     */
    validateEnumUsage() {
        const diagnostics = [];
        const membersByEnum = new Cache_1.Cache();
        //if there are any enums defined in this scope
        const enumLookup = this.event.scope.getEnumMap();
        //skip enum validation if there are no enums defined in this scope
        if (enumLookup.size === 0) {
            return;
        }
        this.event.scope.enumerateOwnFiles((file) => {
            var _a;
            //skip non-brs files
            if (!(0, reflection_1.isBrsFile)(file)) {
                return;
            }
            for (const expression of file.parser.references.expressions) {
                const parts = util_1.default.getAllDottedGetParts(expression);
                //skip expressions that aren't fully dotted gets
                if (!parts) {
                    continue;
                }
                //get the name of the enum member
                const memberName = parts.pop();
                //get the name of the enum (including leading namespace if applicable)
                const enumName = parts.join('.');
                const lowerEnumName = enumName.toLowerCase();
                const theEnum = (_a = enumLookup.get(lowerEnumName)) === null || _a === void 0 ? void 0 : _a.item;
                if (theEnum) {
                    const members = membersByEnum.getOrAdd(lowerEnumName, () => theEnum.getMemberValueMap());
                    const value = members === null || members === void 0 ? void 0 : members.get(memberName.toLowerCase());
                    if (!value) {
                        diagnostics.push(Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.unknownEnumValue(memberName, theEnum.fullName)), { range: expression.name.range, relatedInformation: [{
                                    message: 'Enum declared here',
                                    location: vscode_languageserver_1.Location.create(vscode_uri_1.URI.file(file.pathAbsolute).toString(), theEnum.tokens.name.range)
                                }] }));
                    }
                }
            }
        });
        this.event.scope.addDiagnostics(diagnostics);
    }
    detectDuplicateEnums() {
        const diagnostics = [];
        const enumLocationsByName = new Cache_1.Cache();
        this.event.scope.enumerateBrsFiles((file) => {
            for (const enumStatement of file.parser.references.enumStatements) {
                const fullName = enumStatement.fullName;
                const nameLower = fullName === null || fullName === void 0 ? void 0 : fullName.toLowerCase();
                if ((nameLower === null || nameLower === void 0 ? void 0 : nameLower.length) > 0) {
                    enumLocationsByName.getOrAdd(nameLower, () => []).push({
                        file: file,
                        statement: enumStatement
                    });
                }
            }
        });
        //now that we've collected all enum declarations, flag duplicates
        for (const enumLocations of enumLocationsByName.values()) {
            //sort by srcPath to keep the primary enum location consistent
            enumLocations.sort((a, b) => { var _a, _b, _c; return (_b = (_a = a.file) === null || _a === void 0 ? void 0 : _a.pathAbsolute) === null || _b === void 0 ? void 0 : _b.localeCompare((_c = b.file) === null || _c === void 0 ? void 0 : _c.pathAbsolute); });
            const primaryEnum = enumLocations.shift();
            const fullName = primaryEnum.statement.fullName;
            for (const duplicateEnumInfo of enumLocations) {
                diagnostics.push(Object.assign(Object.assign({}, DiagnosticMessages_1.DiagnosticMessages.duplicateEnumDeclaration(this.event.scope.name, fullName)), { file: duplicateEnumInfo.file, range: duplicateEnumInfo.statement.tokens.name.range, relatedInformation: [{
                            message: 'Enum declared here',
                            location: vscode_languageserver_1.Location.create(vscode_uri_1.URI.file(primaryEnum.file.pathAbsolute).toString(), primaryEnum.statement.tokens.name.range)
                        }] }));
            }
        }
        this.event.scope.addDiagnostics(diagnostics);
    }
}
exports.ScopeValidator = ScopeValidator;
//# sourceMappingURL=ScopeValidator.js.map