"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Expr = __importStar(require("./Expression"));
const Stmt = __importStar(require("./Statement"));
const lexer_1 = require("../lexer");
const ParseError_1 = require("./ParseError");
const brsTypes_1 = require("../brsTypes");
/** The set of operators valid for use in assignment statements. */
const assignmentOperators = [
    lexer_1.Lexeme.Equal,
    lexer_1.Lexeme.MinusEqual,
    lexer_1.Lexeme.PlusEqual,
    lexer_1.Lexeme.StarEqual,
    lexer_1.Lexeme.SlashEqual,
    lexer_1.Lexeme.BackslashEqual,
    lexer_1.Lexeme.LeftShiftEqual,
    lexer_1.Lexeme.RightShiftEqual,
];
/** List of Lexemes that are permitted as property names. */
const allowedProperties = [
    lexer_1.Lexeme.And,
    lexer_1.Lexeme.Box,
    lexer_1.Lexeme.CreateObject,
    lexer_1.Lexeme.Dim,
    lexer_1.Lexeme.Else,
    lexer_1.Lexeme.ElseIf,
    lexer_1.Lexeme.End,
    lexer_1.Lexeme.EndFunction,
    lexer_1.Lexeme.EndFor,
    lexer_1.Lexeme.EndIf,
    lexer_1.Lexeme.EndSub,
    lexer_1.Lexeme.EndWhile,
    lexer_1.Lexeme.Eval,
    lexer_1.Lexeme.Exit,
    lexer_1.Lexeme.ExitFor,
    lexer_1.Lexeme.ExitWhile,
    lexer_1.Lexeme.False,
    lexer_1.Lexeme.For,
    lexer_1.Lexeme.ForEach,
    lexer_1.Lexeme.Function,
    lexer_1.Lexeme.GetGlobalAA,
    lexer_1.Lexeme.GetLastRunCompileError,
    lexer_1.Lexeme.GetLastRunRunTimeError,
    lexer_1.Lexeme.Goto,
    lexer_1.Lexeme.If,
    lexer_1.Lexeme.Invalid,
    lexer_1.Lexeme.Let,
    lexer_1.Lexeme.Next,
    lexer_1.Lexeme.Not,
    lexer_1.Lexeme.ObjFun,
    lexer_1.Lexeme.Or,
    lexer_1.Lexeme.Pos,
    lexer_1.Lexeme.Print,
    lexer_1.Lexeme.Rem,
    lexer_1.Lexeme.Return,
    lexer_1.Lexeme.Step,
    lexer_1.Lexeme.Stop,
    lexer_1.Lexeme.Sub,
    lexer_1.Lexeme.Tab,
    lexer_1.Lexeme.To,
    lexer_1.Lexeme.True,
    lexer_1.Lexeme.Type,
    lexer_1.Lexeme.While,
];
/** List of Lexeme that are allowed as local var identifiers. */
const allowedIdentifiers = [lexer_1.Lexeme.EndFor, lexer_1.Lexeme.ExitFor, lexer_1.Lexeme.ForEach];
/**
 * List of string versions of Lexeme that are NOT allowed as local var identifiers.
 * Used to throw more helpful "you can't use a reserved word as an identifier" errors.
 */
const disallowedIdentifiers = new Set([
    lexer_1.Lexeme.And,
    lexer_1.Lexeme.Box,
    lexer_1.Lexeme.CreateObject,
    lexer_1.Lexeme.Dim,
    lexer_1.Lexeme.Else,
    lexer_1.Lexeme.ElseIf,
    lexer_1.Lexeme.End,
    lexer_1.Lexeme.EndFunction,
    lexer_1.Lexeme.EndIf,
    lexer_1.Lexeme.EndSub,
    lexer_1.Lexeme.EndWhile,
    lexer_1.Lexeme.Eval,
    lexer_1.Lexeme.Exit,
    lexer_1.Lexeme.ExitWhile,
    lexer_1.Lexeme.False,
    lexer_1.Lexeme.For,
    lexer_1.Lexeme.Function,
    lexer_1.Lexeme.GetGlobalAA,
    lexer_1.Lexeme.GetLastRunCompileError,
    lexer_1.Lexeme.GetLastRunRunTimeError,
    lexer_1.Lexeme.Goto,
    lexer_1.Lexeme.If,
    lexer_1.Lexeme.Invalid,
    lexer_1.Lexeme.Let,
    lexer_1.Lexeme.Next,
    lexer_1.Lexeme.Not,
    lexer_1.Lexeme.ObjFun,
    lexer_1.Lexeme.Or,
    lexer_1.Lexeme.Pos,
    lexer_1.Lexeme.Print,
    lexer_1.Lexeme.Rem,
    lexer_1.Lexeme.Return,
    lexer_1.Lexeme.Step,
    lexer_1.Lexeme.Sub,
    lexer_1.Lexeme.Tab,
    lexer_1.Lexeme.To,
    lexer_1.Lexeme.True,
    lexer_1.Lexeme.Type,
    lexer_1.Lexeme.While,
].map(x => lexer_1.Lexeme[x].toLowerCase()));
class Parser {
    constructor() {
        /** Allows consumers to observe errors as they're detected. */
        this.events = new events_1.EventEmitter();
    }
    /**
     * A convenience function, equivalent to `new Parser().parse(toParse)`, that parses an array of
     * `Token`s into an abstract syntax tree that can be executed with the `Interpreter`.
     * @param toParse the array of tokens to parse
     * @returns an array of `Statement` objects that together form the abstract syntax tree of the
     *          program
     */
    static parse(toParse) {
        return new Parser().parse(toParse);
    }
    /**
     * Convenience function to subscribe to the `err` events emitted by `parser.events`.
     * @param errorHandler the function to call for every Parser error emitted after subscribing
     * @returns an object with a `dispose` function, used to unsubscribe from errors
     */
    onError(errorHandler) {
        this.events.on("err", errorHandler);
        return {
            dispose: () => {
                this.events.removeListener("err", errorHandler);
            },
        };
    }
    /**
     * Convenience function to subscribe to a single `err` event emitted by `parser.events`.
     * @param errorHandler the function to call for the first Parser error emitted after subscribing
     */
    onErrorOnce(errorHandler) {
        this.events.once("err", errorHandler);
    }
    /**
     * Parses an array of `Token`s into an abstract syntax tree that can be executed with the `Interpreter`.
     * @param toParse the array of tokens to parse
     * @returns an array of `Statement` objects that together form the abstract syntax tree of the
     *          program
     */
    parse(toParse) {
        let current = 0;
        let tokens = toParse;
        //the depth of the calls to function declarations. Helps some checks know if they are at the root or not.
        let functionDeclarationLevel = 0;
        function isAtRootLevel() {
            return functionDeclarationLevel === 0;
        }
        let statements = [];
        let errors = [];
        /**
         * Add an error to the parse results.
         * @param token - the token where the error occurred
         * @param message - the message for this error
         * @returns an error object that can be thrown if the calling code needs to abort parsing
         */
        const addError = (token, message) => {
            let err = new ParseError_1.ParseError(token, message);
            errors.push(err);
            this.events.emit("err", err);
            return err;
        };
        /**
         * Add an error at the given location.
         * @param location
         * @param message
         */
        const addErrorAtLocation = (location, message) => {
            addError({ location: location }, message);
        };
        if (toParse.length === 0) {
            return {
                statements: [],
                errors: [],
            };
        }
        try {
            while (!isAtEnd()) {
                let dec = declaration();
                if (dec) {
                    statements.push(dec);
                }
            }
            return { statements, errors };
        }
        catch (parseError) {
            return {
                statements: [],
                errors: errors,
            };
        }
        /**
         * A simple wrapper around `check` to make tests for a `end` identifier.
         * `end` is a keyword, but not reserved, so associative arrays can have properties
         * called `end`; the parser takes on this task.
         * @returns `true` if the next token is an identifier with text `end`, otherwise `false`
         */
        function checkEnd() {
            return check(lexer_1.Lexeme.Identifier) && peek().text.toLowerCase() === "end";
        }
        function declaration(...additionalTerminators) {
            try {
                // consume any leading newlines
                while (match(lexer_1.Lexeme.Newline))
                    ;
                if (check(lexer_1.Lexeme.Sub, lexer_1.Lexeme.Function)) {
                    return functionDeclaration(false);
                }
                if (checkLibrary()) {
                    return libraryStatement();
                }
                // BrightScript is like python, in that variables can be declared without a `var`,
                // `let`, (...) keyword. As such, we must check the token *after* an identifier to figure
                // out what to do with it.
                if (check(lexer_1.Lexeme.Identifier, ...allowedIdentifiers) &&
                    checkNext(...assignmentOperators)) {
                    return assignment(...additionalTerminators);
                }
                return statement(...additionalTerminators);
            }
            catch (error) {
                synchronize();
                return;
            }
        }
        function functionDeclaration(isAnonymous) {
            try {
                //certain statements need to know if they are contained within a function body
                //so track the depth here
                functionDeclarationLevel++;
                let startingKeyword = peek();
                let isSub = check(lexer_1.Lexeme.Sub);
                let functionType = advance();
                let name;
                let returnType;
                let leftParen;
                let rightParen;
                if (isSub) {
                    returnType = brsTypes_1.ValueKind.Void;
                }
                else {
                    returnType = brsTypes_1.ValueKind.Dynamic;
                }
                if (isAnonymous) {
                    leftParen = consume(`Expected '(' after ${functionType.text}`, lexer_1.Lexeme.LeftParen);
                }
                else {
                    name = consume(`Expected ${functionType.text} name after '${functionType.text}'`, lexer_1.Lexeme.Identifier);
                    leftParen = consume(`Expected '(' after ${functionType.text} name`, lexer_1.Lexeme.LeftParen);
                    //prevent functions from ending with type designators
                    let lastChar = name.text[name.text.length - 1];
                    if (["$", "%", "!", "#", "&"].includes(lastChar)) {
                        //don't throw this error; let the parser continue
                        addError(name, `Function name '${name.text}' cannot end with type designator '${lastChar}'`);
                    }
                }
                let args = [];
                if (!check(lexer_1.Lexeme.RightParen)) {
                    do {
                        if (args.length >= Expr.Call.MaximumArguments) {
                            throw addError(peek(), `Cannot have more than ${Expr.Call.MaximumArguments} arguments`);
                        }
                        args.push(signatureArgument());
                    } while (match(lexer_1.Lexeme.Comma));
                }
                rightParen = advance();
                let maybeAs = peek();
                if (check(lexer_1.Lexeme.Identifier) && maybeAs.text.toLowerCase() === "as") {
                    advance();
                    let typeToken = advance();
                    let typeString = typeToken.text || "";
                    let maybeReturnType = brsTypes_1.ValueKind.fromString(typeString);
                    if (!maybeReturnType) {
                        throw addError(typeToken, `Function return type '${typeString}' is invalid`);
                    }
                    returnType = maybeReturnType;
                }
                args.reduce((haveFoundOptional, arg) => {
                    if (haveFoundOptional && !arg.defaultValue) {
                        throw addError({
                            kind: lexer_1.Lexeme.Identifier,
                            text: arg.name.text,
                            isReserved: lexer_1.ReservedWords.has(arg.name.text),
                            location: arg.location,
                        }, `Argument '${arg.name.text}' has no default value, but comes after arguments with default values`);
                    }
                    return haveFoundOptional || !!arg.defaultValue;
                }, false);
                consume(`Expected newline or ':' after ${functionType.text} signature`, lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon);
                //support ending the function with `end sub` OR `end function`
                let body = block(lexer_1.Lexeme.EndSub, lexer_1.Lexeme.EndFunction);
                if (!body) {
                    throw addError(peek(), `Expected 'end ${functionType.text}' to terminate ${functionType.text} block`);
                }
                // consume 'end sub' or 'end function'
                let endingKeyword = advance();
                let expectedEndKind = isSub ? lexer_1.Lexeme.EndSub : lexer_1.Lexeme.EndFunction;
                //if `function` is ended with `end sub`, or `sub` is ended with `end function`, then
                //add an error but don't hard-fail so the AST can continue more gracefully
                if (endingKeyword.kind !== expectedEndKind) {
                    addError(endingKeyword, `Expected 'end ${functionType.text}' to terminate ${functionType.text} block`);
                }
                let func = new Expr.Function(args, returnType, body, startingKeyword, endingKeyword);
                if (isAnonymous) {
                    return func;
                }
                else {
                    // only consume trailing newlines in the statement context; expressions
                    // expect to handle their own trailing whitespace
                    while (match(lexer_1.Lexeme.Newline))
                        ;
                    return new Stmt.Function(name, func);
                }
            }
            finally {
                functionDeclarationLevel--;
            }
        }
        function signatureArgument() {
            if (!check(lexer_1.Lexeme.Identifier)) {
                throw addError(peek(), `Expected argument name, but received '${peek().text || ""}'`);
            }
            let name = advance();
            let type = brsTypes_1.ValueKind.Dynamic;
            let typeToken;
            let defaultValue;
            // parse argument default value
            if (match(lexer_1.Lexeme.Equal)) {
                // it seems any expression is allowed here -- including ones that operate on other arguments!
                defaultValue = expression();
            }
            let next = peek();
            if (check(lexer_1.Lexeme.Identifier) && next.text && next.text.toLowerCase() === "as") {
                // 'as' isn't a reserved word, so it can't be lexed into an As token without the lexer
                // understanding language context.  That's less than ideal, so we'll have to do some
                // more intelligent comparisons to detect the 'as' sometimes-keyword here.
                advance();
                typeToken = advance();
                let typeValueKind = brsTypes_1.ValueKind.fromString(typeToken.text);
                if (!typeValueKind) {
                    throw addError(typeToken, `Function parameter '${name.text}' is of invalid type '${typeToken.text}'`);
                }
                type = typeValueKind;
            }
            return {
                name: name,
                type: {
                    kind: type,
                    location: typeToken ? typeToken.location : brsTypes_1.StdlibArgument.InternalLocation,
                },
                defaultValue: defaultValue,
                location: {
                    file: name.location.file,
                    start: name.location.start,
                    end: typeToken ? typeToken.location.end : name.location.end,
                },
            };
        }
        function assignment(...additionalterminators) {
            let name = advance();
            //add error if name is a reserved word that cannot be used as an identifier
            if (disallowedIdentifiers.has(name.text.toLowerCase())) {
                //don't throw...this is fully recoverable
                addError(name, `Cannot use reserved word "${name.text}" as an identifier`);
            }
            let operator = consume(`Expected operator ('=', '+=', '-=', '*=', '/=', '\\=', '^=', '<<=', or '>>=') after idenfifier '${name.text}'`, ...assignmentOperators);
            let value = expression();
            if (!check(...additionalterminators)) {
                consume("Expected newline or ':' after assignment", lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon, lexer_1.Lexeme.Eof, ...additionalterminators);
            }
            if (operator.kind === lexer_1.Lexeme.Equal) {
                return new Stmt.Assignment({ equals: operator }, name, value);
            }
            else {
                return new Stmt.Assignment({ equals: operator }, name, new Expr.Binary(new Expr.Variable(name), operator, value));
            }
        }
        function checkLibrary() {
            let isLibraryIdentifier = check(lexer_1.Lexeme.Identifier) && peek().text.toLowerCase() === "library";
            //if we are at the top level, any line that starts with "library" should be considered a library statement
            if (isAtRootLevel() && isLibraryIdentifier) {
                return true;
            }
            //not at root level, library statements are all invalid here, but try to detect if the tokens look
            //like a library statement (and let the libraryStatement function handle emitting the errors)
            else if (isLibraryIdentifier && checkNext(lexer_1.Lexeme.String)) {
                return true;
            }
            //definitely not a library statement
            else {
                return false;
            }
        }
        function statement(...additionalterminators) {
            if (checkLibrary()) {
                return libraryStatement();
            }
            if (check(lexer_1.Lexeme.Stop)) {
                return stopStatement();
            }
            if (check(lexer_1.Lexeme.If)) {
                return ifStatement();
            }
            if (check(lexer_1.Lexeme.Print)) {
                return printStatement(...additionalterminators);
            }
            if (check(lexer_1.Lexeme.While)) {
                return whileStatement();
            }
            if (check(lexer_1.Lexeme.ExitWhile)) {
                return exitWhile();
            }
            if (check(lexer_1.Lexeme.For)) {
                return forStatement();
            }
            if (check(lexer_1.Lexeme.ForEach)) {
                return forEachStatement();
            }
            if (check(lexer_1.Lexeme.ExitFor)) {
                return exitFor();
            }
            if (checkEnd()) {
                return endStatement();
            }
            if (match(lexer_1.Lexeme.Return)) {
                return returnStatement();
            }
            if (check(lexer_1.Lexeme.Goto)) {
                return gotoStatement();
            }
            //does this line look like a label? (i.e.  `someIdentifier:` )
            if (check(lexer_1.Lexeme.Identifier) && checkNext(lexer_1.Lexeme.Colon)) {
                return labelStatement();
            }
            // TODO: support multi-statements
            return setStatement(...additionalterminators);
        }
        function whileStatement() {
            const whileKeyword = advance();
            const condition = expression();
            consume("Expected newline after 'while ...condition...'", lexer_1.Lexeme.Newline);
            const whileBlock = block(lexer_1.Lexeme.EndWhile);
            if (!whileBlock) {
                throw addError(peek(), "Expected 'end while' to terminate while-loop block");
            }
            const endWhile = advance();
            while (match(lexer_1.Lexeme.Newline))
                ;
            return new Stmt.While({ while: whileKeyword, endWhile: endWhile }, condition, whileBlock);
        }
        function exitWhile() {
            let keyword = advance();
            consume("Expected newline after 'exit while'", lexer_1.Lexeme.Newline);
            while (match(lexer_1.Lexeme.Newline)) { }
            return new Stmt.ExitWhile({ exitWhile: keyword });
        }
        function forStatement() {
            const forKeyword = advance();
            const initializer = assignment(lexer_1.Lexeme.To);
            const to = advance();
            const finalValue = expression();
            let increment;
            let step;
            if (check(lexer_1.Lexeme.Step)) {
                step = advance();
                increment = expression();
            }
            else {
                // BrightScript for/to/step loops default to a step of 1 if no `step` is provided
                increment = new Expr.Literal(new brsTypes_1.Int32(1), peek().location);
            }
            while (match(lexer_1.Lexeme.Newline))
                ;
            let body = block(lexer_1.Lexeme.EndFor, lexer_1.Lexeme.Next);
            if (!body) {
                throw addError(peek(), "Expected 'end for' or 'next' to terminate for-loop block");
            }
            let endFor = advance();
            while (match(lexer_1.Lexeme.Newline))
                ;
            // WARNING: BrightScript doesn't delete the loop initial value after a for/to loop! It just
            // stays around in scope with whatever value it was when the loop exited.
            return new Stmt.For({
                for: forKeyword,
                to: to,
                step: step,
                endFor: endFor,
            }, initializer, finalValue, increment, body);
        }
        function forEachStatement() {
            let forEach = advance();
            let name = advance();
            let maybeIn = peek();
            if (check(lexer_1.Lexeme.Identifier) && maybeIn.text.toLowerCase() === "in") {
                advance();
            }
            else {
                throw addError(maybeIn, "Expected 'in' after 'for each <name>'");
            }
            let target = expression();
            if (!target) {
                throw addError(peek(), "Expected target object to iterate over");
            }
            advance();
            while (match(lexer_1.Lexeme.Newline))
                ;
            let body = block(lexer_1.Lexeme.EndFor, lexer_1.Lexeme.Next);
            if (!body) {
                throw addError(peek(), "Expected 'end for' or 'next' to terminate for-loop block");
            }
            let endFor = advance();
            while (match(lexer_1.Lexeme.Newline))
                ;
            return new Stmt.ForEach({
                forEach: forEach,
                in: maybeIn,
                endFor: endFor,
            }, name, target, body);
        }
        function exitFor() {
            let keyword = advance();
            consume("Expected newline after 'exit for'", lexer_1.Lexeme.Newline);
            while (match(lexer_1.Lexeme.Newline)) { }
            return new Stmt.ExitFor({ exitFor: keyword });
        }
        function libraryStatement() {
            let libraryStatement = new Stmt.Library({
                library: advance(),
                //grab the next token only if it's a string
                filePath: check(lexer_1.Lexeme.String) ? advance() : undefined,
            });
            //no token following library keyword token
            if (!libraryStatement.tokens.filePath && check(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon)) {
                addErrorAtLocation(libraryStatement.tokens.library.location, `Missing string literal after ${libraryStatement.tokens.library.text} keyword`);
            }
            //does not have a string literal as next token
            else if (!libraryStatement.tokens.filePath && peek().kind === lexer_1.Lexeme.Newline) {
                addErrorAtLocation(peek().location, `Expected string literal after ${libraryStatement.tokens.library.text} keyword`);
            }
            //consume all tokens until the end of the line
            let invalidTokens = consumeUntil(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Eof, lexer_1.Lexeme.Colon);
            if (invalidTokens.length > 0) {
                //add an error for every invalid token
                for (let invalidToken of invalidTokens) {
                    addErrorAtLocation(invalidToken.location, `Found unexpected token '${invalidToken.text}' after library statement`);
                }
            }
            //libraries must be at the very top of the file before any other declarations.
            let isAtTopOfFile = true;
            for (let statement of statements) {
                //if we found a non-library statement, this statement is not at the top of the file
                if (!(statement instanceof Stmt.Library)) {
                    isAtTopOfFile = false;
                }
            }
            //libraries must be a root-level statement (i.e. NOT nested inside of functions)
            if (!isAtRootLevel() || !isAtTopOfFile) {
                addErrorAtLocation(libraryStatement.location, "Library statements may only appear at the top of a file");
            }
            //consume to the next newline, eof, or colon
            while (match(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Eof, lexer_1.Lexeme.Colon))
                ;
            return libraryStatement;
        }
        function ifStatement() {
            const ifToken = advance();
            const startingLine = ifToken.location;
            const condition = expression();
            let thenBranch;
            let elseIfBranches = [];
            let elseBranch;
            let thenToken;
            let elseIfTokens = [];
            let endIfToken;
            /**
             * A simple wrapper around `check`, to make tests for a `then` identifier.
             * As with many other words, "then" is a keyword but not reserved, so associative
             * arrays can have properties called "then".  It's a valid identifier sometimes, so the
             * parser has to take on the burden of understanding that I guess.
             * @returns `true` if the next token is an identifier with text "then", otherwise `false`.
             */
            function checkThen() {
                return check(lexer_1.Lexeme.Identifier) && peek().text.toLowerCase() === "then";
            }
            if (checkThen()) {
                // `then` is optional after `if ...condition...`, so only advance to the next token if `then` is present
                thenToken = advance();
            }
            if (match(lexer_1.Lexeme.Newline) || match(lexer_1.Lexeme.Colon)) {
                //consume until no more colons
                while (check(lexer_1.Lexeme.Colon)) {
                    advance();
                }
                //consume exactly 1 newline, if found
                if (check(lexer_1.Lexeme.Newline)) {
                    advance();
                }
                //keep track of the current error count, because if the then branch fails,
                //we will trash them in favor of a single error on if
                let errorsLengthBeforeBlock = errors.length;
                // we're parsing a multi-line ("block") form of the BrightScript if/then/else and must find
                // a trailing "end if"
                let maybeThenBranch = block(lexer_1.Lexeme.EndIf, lexer_1.Lexeme.Else, lexer_1.Lexeme.ElseIf);
                if (!maybeThenBranch) {
                    //throw out any new errors created as a result of a `then` block parse failure.
                    //the block() function will discard the current line, so any discarded errors will
                    //resurface if they are legitimate, and not a result of a malformed if statement
                    errors.splice(errorsLengthBeforeBlock, errors.length - errorsLengthBeforeBlock);
                    //this whole if statement is bogus...add error to the if token and hard-fail
                    throw addError(ifToken, "Expected 'end if', 'else if', or 'else' to terminate 'then' block");
                }
                let blockEnd = previous();
                if (blockEnd.kind === lexer_1.Lexeme.EndIf) {
                    endIfToken = blockEnd;
                }
                thenBranch = maybeThenBranch;
                match(lexer_1.Lexeme.Newline);
                // attempt to read a bunch of "else if" clauses
                while (check(lexer_1.Lexeme.ElseIf)) {
                    elseIfTokens.push(advance());
                    let elseIfCondition = expression();
                    if (checkThen()) {
                        // `then` is optional after `else if ...condition...`, so only advance to the next token if `then` is present
                        advance();
                    }
                    //consume any trailing colons
                    while (check(lexer_1.Lexeme.Colon)) {
                        advance();
                    }
                    match(lexer_1.Lexeme.Newline);
                    let elseIfThen = block(lexer_1.Lexeme.EndIf, lexer_1.Lexeme.Else, lexer_1.Lexeme.ElseIf);
                    if (!elseIfThen) {
                        throw addError(peek(), "Expected 'end if', 'else if', or 'else' to terminate 'then' block");
                    }
                    let blockEnd = previous();
                    if (blockEnd.kind === lexer_1.Lexeme.EndIf) {
                        endIfToken = blockEnd;
                    }
                    elseIfBranches.push({
                        condition: elseIfCondition,
                        thenBranch: elseIfThen,
                    });
                }
                if (match(lexer_1.Lexeme.Else)) {
                    //consume any trailing colons
                    while (check(lexer_1.Lexeme.Colon)) {
                        advance();
                    }
                    match(lexer_1.Lexeme.Newline);
                    elseBranch = block(lexer_1.Lexeme.EndIf);
                    let endIfToken = advance(); // skip past "end if"
                    //ensure that single-line `if` statements have a colon right before 'end if'
                    if (ifToken.location.start.line === endIfToken.location.start.line) {
                        let index = tokens.indexOf(endIfToken);
                        let previousToken = tokens[index - 1];
                        if (previousToken.kind !== lexer_1.Lexeme.Colon) {
                            addError(endIfToken, "Expected ':' to preceed 'end if'");
                        }
                    }
                    match(lexer_1.Lexeme.Newline);
                }
                else {
                    match(lexer_1.Lexeme.Newline);
                    endIfToken = consume(`Expected 'end if' to close 'if' statement started on line ${startingLine}`, lexer_1.Lexeme.EndIf);
                    //ensure that single-line `if` statements have a colon right before 'end if'
                    if (ifToken.location.start.line === endIfToken.location.start.line) {
                        let index = tokens.indexOf(endIfToken);
                        let previousToken = tokens[index - 1];
                        if (previousToken.kind !== lexer_1.Lexeme.Colon) {
                            addError(endIfToken, "Expected ':' to preceed 'end if'");
                        }
                    }
                    match(lexer_1.Lexeme.Newline);
                }
            }
            else {
                let thenStatement = declaration(lexer_1.Lexeme.ElseIf, lexer_1.Lexeme.Else);
                if (!thenStatement) {
                    throw addError(peek(), "Expected a statement to follow 'if ...condition... then'");
                }
                thenBranch = new Stmt.Block([thenStatement], peek().location);
                while (match(lexer_1.Lexeme.ElseIf)) {
                    let elseIf = previous();
                    let elseIfCondition = expression();
                    if (checkThen()) {
                        // `then` is optional after `else if ...condition...`, so only advance to the next token if `then` is present
                        advance();
                    }
                    let elseIfThen = declaration(lexer_1.Lexeme.ElseIf, lexer_1.Lexeme.Else);
                    if (!elseIfThen) {
                        throw addError(peek(), `Expected a statement to follow '${elseIf.text} ...condition... then'`);
                    }
                    elseIfBranches.push({
                        condition: elseIfCondition,
                        thenBranch: new Stmt.Block([elseIfThen], peek().location),
                    });
                }
                if (match(lexer_1.Lexeme.Else)) {
                    let elseStatement = declaration();
                    if (!elseStatement) {
                        throw addError(peek(), `Expected a statement to follow 'else'`);
                    }
                    elseBranch = new Stmt.Block([elseStatement], peek().location);
                }
            }
            return new Stmt.If({
                if: ifToken,
                then: thenToken,
                elseIfs: elseIfTokens,
                endIf: endIfToken,
            }, condition, thenBranch, elseIfBranches, elseBranch);
        }
        function setStatement(...additionalTerminators) {
            /**
             * Attempts to find an expression-statement or an increment statement.
             * While calls are valid expressions _and_ statements, increment (e.g. `foo++`)
             * statements aren't valid expressions. They _do_ however fall under the same parsing
             * priority as standalone function calls though, so we cann parse them in the same way.
             */
            function _expressionStatement() {
                let expressionStart = peek();
                if (check(lexer_1.Lexeme.PlusPlus, lexer_1.Lexeme.MinusMinus)) {
                    let operator = advance();
                    if (check(lexer_1.Lexeme.PlusPlus, lexer_1.Lexeme.MinusMinus)) {
                        throw addError(peek(), "Consecutive increment/decrement operators are not allowed");
                    }
                    else if (expr instanceof Expr.Call) {
                        throw addError(expressionStart, "Increment/decrement operators are not allowed on the result of a function call");
                    }
                    while (match(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon))
                        ;
                    return new Stmt.Increment(expr, operator);
                }
                if (!check(...additionalTerminators)) {
                    consume("Expected newline or ':' after expression statement", lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon, lexer_1.Lexeme.Eof);
                }
                if (expr instanceof Expr.Call) {
                    return new Stmt.Expression(expr);
                }
                throw addError(expressionStart, "Expected statement or function call, but received an expression");
            }
            let expr = call();
            if (check(...assignmentOperators) && !(expr instanceof Expr.Call)) {
                let left = expr;
                let operator = advance();
                let right = expression();
                // Create a dotted or indexed "set" based on the left-hand side's type
                if (left instanceof Expr.IndexedGet) {
                    consume("Expected newline or ':' after indexed 'set' statement", lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon, lexer_1.Lexeme.Eof);
                    return new Stmt.IndexedSet(left.obj, left.index, operator.kind === lexer_1.Lexeme.Equal
                        ? right
                        : new Expr.Binary(left, operator, right), left.closingSquare);
                }
                else if (left instanceof Expr.DottedGet) {
                    consume("Expected newline or ':' after dotted 'set' statement", lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon, lexer_1.Lexeme.Eof);
                    return new Stmt.DottedSet(left.obj, left.name, operator.kind === lexer_1.Lexeme.Equal
                        ? right
                        : new Expr.Binary(left, operator, right));
                }
                else {
                    return _expressionStatement();
                }
            }
            else {
                return _expressionStatement();
            }
        }
        function printStatement(...additionalterminators) {
            let printKeyword = advance();
            let values = [];
            //print statements can be empty, so look for empty print conditions
            if (isAtEnd() || check(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon)) {
                let emptyStringLiteral = new Expr.Literal(new brsTypes_1.BrsString(""), printKeyword.location);
                values.push(emptyStringLiteral);
            }
            else {
                values.push(expression());
            }
            while (!check(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon, ...additionalterminators) && !isAtEnd()) {
                if (check(lexer_1.Lexeme.Semicolon)) {
                    values.push(advance());
                }
                if (check(lexer_1.Lexeme.Comma)) {
                    values.push(advance());
                }
                if (!check(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon) && !isAtEnd()) {
                    values.push(expression());
                }
            }
            if (!check(...additionalterminators)) {
                consume("Expected newline or ':' after printed values", lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon, lexer_1.Lexeme.Eof);
            }
            return new Stmt.Print({ print: printKeyword }, values);
        }
        /**
         * Parses a return statement with an optional return value.
         * @returns an AST representation of a return statement.
         */
        function returnStatement() {
            let tokens = { return: previous() };
            if (check(lexer_1.Lexeme.Colon, lexer_1.Lexeme.Newline, lexer_1.Lexeme.Eof)) {
                while (match(lexer_1.Lexeme.Colon, lexer_1.Lexeme.Newline, lexer_1.Lexeme.Eof))
                    ;
                return new Stmt.Return(tokens);
            }
            let toReturn = expression();
            while (match(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon))
                ;
            return new Stmt.Return(tokens, toReturn);
        }
        /**
         * Parses a `label` statement
         * @returns an AST representation of an `label` statement.
         */
        function labelStatement() {
            let tokens = {
                identifier: advance(),
                colon: advance(),
            };
            consume("Labels must be declared on their own line", lexer_1.Lexeme.Newline, lexer_1.Lexeme.Eof);
            return new Stmt.Label(tokens);
        }
        /**
         * Parses a `goto` statement
         * @returns an AST representation of an `goto` statement.
         */
        function gotoStatement() {
            let tokens = {
                goto: advance(),
                label: consume("Expected label identifier after goto keyword", lexer_1.Lexeme.Identifier),
            };
            while (match(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon))
                ;
            return new Stmt.Goto(tokens);
        }
        /**
         * Parses an `end` statement
         * @returns an AST representation of an `end` statement.
         */
        function endStatement() {
            let tokens = { end: advance() };
            while (match(lexer_1.Lexeme.Newline))
                ;
            return new Stmt.End(tokens);
        }
        /**
         * Parses a `stop` statement
         * @returns an AST representation of a `stop` statement
         */
        function stopStatement() {
            let tokens = { stop: advance() };
            while (match(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon))
                ;
            return new Stmt.Stop(tokens);
        }
        /**
         * Parses a block, looking for a specific terminating Lexeme to denote completion.
         * @param terminators the token(s) that signifies the end of this block; all other terminators are
         *                    ignored.
         */
        function block(...terminators) {
            let startingToken = peek();
            const statements = [];
            while (!check(...terminators) && !isAtEnd()) {
                //grab the location of the current token
                let loopCurrent = current;
                let dec = declaration();
                if (dec) {
                    statements.push(dec);
                }
                else {
                    //something went wrong. reset to the top of the loop
                    current = loopCurrent;
                    //scrap the entire line
                    consumeUntil(lexer_1.Lexeme.Colon, lexer_1.Lexeme.Newline, lexer_1.Lexeme.Eof);
                    //trash the newline character so we start the next iteraion on the next line
                    advance();
                }
            }
            if (isAtEnd()) {
                return undefined;
                // TODO: Figure out how to handle unterminated blocks well
            }
            return new Stmt.Block(statements, startingToken.location);
        }
        function expression() {
            return anonymousFunction();
        }
        function anonymousFunction() {
            if (check(lexer_1.Lexeme.Sub, lexer_1.Lexeme.Function)) {
                return functionDeclaration(true);
            }
            return boolean();
        }
        function boolean() {
            let expr = relational();
            while (match(lexer_1.Lexeme.And, lexer_1.Lexeme.Or)) {
                let operator = previous();
                let right = relational();
                expr = new Expr.Binary(expr, operator, right);
            }
            return expr;
        }
        function relational() {
            let expr = additive();
            while (match(lexer_1.Lexeme.Equal, lexer_1.Lexeme.LessGreater, lexer_1.Lexeme.Greater, lexer_1.Lexeme.GreaterEqual, lexer_1.Lexeme.Less, lexer_1.Lexeme.LessEqual)) {
                let operator = previous();
                let right = additive();
                expr = new Expr.Binary(expr, operator, right);
            }
            return expr;
        }
        // TODO: bitshift
        function additive() {
            let expr = multiplicative();
            while (match(lexer_1.Lexeme.Plus, lexer_1.Lexeme.Minus)) {
                let operator = previous();
                let right = multiplicative();
                expr = new Expr.Binary(expr, operator, right);
            }
            return expr;
        }
        function multiplicative() {
            let expr = exponential();
            while (match(lexer_1.Lexeme.Slash, lexer_1.Lexeme.Backslash, lexer_1.Lexeme.Star, lexer_1.Lexeme.Mod)) {
                let operator = previous();
                let right = exponential();
                expr = new Expr.Binary(expr, operator, right);
            }
            return expr;
        }
        function exponential() {
            let expr = prefixUnary();
            while (match(lexer_1.Lexeme.Caret)) {
                let operator = previous();
                let right = prefixUnary();
                expr = new Expr.Binary(expr, operator, right);
            }
            return expr;
        }
        function prefixUnary() {
            if (match(lexer_1.Lexeme.Not, lexer_1.Lexeme.Minus)) {
                let operator = previous();
                let right = prefixUnary();
                return new Expr.Unary(operator, right);
            }
            return call();
        }
        function call() {
            let expr = primary();
            while (true) {
                if (match(lexer_1.Lexeme.LeftParen)) {
                    expr = finishCall(expr);
                }
                else if (match(lexer_1.Lexeme.LeftSquare)) {
                    while (match(lexer_1.Lexeme.Newline))
                        ;
                    let index = expression();
                    while (match(lexer_1.Lexeme.Newline))
                        ;
                    let closingSquare = consume("Expected ']' after array or object index", lexer_1.Lexeme.RightSquare);
                    expr = new Expr.IndexedGet(expr, index, closingSquare);
                }
                else if (match(lexer_1.Lexeme.Dot)) {
                    while (match(lexer_1.Lexeme.Newline))
                        ;
                    let name = consume("Expected property name after '.'", lexer_1.Lexeme.Identifier, ...allowedProperties);
                    // force it into an identifier so the AST makes some sense
                    name.kind = lexer_1.Lexeme.Identifier;
                    expr = new Expr.DottedGet(expr, name);
                }
                else {
                    break;
                }
            }
            return expr;
        }
        function finishCall(callee) {
            let args = [];
            while (match(lexer_1.Lexeme.Newline))
                ;
            if (!check(lexer_1.Lexeme.RightParen)) {
                do {
                    while (match(lexer_1.Lexeme.Newline))
                        ;
                    if (args.length >= Expr.Call.MaximumArguments) {
                        throw addError(peek(), `Cannot have more than ${Expr.Call.MaximumArguments} arguments`);
                    }
                    args.push(expression());
                } while (match(lexer_1.Lexeme.Comma));
            }
            while (match(lexer_1.Lexeme.Newline))
                ;
            const closingParen = consume("Expected ')' after function call arguments", lexer_1.Lexeme.RightParen);
            return new Expr.Call(callee, closingParen, args);
        }
        function primary() {
            switch (true) {
                case match(lexer_1.Lexeme.False):
                    return new Expr.Literal(brsTypes_1.BrsBoolean.False, previous().location);
                case match(lexer_1.Lexeme.True):
                    return new Expr.Literal(brsTypes_1.BrsBoolean.True, previous().location);
                case match(lexer_1.Lexeme.Invalid):
                    return new Expr.Literal(brsTypes_1.BrsInvalid.Instance, previous().location);
                case match(lexer_1.Lexeme.Integer, lexer_1.Lexeme.LongInteger, lexer_1.Lexeme.Float, lexer_1.Lexeme.Double, lexer_1.Lexeme.String):
                    return new Expr.Literal(previous().literal, previous().location);
                case match(lexer_1.Lexeme.Identifier):
                    return new Expr.Variable(previous());
                case match(lexer_1.Lexeme.LeftParen):
                    let left = previous();
                    let expr = expression();
                    let right = consume("Unmatched '(' - expected ')' after expression", lexer_1.Lexeme.RightParen);
                    return new Expr.Grouping({ left, right }, expr);
                case match(lexer_1.Lexeme.LeftSquare):
                    let elements = [];
                    let openingSquare = previous();
                    while (match(lexer_1.Lexeme.Newline))
                        ;
                    if (!match(lexer_1.Lexeme.RightSquare)) {
                        elements.push(expression());
                        while (match(lexer_1.Lexeme.Comma, lexer_1.Lexeme.Newline)) {
                            while (match(lexer_1.Lexeme.Newline))
                                ;
                            if (check(lexer_1.Lexeme.RightSquare)) {
                                break;
                            }
                            elements.push(expression());
                        }
                        consume("Unmatched '[' - expected ']' after array literal", lexer_1.Lexeme.RightSquare);
                    }
                    let closingSquare = previous();
                    //consume("Expected newline or ':' after array literal", Lexeme.Newline, Lexeme.Colon, Lexeme.Eof);
                    return new Expr.ArrayLiteral(elements, openingSquare, closingSquare);
                case match(lexer_1.Lexeme.LeftBrace):
                    let openingBrace = previous();
                    let members = [];
                    function key() {
                        let k;
                        if (check(lexer_1.Lexeme.Identifier, ...allowedProperties)) {
                            k = new brsTypes_1.BrsString(advance().text);
                        }
                        else if (check(lexer_1.Lexeme.String)) {
                            k = advance().literal;
                        }
                        else {
                            throw addError(peek(), `Expected identifier or string as associative array key, but received '${peek()
                                .text || ""}'`);
                        }
                        consume("Expected ':' between associative array key and value", lexer_1.Lexeme.Colon);
                        return k;
                    }
                    while (match(lexer_1.Lexeme.Newline))
                        ;
                    if (!match(lexer_1.Lexeme.RightBrace)) {
                        members.push({
                            name: key(),
                            value: expression(),
                        });
                        while (match(lexer_1.Lexeme.Comma, lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon)) {
                            while (match(lexer_1.Lexeme.Newline, lexer_1.Lexeme.Colon))
                                ;
                            if (check(lexer_1.Lexeme.RightBrace)) {
                                break;
                            }
                            members.push({
                                name: key(),
                                value: expression(),
                            });
                        }
                        consume("Unmatched '{' - expected '}' after associative array literal", lexer_1.Lexeme.RightBrace);
                    }
                    let closingBrace = previous();
                    return new Expr.AALiteral(members, openingBrace, closingBrace);
                case match(lexer_1.Lexeme.Pos, lexer_1.Lexeme.Tab):
                    let token = Object.assign(previous(), {
                        kind: lexer_1.Lexeme.Identifier,
                    });
                    return new Expr.Variable(token);
                case check(lexer_1.Lexeme.Function, lexer_1.Lexeme.Sub):
                    return anonymousFunction();
                default:
                    throw addError(peek(), `Found unexpected token '${peek().text}'`);
            }
        }
        function match(...lexemes) {
            for (let lexeme of lexemes) {
                if (check(lexeme)) {
                    advance();
                    return true;
                }
            }
            return false;
        }
        /**
         * Consume tokens until one of the `stopLexemes` is encountered
         * @param lexemes
         * @return - the list of tokens consumed, EXCLUDING the `stopLexeme` (you can use `peek()` to see which one it was)
         */
        function consumeUntil(...stopLexemes) {
            let result = [];
            //take tokens until we encounter one of the stopLexemes
            while (!stopLexemes.includes(peek().kind)) {
                result.push(advance());
            }
            return result;
        }
        function consume(message, ...lexemes) {
            let foundLexeme = lexemes
                .map(lexeme => peek().kind === lexeme)
                .reduce((foundAny, foundCurrent) => foundAny || foundCurrent, false);
            if (foundLexeme) {
                return advance();
            }
            throw addError(peek(), message);
        }
        function advance() {
            if (!isAtEnd()) {
                current++;
            }
            return previous();
        }
        /**
         * Check that the previous token matches one of the specified Lexemes
         * @param lexemes
         */
        function checkPrevious(...lexemes) {
            if (current === 0) {
                return false;
            }
            else {
                current--;
                var result = check(...lexemes);
                current++;
                return result;
            }
        }
        function check(...lexemes) {
            if (isAtEnd()) {
                return false;
            }
            return lexemes.some(lexeme => peek().kind === lexeme);
        }
        function checkNext(...lexemes) {
            if (isAtEnd()) {
                return false;
            }
            return lexemes.some(lexeme => peekNext().kind === lexeme);
        }
        function isAtEnd() {
            return peek().kind === lexer_1.Lexeme.Eof;
        }
        function peekNext() {
            if (isAtEnd()) {
                return peek();
            }
            return tokens[current + 1];
        }
        function peek() {
            return tokens[current];
        }
        function previous() {
            return tokens[current - 1];
        }
        function synchronize() {
            advance(); // skip the erroneous token
            while (!isAtEnd()) {
                if (previous().kind === lexer_1.Lexeme.Newline || previous().kind === lexer_1.Lexeme.Colon) {
                    // newlines and ':' characters separate statements
                    return;
                }
                switch (peek().kind) {
                    case lexer_1.Lexeme.Function:
                    case lexer_1.Lexeme.Sub:
                    case lexer_1.Lexeme.If:
                    case lexer_1.Lexeme.For:
                    case lexer_1.Lexeme.ForEach:
                    case lexer_1.Lexeme.While:
                    case lexer_1.Lexeme.Print:
                    case lexer_1.Lexeme.Return:
                        // start parsing again from the next block starter or obvious
                        // expression start
                        return;
                }
                advance();
            }
        }
    }
}
exports.Parser = Parser;
//# sourceMappingURL=data:application/json;base64,