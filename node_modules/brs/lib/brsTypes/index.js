"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const BrsType_1 = require("./BrsType");
const RoArray_1 = require("./components/RoArray");
const RoAssociativeArray_1 = require("./components/RoAssociativeArray");
const RoString_1 = require("./components/RoString");
__export(require("./BrsType"));
__export(require("./Int32"));
__export(require("./Int64"));
__export(require("./Float"));
__export(require("./Double"));
__export(require("./components/RoArray"));
__export(require("./components/RoAssociativeArray"));
__export(require("./components/Timespan"));
__export(require("./components/BrsObjects"));
__export(require("./components/RoRegex"));
__export(require("./components/RoString"));
__export(require("./Callable"));
/**
 * Determines whether or not the given value is a number.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` is a numeric value, otherwise `false`.
 */
function isBrsNumber(value) {
    switch (value.kind) {
        case BrsType_1.ValueKind.Int32:
        case BrsType_1.ValueKind.Int64:
        case BrsType_1.ValueKind.Float:
        case BrsType_1.ValueKind.Double:
            return true;
        default:
            return false;
    }
}
exports.isBrsNumber = isBrsNumber;
/**
 * Determines whether or not the given value is a string.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` is a string, otherwise `false`.
 */
function isBrsString(value) {
    return value.kind === BrsType_1.ValueKind.String || value instanceof RoString_1.RoString;
}
exports.isBrsString = isBrsString;
/**
 * Determines whether or not the given value is a boolean.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` if a boolean, otherwise `false`.
 */
function isBrsBoolean(value) {
    return value.kind === BrsType_1.ValueKind.Boolean;
}
exports.isBrsBoolean = isBrsBoolean;
/**
 * Determines whether or not the given value is a BrightScript callable.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` is a Callable value, otherwise `false`.
 */
function isBrsCallable(value) {
    return value.kind === BrsType_1.ValueKind.Callable;
}
exports.isBrsCallable = isBrsCallable;
/**
 * Determines whether or not the provided value is an instance of a iterable BrightScript type.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` can be iterated across, otherwise `false`.
 */
function isIterable(value) {
    return value instanceof RoArray_1.RoArray || value instanceof RoAssociativeArray_1.RoAssociativeArray;
}
exports.isIterable = isIterable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnJzVHlwZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FRbUI7QUFDbkIsa0RBQStDO0FBQy9DLHdFQUFxRTtBQU9yRSxvREFBaUQ7QUFFakQsK0JBQTBCO0FBQzFCLDZCQUF3QjtBQUN4Qiw2QkFBd0I7QUFDeEIsNkJBQXdCO0FBQ3hCLDhCQUF5QjtBQUN6QiwwQ0FBcUM7QUFDckMscURBQWdEO0FBQ2hELDJDQUFzQztBQUN0Qyw2Q0FBd0M7QUFDeEMsMENBQXFDO0FBQ3JDLDJDQUFzQztBQUN0QyxnQ0FBMkI7QUFFM0I7Ozs7R0FJRztBQUNILFNBQWdCLFdBQVcsQ0FBQyxLQUFjO0lBQ3RDLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNoQixLQUFLLG1CQUFTLENBQUMsS0FBSyxDQUFDO1FBQ3JCLEtBQUssbUJBQVMsQ0FBQyxLQUFLLENBQUM7UUFDckIsS0FBSyxtQkFBUyxDQUFDLEtBQUssQ0FBQztRQUNyQixLQUFLLG1CQUFTLENBQUMsTUFBTTtZQUNqQixPQUFPLElBQUksQ0FBQztRQUNoQjtZQUNJLE9BQU8sS0FBSyxDQUFDO0tBQ3BCO0FBQ0wsQ0FBQztBQVZELGtDQVVDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLFdBQVcsQ0FBQyxLQUFjO0lBQ3RDLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxtQkFBUyxDQUFDLE1BQU0sSUFBSSxLQUFLLFlBQVksbUJBQVEsQ0FBQztBQUN4RSxDQUFDO0FBRkQsa0NBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLEtBQWM7SUFDdkMsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLG1CQUFTLENBQUMsT0FBTyxDQUFDO0FBQzVDLENBQUM7QUFGRCxvQ0FFQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixhQUFhLENBQUMsS0FBYztJQUN4QyxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssbUJBQVMsQ0FBQyxRQUFRLENBQUM7QUFDN0MsQ0FBQztBQUZELHNDQUVDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLFVBQVUsQ0FBQyxLQUFjO0lBQ3JDLE9BQU8sS0FBSyxZQUFZLGlCQUFPLElBQUksS0FBSyxZQUFZLHVDQUFrQixDQUFDO0FBQzNFLENBQUM7QUFGRCxnQ0FFQyJ9