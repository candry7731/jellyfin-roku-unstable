"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const long_1 = __importDefault(require("long"));
const _1 = require("./");
const BrsType_1 = require("./BrsType");
const Float_1 = require("./Float");
const Double_1 = require("./Double");
class Int64 {
    /**
     * Creates a new BrightScript 64-bit integer value representing the provided `value`.
     * @param value the value to store in the BrightScript integer.
     */
    constructor(value) {
        this.kind = BrsType_1.ValueKind.Int64;
        if (value instanceof long_1.default) {
            this.value = value;
        }
        else {
            this.value = long_1.default.fromNumber(Math.round(value));
        }
    }
    getValue() {
        return this.value;
    }
    /**
     * Creates a new BrightScript 64-bit integer value representing the integer contained in
     * `asString`.
     * @param asString the string representation of the value to store in the BrightScript 64-bit
     *                 int. Will be rounded to the nearest 64-bit integer.
     * @returns a BrightScript 64-bit integer value representing `asString`.
     */
    static fromString(asString) {
        let radix = 10;
        if (asString.toLowerCase().startsWith("&h")) {
            radix = 16; // it's a hex literal!
            asString = asString.slice(2); // remove "&h" from the string representation
        }
        let i64 = new Int64(long_1.default.fromString(asString, undefined, radix));
        const decimalLocation = asString.indexOf(".");
        if (decimalLocation > -1 && decimalLocation + 1 < asString.length) {
            // Long.fromString truncates to integers instead of rounding, so manually add one to
            // compensate if necessary
            if (asString[decimalLocation + 1] >= "5" && asString[decimalLocation + 1] <= "9") {
                i64 = new Int64(i64.getValue().add(long_1.default.ONE));
            }
        }
        return i64;
    }
    add(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return new Int64(this.getValue().add(rhs.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue().toNumber() + rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue().toNumber() + rhs.getValue());
        }
    }
    subtract(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return new Int64(this.getValue().subtract(rhs.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue().toNumber() - rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue().toNumber() - rhs.getValue());
        }
    }
    multiply(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return new Int64(this.getValue().multiply(rhs.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue().toNumber() * rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue().toNumber() * rhs.getValue());
        }
    }
    divide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return new Float_1.Float(this.getValue()
                    .divide(rhs.getValue())
                    .toNumber());
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue().toNumber() / rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue().toNumber() / rhs.getValue());
        }
    }
    modulo(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return new Int64(this.getValue().modulo(rhs.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Int64(this.getValue().toNumber() % rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Int64(this.getValue().toNumber() % rhs.getValue());
        }
    }
    intDivide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return new Int64(this.getValue().divide(rhs.getValue()));
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int64(Math.floor(this.getValue().toNumber() / rhs.getValue()));
        }
    }
    pow(exponent) {
        switch (exponent.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Int64(Math.pow(this.getValue().toNumber(), exponent.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(Math.pow(this.getValue().toNumber(), exponent.getValue()));
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(Math.pow(this.getValue().toNumber(), exponent.getValue()));
            case BrsType_1.ValueKind.Int64:
                return new Int64(Math.pow(this.getValue().toNumber(), exponent.getValue().toNumber()));
        }
    }
    and(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int64(this.getValue().and(rhs.getValue()));
        }
    }
    or(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int64(this.getValue().or(rhs.getValue()));
        }
    }
    lessThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue().lessThan(other.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue().toNumber()).lessThan(other);
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue().toNumber()).lessThan(other);
            default:
                return _1.BrsBoolean.False;
        }
    }
    greaterThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue().greaterThan(other.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue().toNumber()).greaterThan(other);
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue().toNumber()).greaterThan(other);
            default:
                return _1.BrsBoolean.False;
        }
    }
    equalTo(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue().equals(other.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue().toNumber()).equalTo(other);
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue().toNumber()).equalTo(other);
            default:
                return _1.BrsBoolean.False;
        }
    }
    toString(parent) {
        return this.value.toString();
    }
}
exports.Int64 = Int64;
//# sourceMappingURL=data:application/json;base64,