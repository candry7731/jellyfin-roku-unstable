"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Brs = __importStar(require("."));
const Expr = __importStar(require("../parser/Expression"));
const Environment_1 = require("../interpreter/Environment");
/**
 * A variant of the `Argument` interface intended for use only when creating standard library
 * functions.
 */
class StdlibArgument {
    /**
     * Creates an `Argument` without requiring locations to be specified.
     * @param name the name of the argument, used for presentation to users
     * @param type the type of value accepted at runtime
     * @param defaultValue the optional default value to use for this argument if one isn't
     *                     provided at runtime
     */
    constructor(name, type, defaultValue) {
        this.location = StdlibArgument.InternalLocation;
        this.name = { text: name, location: StdlibArgument.InternalLocation };
        this.type = { kind: type, location: StdlibArgument.InternalLocation };
        if (defaultValue) {
            this.defaultValue = new Expr.Literal(defaultValue, StdlibArgument.InternalLocation);
        }
    }
}
/** A fake location exists only within the BRS runtime. */
StdlibArgument.InternalLocation = {
    file: "(stdlib)",
    start: { line: -1, column: -1 },
    end: { line: -1, column: -1 },
};
exports.StdlibArgument = StdlibArgument;
/** The set of possible reasons why a signature and runtime arguments don't match. */
var MismatchReason;
(function (MismatchReason) {
    /** Not enough arguments were provided to satisfy a signature. */
    MismatchReason[MismatchReason["TooFewArguments"] = 0] = "TooFewArguments";
    /** Too many arguments were provided to satisfy a signature. */
    MismatchReason[MismatchReason["TooManyArguments"] = 1] = "TooManyArguments";
    /** An argument's type didn't match the signature's type. */
    MismatchReason[MismatchReason["ArgumentTypeMismatch"] = 2] = "ArgumentTypeMismatch";
})(MismatchReason = exports.MismatchReason || (exports.MismatchReason = {}));
/** A `function` or `sub` (either "native" or implemented in BrightScript) that can be called in a BrightScript file. */
class Callable {
    /**
     * Creates a new BrightScript `function` or `sub`.
     * @param name the name this callable should have within the BrightScript runtime.
     * @param signatures the signatures and associated (JavaScript) implementations this callable should
     *                   have within the BrightScript runtime.
     */
    constructor(name, ...signatures) {
        this.kind = Brs.ValueKind.Callable;
        this.name = name;
        this.signatures = signatures;
    }
    /**
     * Calls the function this `Callable` represents with the provided `arg`uments using the
     * provided `Interpreter` instance.
     *
     * @param interpreter the interpreter to execute this callable in.
     * @param args the arguments to pass to the callable routine.
     *
     * @returns the return value of the function, or `invalid` if nothing is explicitly returned.
     */
    call(interpreter, ...args) {
        let satisfiedSignature = this.getFirstSatisfiedSignature(args);
        if (satisfiedSignature == null) {
            throw new Error("BrightScript function called without first checking for satisfied signatures. " +
                "Ensure `Callable#getAllSignatureMismatches` is called before `Callable#call`.");
        }
        let { signature, impl } = satisfiedSignature;
        let mutableArgs = args.slice();
        return interpreter.inSubEnv(subInterpreter => {
            // first, we need to evaluate all of the parameter default values
            // and define them in a new environment
            signature.args.forEach((param, index) => {
                if (param.defaultValue && mutableArgs[index] == null) {
                    mutableArgs[index] = subInterpreter.evaluate(param.defaultValue);
                }
                subInterpreter.environment.define(Environment_1.Scope.Function, param.name.text, mutableArgs[index]);
            });
            // then return whatever the selected implementation would return
            return impl(subInterpreter, ...mutableArgs);
        });
    }
    lessThan(other) {
        return Brs.BrsBoolean.False;
    }
    greaterThan(other) {
        return Brs.BrsBoolean.False;
    }
    equalTo(other) {
        return Brs.BrsBoolean.from(this === other);
    }
    toString(parent) {
        if (this.name) {
            return `[Function ${this.name}]`;
        }
        else {
            return "[anonymous function]";
        }
    }
    getName() {
        return this.name || "";
    }
    getFirstSatisfiedSignature(args) {
        return this.signatures.filter(sigAndImpl => this.getSignatureMismatches(sigAndImpl.signature, args).length === 0)[0];
    }
    getAllSignatureMismatches(args) {
        return this.signatures.map(sigAndImpl => ({
            signature: sigAndImpl.signature,
            mismatches: this.getSignatureMismatches(sigAndImpl.signature, args),
        }));
    }
    getSignatureMismatches(sig, args) {
        let reasons = [];
        let requiredArgCount = sig.args.filter(arg => !arg.defaultValue).length;
        if (args.length < requiredArgCount) {
            reasons.push({
                reason: MismatchReason.TooFewArguments,
                expected: sig.args.length.toString(),
                received: args.length.toString(),
            });
        }
        else if (args.length > sig.args.length) {
            reasons.push({
                reason: MismatchReason.TooManyArguments,
                expected: sig.args.length.toString(),
                received: args.length.toString(),
            });
        }
        sig.args.slice(0, Math.min(sig.args.length, args.length)).forEach((_value, index) => {
            let expected = sig.args[index];
            let received = args[index];
            if (expected.type.kind === Brs.ValueKind.Dynamic ||
                expected.type.kind === Brs.ValueKind.Object) {
                return;
            }
            if (expected.type.kind !== received.kind) {
                reasons.push({
                    reason: MismatchReason.ArgumentTypeMismatch,
                    expected: Brs.ValueKind.toString(expected.type.kind),
                    received: Brs.ValueKind.toString(received.kind),
                    argName: expected.name.text,
                });
            }
        });
        return reasons;
    }
}
exports.Callable = Callable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FsbGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnJzVHlwZXMvQ2FsbGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsdUNBQXlCO0FBQ3pCLDJEQUE2QztBQUM3Qyw0REFBbUQ7QUF3Qm5EOzs7R0FHRztBQUNILE1BQWEsY0FBYztJQU12Qjs7Ozs7O09BTUc7SUFDSCxZQUFZLElBQVksRUFBRSxJQUFtQixFQUFFLFlBQTBCO1FBQ3JFLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hELElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDdEUsSUFBSSxZQUFZLEVBQUU7WUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDdkY7SUFDTCxDQUFDOztBQUVELDBEQUEwRDtBQUNuRCwrQkFBZ0IsR0FBRztJQUN0QixJQUFJLEVBQUUsVUFBVTtJQUNoQixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQy9CLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Q0FDaEMsQ0FBQztBQTNCTix3Q0E0QkM7QUEwQ0QscUZBQXFGO0FBQ3JGLElBQVksY0FPWDtBQVBELFdBQVksY0FBYztJQUN0QixpRUFBaUU7SUFDakUseUVBQWUsQ0FBQTtJQUNmLCtEQUErRDtJ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