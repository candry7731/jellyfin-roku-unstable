"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RoString_1 = require("./components/RoString");
/** Set of values supported in BrightScript. */
var ValueKind;
(function (ValueKind) {
    ValueKind[ValueKind["Invalid"] = 0] = "Invalid";
    ValueKind[ValueKind["Boolean"] = 1] = "Boolean";
    ValueKind[ValueKind["String"] = 2] = "String";
    ValueKind[ValueKind["Int32"] = 3] = "Int32";
    ValueKind[ValueKind["Int64"] = 4] = "Int64";
    ValueKind[ValueKind["Float"] = 5] = "Float";
    ValueKind[ValueKind["Double"] = 6] = "Double";
    ValueKind[ValueKind["Callable"] = 7] = "Callable";
    ValueKind[ValueKind["Uninitialized"] = 8] = "Uninitialized";
    ValueKind[ValueKind["Dynamic"] = 9] = "Dynamic";
    ValueKind[ValueKind["Void"] = 10] = "Void";
    ValueKind[ValueKind["Object"] = 11] = "Object";
})(ValueKind = exports.ValueKind || (exports.ValueKind = {}));
(function (ValueKind) {
    /**
     * Converts a `ValueKind` enum member to a human-readable string representation.
     * @returns a textual representation of the provided value kind.
     */
    function toString(kind) {
        switch (kind) {
            case ValueKind.Invalid:
                return "Invalid";
            case ValueKind.Boolean:
                return "Boolean";
            case ValueKind.String:
                return "String";
            case ValueKind.Int32:
                return "Integer";
            case ValueKind.Int64:
                return "LongInteger";
            case ValueKind.Float:
                return "Float";
            case ValueKind.Double:
                return "Double";
            case ValueKind.Callable:
                return "Function";
            case ValueKind.Dynamic:
                return "Dynamic";
            case ValueKind.Void:
                return "Void";
            case ValueKind.Uninitialized:
                return "<UNINITIALIZED>";
            case ValueKind.Object:
                return "Object";
        }
    }
    ValueKind.toString = toString;
    /**
     * Fetches a `ValueKind` enum member by its string representation.
     * @param kind the string representation of a `ValueKind`
     * @returns the corresponding `ValueKind` if one exists, otherwise `undefined`.
     */
    function fromString(kind) {
        switch (kind.toLowerCase()) {
            case "invalid":
                return ValueKind.Invalid;
            case "boolean":
                return ValueKind.Boolean;
            case "string":
                return ValueKind.String;
            case "integer":
                return ValueKind.Int32;
            case "longinteger":
                return ValueKind.Int64;
            case "float":
                return ValueKind.Float;
            case "double":
                return ValueKind.Double;
            case "function":
                return ValueKind.Callable;
            case "dynamic":
                return ValueKind.Dynamic;
            case "void":
                return ValueKind.Void;
            case "<uninitialized>":
                return ValueKind.Uninitialized;
            case "object":
                return ValueKind.Object;
            default:
                return undefined;
        }
    }
    ValueKind.fromString = fromString;
})(ValueKind = exports.ValueKind || (exports.ValueKind = {}));
/** Internal representation of a string in BrightScript. */
class BrsString {
    constructor(value) {
        this.value = value;
        this.kind = ValueKind.String;
    }
    lessThan(other) {
        if (other.kind === ValueKind.String) {
            return BrsBoolean.from(this.value < other.value);
        }
        else if (other instanceof RoString_1.RoString) {
            return this.lessThan(other.unbox());
        }
        return BrsBoolean.False;
    }
    greaterThan(other) {
        if (other.kind === ValueKind.String) {
            return BrsBoolean.from(this.value > other.value);
        }
        else if (other instanceof RoString_1.RoString) {
            return this.greaterThan(other.unbox());
        }
        return BrsBoolean.False;
    }
    equalTo(other) {
        if (other.kind === ValueKind.String) {
            return BrsBoolean.from(this.value === other.value);
        }
        else if (other instanceof RoString_1.RoString) {
            return this.equalTo(other.unbox());
        }
        return BrsBoolean.False;
    }
    toString(parent) {
        return this.value;
    }
    concat(other) {
        return new BrsString(this.value + other.value);
    }
    box() {
        return new RoString_1.RoString(this);
    }
}
exports.BrsString = BrsString;
/** Internal representation of a boolean in BrightScript. */
class BrsBoolean {
    constructor(value) {
        this.value = value;
        this.kind = ValueKind.Boolean;
    }
    toBoolean() {
        return this.value;
    }
    static from(value) {
        return value ? BrsBoolean.True : BrsBoolean.False;
    }
    lessThan(other) {
        // booleans aren't less than anything
        // TODO: Validate on a Roku
        return BrsBoolean.False;
    }
    greaterThan(other) {
        // but isn't greater than anything either
        // TODO: Validate on a Roku
        return BrsBoolean.False;
    }
    equalTo(other) {
        if (other.kind === ValueKind.Boolean) {
            return BrsBoolean.from(this === other);
        }
        return BrsBoolean.False;
    }
    toString(parent) {
        return this.value.toString();
    }
    /**
     * Returns the boolean AND of this value with another value.
     * @param other the other value to AND with this one.
     * @returns `BrsBoolean.True` if both this value and the other are true, otherwise
     *          `BrsBoolean.False`.
     */
    and(other) {
        return BrsBoolean.from(this.value && other.value);
    }
    /**
     * Returns the boolean OR of this value with another value.
     * @param other the other value to AND with this one.
     * @returns `BrsBoolean.True` if either this value or the other are true, otherwise
     *          `BrsBoolean.False`.
     */
    or(other) {
        return BrsBoolean.from(this.value || other.value);
    }
    /**
     * Returns the boolean negation of this value with another value.
     * @returns `BrsBoolean.True` if either this value is false, otherwise
     *          `BrsBoolean.False`.
     */
    not() {
        return BrsBoolean.from(!this.value);
    }
}
BrsBoolean.False = new BrsBoolean(false);
BrsBoolean.True = new BrsBoolean(true);
exports.BrsBoolean = BrsBoolean;
/** Internal representation of the BrightScript `invalid` value. */
class BrsInvalid {
    constructor() {
        this.kind = ValueKind.Invalid;
    }
    lessThan(other) {
        // invalid isn't less than anything
        // TODO: Validate on a Roku
        return BrsBoolean.False;
    }
    greaterThan(other) {
        // but isn't greater than anything either
        // TODO: Validate on a Roku
        return BrsBoolean.False;
    }
    equalTo(other) {
        if (other.kind === ValueKind.Invalid) {
            return BrsBoolean.True;
        }
        return BrsBoolean.False;
    }
    toString(parent) {
        return "invalid";
    }
}
BrsInvalid.Instance = new BrsInvalid();
exports.BrsInvalid = BrsInvalid;
/** Internal representation of uninitialized BrightScript variables. */
class Uninitialized {
    constructor() {
        this.kind = ValueKind.Uninitialized;
    }
    lessThan(other) {
        // uninitialized values aren't less than anything
        return BrsBoolean.False;
    }
    greaterThan(other) {
        // uninitialized values aren't less than anything
        return BrsBoolean.False;
    }
    equalTo(other) {
        if (other.kind === ValueKind.String) {
            // Allow variables to be compared to the string "<UNINITIALIZED>" to test if they've
            // been initialized
            return BrsBoolean.from(other.value === this.toString());
        }
        return BrsBoolean.False;
    }
    toString(parent) {
        return "<UNINITIALIZED>";
    }
}
Uninitialized.Instance = new Uninitialized();
exports.Uninitialized = Uninitialized;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJzVHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icnNUeXBlcy9CcnNUeXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsb0RBQWlEO0FBRWpELCtDQUErQztBQUMvQyxJQUFZLFNBYVg7QUFiRCxXQUFZLFNBQVM7SUFDakIsK0NBQU8sQ0FBQTtJQUNQLCtDQUFPLENBQUE7SUFDUCw2Q0FBTSxDQUFBO0lBQ04sMkNBQUssQ0FBQTtJQUNMLDJDQUFLLENBQUE7SUFDTCwyQ0FBSyxDQUFBO0lBQ0wsNkNBQU0sQ0FBQTtJQUNOLGlEQUFRLENBQUE7SUFDUiwyREFBYSxDQUFBO0lBQ2IsK0NBQU8sQ0FBQTtJQUNQLDBDQUFJLENBQUE7SUFDSiw4Q0FBTSxDQUFBO0FBQ1YsQ0FBQyxFQWJXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBYXBCO0FBRUQsV0FBaUIsU0FBUztJQUN0Qjs7O09BR0c7SUFDSCxTQUFnQixRQUFRLENBQUMsSUFBZTtRQUNwQyxRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssU0FBUyxDQUFDLE9BQU87Z0JBQ2xCLE9BQU8sU0FBUyxDQUFDO1lBQ3JCLEtBQUssU0FBUyxDQUFDLE9BQU87Z0JBQ2xCLE9BQU8sU0FBUyxDQUFDO1lBQ3JCLEtBQUssU0FBUyxDQUFDLE1BQU07Z0JBQ2pCLE9BQU8sUUFBUSxDQUFDO1lBQ3BCLEtBQUssU0FBUyxDQUFDLEtBQUs7Z0JBQ2hCLE9BQU8sU0FBUyxDQUFDO1lBQ3JCLEtBQUssU0FBUyxDQUFDLEtBQUs7Z0JBQ2hCLE9BQU8sYUFBYSxDQUFDO1lBQ3pCLEtBQUssU0FBUyxDQUFDLEtBQUs7Z0JBQ2hCLE9BQU8sT0FBTyxDQUFDO1lBQ25CLEtBQUssU0FBUyxDQUFDLE1BQU07Z0JBQ2pCLE9BQU8sUUFBUSxDQUFDO1lBQ3BCLEtBQUssU0FBUyxDQUFDLFFBQVE7Z0JBQ25CLE9BQU8sVUFBVSxDQUFDO1lBQ3RCLEtBQUssU0FBUyxDQUFDLE9BQU87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