"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const BrsType_1 = require("./BrsType");
const Int32_1 = require("./Int32");
const Double_1 = require("./Double");
const Int64_1 = require("./Int64");
/**
 * Number of significant digits represented in an IEEE 32-bit floating point number.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays#Typed_array_views
 */
const IEEE_FLOAT_SIGFIGS = 7;
class Float {
    /**
     * Creates a new BrightScript floating-point value representing the provided `value`.
     * @param value the value to store in the BrightScript float, rounded to 32-bit floating point
     *              precision and maintaining only seven significant digits of accuracy.
     */
    constructor(value) {
        this.kind = BrsType_1.ValueKind.Float;
        this.value = parseFloat(Math.fround(value).toPrecision(IEEE_FLOAT_SIGFIGS));
    }
    getValue() {
        return this.value;
    }
    /**
     * Creates a new BrightScript floating-point value representing the floating point value
     * contained in `asString`.
     * @param asString the string representation of the value to store in the BrightScript float.
     *                 Will be rounded to 32-bit floating point precision.
     * @returns a BrightScript floating-point value representing `asString`.
     */
    static fromString(asString) {
        return new Float(Number.parseFloat(asString));
    }
    add(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (double) + (int64) -> (double)
                return new Float(this.getValue() + rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return new Float(this.getValue() + rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() + rhs.getValue());
        }
    }
    subtract(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (float) - (int64) -> (float)
                return new Float(this.getValue() - rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return new Float(this.getValue() - rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() - rhs.getValue());
        }
    }
    multiply(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (float) * (int64) -> (float)
                return new Float(this.getValue() * rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return new Float(this.getValue() * rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() * rhs.getValue());
        }
    }
    divide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (float) / (int64) -> (float)
                return new Float(this.getValue() / rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return new Float(this.getValue() / rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() / rhs.getValue());
        }
    }
    modulo(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return new Float(this.getValue() % rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() % rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Float(this.getValue() % rhs.getValue().toNumber());
        }
    }
    intDivide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(Math.trunc(this.getValue() / rhs.getValue().toNumber()));
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int32_1.Int32(Math.trunc(this.getValue() / rhs.getValue()));
        }
    }
    pow(exponent) {
        switch (exponent.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Float(Math.pow(this.getValue(), exponent.getValue()));
            case BrsType_1.ValueKind.Int64:
                return new Float(Math.pow(this.getValue(), exponent.getValue().toNumber()));
            case BrsType_1.ValueKind.Float:
                return new Float(Math.pow(this.getValue(), exponent.getValue()));
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(Math.pow(this.getValue(), exponent.getValue()));
        }
    }
    and(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).and(rhs);
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int32_1.Int32(this.getValue() & rhs.getValue());
        }
    }
    or(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).or(rhs);
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int32_1.Int32(this.getValue() | rhs.getValue());
        }
    }
    lessThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue() < other.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return _1.BrsBoolean.from(this.getValue() < other.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue()).lessThan(other);
            default:
                return _1.BrsBoolean.False;
        }
    }
    greaterThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue() > other.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return _1.BrsBoolean.from(this.getValue() > other.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue()).greaterThan(other);
            default:
                return _1.BrsBoolean.False;
        }
    }
    equalTo(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue() === other.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
                return _1.BrsBoolean.from(this.getValue() === other.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue()).equalTo(other);
            default:
                return _1.BrsBoolean.False;
        }
    }
    toString(parent) {
        return this.value.toString();
    }
}
exports.Float = Float;
//# sourceMappingURL=data:application/json;base64,