"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrsComponent_1 = require("./BrsComponent");
const RoArray_1 = require("./RoArray");
const BrsType_1 = require("../BrsType");
const Callable_1 = require("../Callable");
const Int32_1 = require("../Int32");
const Float_1 = require("../Float");
class RoString extends BrsComponent_1.BrsComponent {
    constructor(initialValue) {
        super("roString", ["ifStringOps"]);
        this.kind = BrsType_1.ValueKind.Object;
        // ---------- ifStringOps ----------
        /** Sets the string to the first len characters of s. */
        this.setString = new Callable_1.Callable("SetString", {
            signature: {
                args: [
                    new Callable_1.StdlibArgument("s", BrsType_1.ValueKind.String),
                    new Callable_1.StdlibArgument("len", BrsType_1.ValueKind.Int32),
                ],
                returns: BrsType_1.ValueKind.Void,
            },
            impl: (_interpreter, s, len) => {
                this.intrinsic = new BrsType_1.BrsString(s.value.substr(0, len.getValue()));
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        /** Appends the first len characters of s to the end of the string. */
        this.appendString = new Callable_1.Callable("AppendString", {
            signature: {
                args: [
                    new Callable_1.StdlibArgument("s", BrsType_1.ValueKind.String),
                    new Callable_1.StdlibArgument("len", BrsType_1.ValueKind.Int32),
                ],
                returns: BrsType_1.ValueKind.Void,
            },
            impl: (_interpreter, s, len) => {
                this.intrinsic = this.intrinsic.concat(new BrsType_1.BrsString(s.value.substr(0, len.getValue())));
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        /** Returns the number of characters in the string. */
        this.len = new Callable_1.Callable("Len", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: _interpreter => {
                return new Int32_1.Int32(this.intrinsic.value.length);
            },
        });
        /** Returns a string consisting of the first len characters of the string. */
        this.left = new Callable_1.Callable("Left", {
            signature: {
                args: [new Callable_1.StdlibArgument("len", BrsType_1.ValueKind.Int32)],
                returns: BrsType_1.ValueKind.String,
            },
            impl: (_interpreter, len) => {
                return new BrsType_1.BrsString(this.intrinsic.value.substr(0, len.getValue()));
            },
        });
        /** Returns a string consisting of the last len characters of the string. */
        this.right = new Callable_1.Callable("Right", {
            signature: {
                args: [new Callable_1.StdlibArgument("len", BrsType_1.ValueKind.Int32)],
                returns: BrsType_1.ValueKind.String,
            },
            impl: (_interpreter, len) => {
                let source = this.intrinsic.value;
                return new BrsType_1.BrsString(source.substr(source.length - len.getValue()));
            },
        });
        this.mid = new Callable_1.Callable("Mid", 
        /**
         * Returns a string consisting of the last characters of the string, starting at the
         * zero-based start_index.
         */
        {
            signature: {
                args: [new Callable_1.StdlibArgument("start_index", BrsType_1.ValueKind.Int32)],
                returns: BrsType_1.ValueKind.String,
            },
            impl: (_interpreter, startIndex) => {
                return new BrsType_1.BrsString(this.intrinsic.value.substr(startIndex.getValue()));
            },
        }, 
        /**
         * Returns a string consisting of num_chars characters of the string, starting at the
         * zero-based start_index.
         */
        {
            signature: {
                args: [
                    new Callable_1.StdlibArgument("start_index", BrsType_1.ValueKind.Int32),
                    new Callable_1.StdlibArgument("num_chars", BrsType_1.ValueKind.Int32),
                ],
                returns: BrsType_1.ValueKind.String,
            },
            impl: (_interpreter, startIndex, numChars) => {
                let source = this.intrinsic.value;
                return new BrsType_1.BrsString(this.intrinsic.value.substr(startIndex.getValue(), numChars.getValue()));
            },
        });
        this.instr = new Callable_1.Callable("Instr", 
        /** Returns the zero-based index of the first occurrence of substring in the string. */
        {
            signature: {
                args: [new Callable_1.StdlibArgument("substring", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: (_interpreter, substring) => {
                return new Int32_1.Int32(this.intrinsic.value.indexOf(substring.value));
            },
        }, 
        /**
         * Returns the zero-based index of the first occurrence of substring in the string, starting
         * at the specified zero-based start_index.
         */
        {
            signature: {
                args: [
                    new Callable_1.StdlibArgument("start_index", BrsType_1.ValueKind.Int32),
                    new Callable_1.StdlibArgument("substring", BrsType_1.ValueKind.String),
                ],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: (_interpreter, startIndex, substring) => {
                return new Int32_1.Int32(this.intrinsic.value.indexOf(substring.value, startIndex.getValue()));
            },
        });
        /**
         * Returns a copy of the string with all instances of fromStr replaced with toStr. If fromStr is
         * empty the return value is the same as the source string.
         */
        this.replace = new Callable_1.Callable("Replace", {
            signature: {
                args: [
                    new Callable_1.StdlibArgument("from", BrsType_1.ValueKind.String),
                    new Callable_1.StdlibArgument("to", BrsType_1.ValueKind.String),
                ],
                returns: BrsType_1.ValueKind.String,
            },
            impl: (_interpreter, from, to) => {
                if (from.value === "") {
                    return this.intrinsic;
                }
                return new BrsType_1.BrsString(this.intrinsic.value.replace(new RegExp(from.value, "g"), to.value));
            },
        });
        /**
         * Returns the string with any leading and trailing whitespace characters (space, TAB, LF, CR,
         * VT, FF, NO-BREAK SPACE, et al) removed.
         */
        this.trim = new Callable_1.Callable("Trim", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(this.intrinsic.value.trim());
            },
        });
        /** Returns the value of the string interpreted as a decimal number. */
        this.toInt = new Callable_1.Callable("ToInt", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: _interpreter => {
                let int = Math.trunc(Number.parseFloat(this.intrinsic.value));
                if (Number.isNaN(int)) {
                    // non-integers are returned as "0"
                    return new Int32_1.Int32(0);
                }
                return new Int32_1.Int32(int);
            },
        });
        /** Returns the value of the string interpreted as a floating point number. */
        this.toFloat = new Callable_1.Callable("ToFloat", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Float,
            },
            impl: _interpreter => {
                let float = Number.parseFloat(this.intrinsic.value);
                if (Number.isNaN(float)) {
                    // non-integers are returned as "0"
                    return new Float_1.Float(0);
                }
                return new Float_1.Float(float);
            },
        });
        /**
         * Splits the string into separate substrings separated by a single delimiter character. Returns
         * an roList containing each of the substrings. The delimiters are not returned.
         */
        this.tokenize = new Callable_1.Callable("Tokenize", {
            signature: {
                args: [new Callable_1.StdlibArgument("delim", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Object,
            },
            impl: _interpreter => {
                _interpreter.stderr.write("WARNING: tokenize not yet implemented, because it returns an RoList.  Returning `invalid`.");
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        /**
         * Splits the input string using the separator string as a delimiter, and returns an array of
         * the split token strings (not including the delimiter). An empty separator string indicates
         * to split the string by character.
         */
        this.split = new Callable_1.Callable("Split", {
            signature: {
                args: [new Callable_1.StdlibArgument("separator", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Object,
            },
            impl: (_interpreter, separator) => {
                let parts;
                if (separator.value === "") {
                    // split characters apart, preserving multi-character unicode structures
                    parts = Array.from(this.intrinsic.value);
                }
                else {
                    parts = this.intrinsic.value.split(separator.value);
                }
                return new RoArray_1.RoArray(parts.map(part => new BrsType_1.BrsString(part)));
            },
        });
        /**
         * Returns the string with certain characters ("'<>&) replaced with the corresponding HTML
         * entity encoding.
         */
        this.getEntityEncode = new Callable_1.Callable("GetEntityEncode", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(this.intrinsic.value.replace(/(['"<>&])/g, "\\$1"));
            },
        });
        /** URL encodes the specified string per RFC 3986 and returns the encoded string. */
        this.escape = new Callable_1.Callable("Escape", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(
                // encoding courtesy of
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#Description
                encodeURIComponent(this.intrinsic.value).replace(/[!'()*]/g, c => "%" +
                    c
                        .charCodeAt(0)
                        .toString(16)
                        .toUpperCase()));
            },
        });
        /** URL decodes the specified string per RFC 3986 and returns the decoded string. */
        this.unescape = new Callable_1.Callable("Unescape", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(decodeURIComponent(this.intrinsic.value));
            },
        });
        /**
         * Encode the specified string with escape sequences for reserved Uniform Resource Identifier
         * (URI) characters.
         */
        this.encodeUri = new Callable_1.Callable("EncodeUri", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(encodeURI(this.intrinsic.value));
            },
        });
        /**
         * Decode the specified string with escape sequences for reserved Uniform Resource Identifier
         * (URI) characters.
         */
        this.decodeUri = new Callable_1.Callable("DecodeUri", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(decodeURI(this.intrinsic.value));
            },
        });
        /**
         * Encode the specified string with escape sequences for reserved Uniform Resource Identifier
         * (URI) component characters.
         */
        this.encodeUriComponent = new Callable_1.Callable("EncodeUriComponent", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(encodeURIComponent(this.intrinsic.value));
            },
        });
        this.decodeUriComponent = new Callable_1.Callable("DecodeUriCOmponent", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.String,
            },
            impl: _interpreter => {
                return new BrsType_1.BrsString(decodeURIComponent(this.intrinsic.value));
            },
        });
        this.intrinsic = initialValue;
        this.registerMethods([
            this.setString,
            this.appendString,
            this.len,
            this.left,
            this.right,
            this.mid,
            this.instr,
            this.replace,
            this.trim,
            this.toInt,
            this.toFloat,
            this.tokenize,
            this.split,
            this.getEntityEncode,
            this.escape,
            this.unescape,
            this.encodeUri,
            this.decodeUri,
            this.encodeUriComponent,
            this.decodeUriComponent,
        ]);
    }
    getValue() {
        return this.intrinsic.value;
    }
    equalTo(other) {
        if (other.kind === BrsType_1.ValueKind.String) {
            return BrsType_1.BrsBoolean.from(other.value === this.intrinsic.value);
        }
        if (other instanceof RoString) {
            return BrsType_1.BrsBoolean.from(other.intrinsic.value === this.intrinsic.value);
        }
        return BrsType_1.BrsBoolean.False;
    }
    lessThan(other) {
        if (other.kind === BrsType_1.ValueKind.String) {
            return this.unbox().lessThan(other);
        }
        if (other instanceof RoString) {
            return this.unbox().lessThan(other.unbox());
        }
        return BrsType_1.BrsBoolean.False;
    }
    greaterThan(other) {
        if (other.kind === BrsType_1.ValueKind.String) {
            return this.unbox().greaterThan(other);
        }
        if (other instanceof RoString) {
            return this.unbox().greaterThan(other.unbox());
        }
        return BrsType_1.BrsBoolean.False;
    }
    unbox() {
        return this.intrinsic;
    }
    toString(_parent) {
        return this.intrinsic.toString();
    }
}
exports.RoString = RoString;
//# sourceMappingURL=data:application/json;base64,