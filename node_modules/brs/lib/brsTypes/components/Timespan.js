"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const BrsType_1 = require("../BrsType");
const BrsComponent_1 = require("./BrsComponent");
const Callable_1 = require("../Callable");
const Int32_1 = require("../Int32");
const luxon = __importStar(require("luxon"));
class Timespan extends BrsComponent_1.BrsComponent {
    constructor() {
        super("roTimespan");
        this.kind = BrsType_1.ValueKind.Object;
        this.markTime = Date.now();
        /** Sets timespan object to the current time */
        this.mark = new Callable_1.Callable("mark", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Void,
            },
            impl: (_) => {
                this.resetTime();
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        /** Returns total milliseconds from the mark time to now */
        this.totalmilliseconds = new Callable_1.Callable("totalmilliseconds", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: (_) => {
                return new Int32_1.Int32(Date.now() - this.markTime);
            },
        });
        /** Returns total seconds from the mark time to now */
        this.totalseconds = new Callable_1.Callable("totalseconds", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: (_) => {
                return new Int32_1.Int32((Date.now() - this.markTime) / 1000);
            },
        });
        /** Parses an ISO8601 date and returns number of seconds from now until the given date.
         * If the date is not a valid ISO8601 date string and can't be parsed, the int 2077252342 is returned, consistent with the brightscript method.
         */
        this.getsecondstoiso8601date = new Callable_1.Callable("getsecondstoiso8601date", {
            signature: {
                args: [new Callable_1.StdlibArgument("date", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: (_, date) => {
                let dateAsSeconds;
                let now = Date.now();
                let dateToParse = luxon.DateTime.fromISO(date.value, { zone: "utc" });
                if (dateToParse.isValid) {
                    dateAsSeconds = (Date.parse(dateToParse.toISO()) - now) / 1000;
                }
                else {
                    dateAsSeconds = 2077252342;
                }
                return new Int32_1.Int32(dateAsSeconds);
            },
        });
        this.registerMethods([
            this.mark,
            this.totalmilliseconds,
            this.totalseconds,
            this.getsecondstoiso8601date,
        ]);
        this.resetTime();
    }
    resetTime() {
        this.markTime = Date.now();
    }
    toString(parent) {
        return "<Component: roTimespan>";
    }
    equalTo(other) {
        return BrsType_1.BrsBoolean.False;
    }
}
exports.Timespan = Timespan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGltZXNwYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnJzVHlwZXMvY29tcG9uZW50cy9UaW1lc3Bhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBb0Y7QUFDcEYsaURBQThDO0FBRTlDLDBDQUF1RDtBQUV2RCxvQ0FBaUM7QUFDakMsNkNBQStCO0FBRS9CLE1BQWEsUUFBUyxTQUFRLDJCQUFZO0lBSXRDO1FBQ0ksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBSmYsU0FBSSxHQUFHLG1CQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3pCLGFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUEwQjlCLCtDQUErQztRQUN2QyxTQUFJLEdBQUcsSUFBSSxtQkFBUSxDQUFDLE1BQU0sRUFBRTtZQUNoQyxTQUFTLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsT0FBTyxFQUFFLG1CQUFTLENBQUMsSUFBSTthQUMxQjtZQUNELElBQUksRUFBRSxDQUFDLENBQWMsRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQ2pCLE9BQU8sb0JBQVUsQ0FBQyxRQUFRLENBQUM7WUFDL0IsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUVILDJEQUEyRDtRQUNuRCxzQkFBaUIsR0FBRyxJQUFJLG1CQUFRLENBQUMsbUJBQW1CLEVBQUU7WUFDMUQsU0FBUyxFQUFFO2dCQUNQLElBQUksRUFBRSxFQUFFO2dCQUNSLE9BQU8sRUFBRSxtQkFBUyxDQUFDLEtBQUs7YUFDM0I7WUFDRCxJQUFJLEVBQUUsQ0FBQyxDQUFjLEVBQUUsRUFBRTtnQkFDckIsT0FBTyxJQUFJLGFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pELENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxzREFBc0Q7UUFDOUMsaUJBQVksR0FBRyxJQUFJLG1CQUFRLENBQUMsY0FBYyxFQUFFO1lBQ2hELFNBQVMsRUFBRTtnQkFDUCxJQUFJLEVBQUUsRUFBRTtnQkFDUixPQUFPLEVBQUUsbUJBQVMsQ0FBQyxLQUFLO2FBQzNCO1lBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBYyxFQUFFLEVBQUU7Z0JBQ3JCLE9BQU8sSUFBSSxhQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQzFELENBQUM7U0FDSixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNLLDRCQUF1QixHQUFHLElBQUksbUJBQVEsQ0FBQyx5QkFBeUIsRUFBRTtZQUN0RSxTQUFTLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLENBQUMsSUFBSSx5QkFBYyxDQUFDLE1BQU0sRUFBRSxtQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLEVBQUUsbUJBQVMsQ0FBQyxLQUFLO2FBQzNCO1lBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBYyxFQUFFLElBQWUsRUFBRSxFQUFFO2dCQUN0QyxJQUFJLGFBQWEsQ0FBQztnQkFDbEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNyQixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBRXRFLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRTtvQkFDckIsYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7aUJBQ2xFO3FCQUFNO29CQUNILGFBQWEsR0FBRyxVQUFVLENBQUM7aUJBQzlCO2dCQUVELE9BQU8sSUFBSSxhQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDcEMsQ0FBQztTQUNKLENBQUMsQ0FBQztRQTdFQyxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxJQUFJO1lBQ1QsSUFBSSxDQUFDLGlCQUFpQjtZQUN0QixJQUFJLENBQUMsWUFBWTtZQUNqQixJQUFJLENBQUMsdUJBQXVCO1NBQy9CLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxRQUFRLENBQUMsTUFBZ0I7UUFDckIsT0FBTyx5QkFBeUIsQ0FBQztJQUNyQyxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQWM7UUFDbEIsT0FBTyxvQkFBVSxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0NBMERKO0FBcEZELDRCQW9GQyJ9