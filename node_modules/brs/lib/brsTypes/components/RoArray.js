"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrsType_1 = require("../BrsType");
const BrsComponent_1 = require("./BrsComponent");
const Callable_1 = require("../Callable");
const Int32_1 = require("../Int32");
class RoArray extends BrsComponent_1.BrsComponent {
    constructor(elements) {
        super("roArray");
        this.kind = BrsType_1.ValueKind.Object;
        this.peek = new Callable_1.Callable("peek", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Dynamic,
            },
            impl: (interpreter) => {
                return this.elements[this.elements.length - 1] || BrsType_1.BrsInvalid.Instance;
            },
        });
        this.pop = new Callable_1.Callable("pop", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Dynamic,
            },
            impl: (interpreter) => {
                return this.elements.pop() || BrsType_1.BrsInvalid.Instance;
            },
        });
        this.push = new Callable_1.Callable("push", {
            signature: {
                args: [new Callable_1.StdlibArgument("talue", BrsType_1.ValueKind.Dynamic)],
                returns: BrsType_1.ValueKind.Void,
            },
            impl: (interpreter, tvalue) => {
                this.elements.push(tvalue);
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        this.shift = new Callable_1.Callable("shift", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Dynamic,
            },
            impl: (interpreter) => {
                return this.elements.shift() || BrsType_1.BrsInvalid.Instance;
            },
        });
        this.unshift = new Callable_1.Callable("unshift", {
            signature: {
                args: [new Callable_1.StdlibArgument("tvalue", BrsType_1.ValueKind.Dynamic)],
                returns: BrsType_1.ValueKind.Void,
            },
            impl: (interpreter, tvalue) => {
                this.elements.unshift(tvalue);
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        this.delete = new Callable_1.Callable("delete", {
            signature: {
                args: [new Callable_1.StdlibArgument("index", BrsType_1.ValueKind.Int32)],
                returns: BrsType_1.ValueKind.Boolean,
            },
            impl: (interpreter, index) => {
                if (index.lessThan(new Int32_1.Int32(0)).toBoolean()) {
                    return BrsType_1.BrsBoolean.False;
                }
                let deleted = this.elements.splice(index.getValue(), 1);
                return BrsType_1.BrsBoolean.from(deleted.length > 0);
            },
        });
        this.count = new Callable_1.Callable("count", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Int32,
            },
            impl: (interpreter) => {
                return new Int32_1.Int32(this.elements.length);
            },
        });
        this.clear = new Callable_1.Callable("clear", {
            signature: {
                args: [],
                returns: BrsType_1.ValueKind.Void,
            },
            impl: (interpreter) => {
                this.elements = [];
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        this.append = new Callable_1.Callable("append", {
            signature: {
                args: [new Callable_1.StdlibArgument("array", BrsType_1.ValueKind.Object)],
                returns: BrsType_1.ValueKind.Void,
            },
            impl: (interpreter, array) => {
                if (!(array instanceof RoArray)) {
                    // TODO: validate against RBI
                    return BrsType_1.BrsInvalid.Instance;
                }
                this.elements = [
                    ...this.elements,
                    ...array.elements.filter(element => !!element),
                ];
                return BrsType_1.BrsInvalid.Instance;
            },
        });
        this.elements = elements;
        this.registerMethods([
            this.peek,
            this.pop,
            this.push,
            this.shift,
            this.unshift,
            this.delete,
            this.count,
            this.clear,
            this.append,
        ]);
    }
    toString(parent) {
        if (parent) {
            return "<Component: roArray>";
        }
        return [
            "<Component: roArray> =",
            "[",
            ...this.elements.map((el) => `    ${el.toString(this)}`),
            "]",
        ].join("\n");
    }
    equalTo(other) {
        return BrsType_1.BrsBoolean.False;
    }
    getValue() {
        return this.elements;
    }
    getElements() {
        return this.elements.slice();
    }
    get(index) {
        switch (index.kind) {
            case BrsType_1.ValueKind.Int32:
                return this.getElements()[index.getValue()] || BrsType_1.BrsInvalid.Instance;
            case BrsType_1.ValueKind.String:
                return this.getMethod(index.value) || BrsType_1.BrsInvalid.Instance;
            default:
                throw new Error("Array indexes must be 32-bit integers, or method names must be strings");
        }
    }
    set(index, value) {
        if (index.kind !== BrsType_1.ValueKind.Int32) {
            throw new Error("Array indexes must be 32-bit integers");
        }
        this.elements[index.getValue()] = value;
        return BrsType_1.BrsInvalid.Instance;
    }
}
exports.RoArray = RoArray;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9BcnJheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9icnNUeXBlcy9jb21wb25lbnRzL1JvQXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBeUU7QUFFekUsaURBQTJEO0FBQzNELDBDQUF1RDtBQUV2RCxvQ0FBaUM7QUFFakMsTUFBYSxPQUFRLFNBQVEsMkJBQVk7SUFJckMsWUFBWSxRQUFtQjtRQUMzQixLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFKWixTQUFJLEdBQUcsbUJBQVMsQ0FBQyxNQUFNLENBQUM7UUFtRXpCLFNBQUksR0FBRyxJQUFJLG1CQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2hDLFNBQVMsRUFBRTtnQkFDUCxJQUFJLEVBQUUsRUFBRTtnQkFDUixPQUFPLEVBQUUsbUJBQVMsQ0FBQyxPQUFPO2FBQzdCO1lBQ0QsSUFBSSxFQUFFLENBQUMsV0FBd0IsRUFBRSxFQUFFO2dCQUMvQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksb0JBQVUsQ0FBQyxRQUFRLENBQUM7WUFDMUUsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUVLLFFBQUcsR0FBRyxJQUFJLG1CQUFRLENBQUMsS0FBSyxFQUFFO1lBQzlCLFNBQVMsRUFBRTtnQkFDUCxJQUFJLEVBQUUsRUFBRTtnQkFDUixPQUFPLEVBQUUsbUJBQVMsQ0FBQyxPQUFPO2FBQzdCO1lBQ0QsSUFBSSxFQUFFLENBQUMsV0FBd0IsRUFBRSxFQUFFO2dCQUMvQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksb0JBQVUsQ0FBQyxRQUFRLENBQUM7WUFDdEQsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUVLLFNBQUksR0FBRyxJQUFJLG1CQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2hDLFNBQVMsRUFBRTtnQkFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJ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