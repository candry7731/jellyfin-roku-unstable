"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrsType_1 = require("../BrsType");
const BrsComponent_1 = require("./BrsComponent");
const Callable_1 = require("../Callable");
const RoArray_1 = require("./RoArray");
class RoRegex extends BrsComponent_1.BrsComponent {
    constructor(expression, flags = new BrsType_1.BrsString("")) {
        super("roRegex");
        this.kind = BrsType_1.ValueKind.Object;
        this.supportedFlags = "ims";
        /** Returns whether the string matched the regex or not */
        this.isMatch = new Callable_1.Callable("ismatch", {
            signature: {
                args: [new Callable_1.StdlibArgument("str", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Boolean,
            },
            impl: (interpreter, str) => {
                return BrsType_1.BrsBoolean.from(this.jsRegex.test(str.value));
            },
        });
        /** Returns an array of matches */
        this.match = new Callable_1.Callable("match", {
            signature: {
                args: [new Callable_1.StdlibArgument("str", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Object,
            },
            impl: (interpreter, str) => {
                const result = this.jsRegex.exec(str.value);
                let arr = [];
                if (result !== null) {
                    arr = result.map(match => new BrsType_1.BrsString(match || ""));
                }
                return new RoArray_1.RoArray(arr);
            },
        });
        /** Returns a new string with first match replaced */
        this.replace = new Callable_1.Callable("replace", {
            signature: {
                args: [
                    new Callable_1.StdlibArgument("str", BrsType_1.ValueKind.String),
                    new Callable_1.StdlibArgument("replacement", BrsType_1.ValueKind.String),
                ],
                returns: BrsType_1.ValueKind.String,
            },
            impl: (interpreter, str, replacement) => {
                let replacementPattern = this.parseReplacementPattern(replacement.value);
                const newStr = this.jsRegex[Symbol.replace](str.value, replacementPattern);
                return new BrsType_1.BrsString(newStr);
            },
        });
        /** Returns a new string with all matches replaced */
        this.replaceAll = new Callable_1.Callable("replaceall", {
            signature: {
                args: [
                    new Callable_1.StdlibArgument("str", BrsType_1.ValueKind.String),
                    new Callable_1.StdlibArgument("replacement", BrsType_1.ValueKind.String),
                ],
                returns: BrsType_1.ValueKind.String,
            },
            impl: (interpreter, str, replacement) => {
                const source = this.jsRegex.source;
                const flags = this.jsRegex.flags + "g";
                this.jsRegex = new RegExp(source, flags);
                const newStr = this.jsRegex[Symbol.replace](str.value, replacement.value);
                return new BrsType_1.BrsString(newStr);
            },
        });
        /** Returns an array of strings split by match */
        this.split = new Callable_1.Callable("split", {
            signature: {
                args: [new Callable_1.StdlibArgument("str", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Object,
            },
            impl: (interpreter, str) => {
                let items = this.jsRegex[Symbol.split](str.value);
                let brsItems = items.map(item => new BrsType_1.BrsString(item));
                return new RoArray_1.RoArray(brsItems);
            },
        });
        /** Returns an array of array with all matches found */
        this.matchAll = new Callable_1.Callable("matchall", {
            signature: {
                args: [new Callable_1.StdlibArgument("str", BrsType_1.ValueKind.String)],
                returns: BrsType_1.ValueKind.Object,
            },
            impl: (interpreter, str) => {
                const source = this.jsRegex.source;
                const flags = this.jsRegex.flags + "g";
                this.jsRegex = new RegExp(source, flags);
                let arr = [];
                let matches;
                while ((matches = this.jsRegex.exec(str.value)) !== null) {
                    let item = new BrsType_1.BrsString(matches[0] || "");
                    arr.push(new RoArray_1.RoArray([item]));
                }
                return new RoArray_1.RoArray(arr);
            },
        });
        this.jsRegex = new RegExp(expression.value, this.parseFlags(flags.value));
        this.registerMethods([
            this.isMatch,
            this.match,
            this.replace,
            this.replaceAll,
            this.split,
            this.matchAll,
        ]);
    }
    toString(parent) {
        return "<Component: roRegex>";
    }
    equalTo(other) {
        return BrsType_1.BrsBoolean.False;
    }
    /**
     * Checks and parses the flags to avoid passing flags
     * that are not supported
     * @param inputFlags Flags passed to constructor
     * @returns parsed flags
     */
    parseFlags(inputFlags) {
        let parsedFlags = "";
        if (inputFlags.length === 0) {
            return parsedFlags;
        }
        for (const flag of inputFlags) {
            if (flag === "x") {
                console.warn("'x' flag is not implemented yet, ignoring flag.");
            }
            else if (!this.supportedFlags.includes(flag)) {
                throw new Error(`${flag} is not supported.`);
            }
            else {
                parsedFlags += flag;
            }
        }
        return parsedFlags;
    }
    /**
     * Transforms positional pattern replacements to javascript syntax
     * by replacing backslashes with dollar symbols
     * @param pattern Pattern to replace
     * @returns Replaced string
     */
    parseReplacementPattern(pattern) {
        return pattern.replace(/\\/g, "$");
    }
}
exports.RoRegex = RoRegex;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9SZWdleC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9icnNUeXBlcy9jb21wb25lbnRzL1JvUmVnZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBd0U7QUFDeEUsaURBQThDO0FBRTlDLDBDQUF1RDtBQUV2RCx1Q0FBb0M7QUFFcEMsTUFBYSxPQUFRLFNBQVEsMkJBQVk7SUFLckMsWUFBWSxVQUFxQixFQUFFLEtBQUssR0FBRyxJQUFJLG1CQUFTLENBQUMsRUFBRSxDQUFDO1FBQ3hELEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUxaLFNBQUksR0FBRyxtQkFBUyxDQUFDLE1BQU0sQ0FBQztRQUN4QixtQkFBYyxHQUFHLEtBQUssQ0FBQztRQTREaEMsMERBQTBEO1FBQ2xELFlBQU8sR0FBRyxJQUFJLG1CQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3RDLFNBQVMsRUFBRTtnQkFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsS0FBSyxFQUFFLG1CQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ25ELE9BQU8sRUFBRSxtQkFBUyxDQUFDLE9BQU87YUFDN0I7WUFDRCxJQUFJLEVBQUUsQ0FBQyxXQUF3QixFQUFFLEdBQWMsRUFBRSxFQUFFO2dCQUMvQyxPQUFPLG9CQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3pELENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxrQ0FBa0M7UUFDMUIsVUFBSyxHQUFHLElBQUksbUJBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDbEMsU0FBUyxFQUFFO2dCQUNQLElBQUksRUFBRSxDQUFDLElBQUkseUJBQWMsQ0FBQyxLQUFLLEVBQUUsbUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbkQsT0FBTyxFQUFFLG1CQUFTLENBQUMsTUFBTTthQUM1QjtZQUNELElB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