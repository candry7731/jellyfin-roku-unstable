"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrsType_1 = require("./BrsType");
const Float_1 = require("./Float");
const Double_1 = require("./Double");
const Int64_1 = require("./Int64");
class Int32 {
    /**
     * Creates a new BrightScript 32-bit integer value representing the provided `value`.
     * @param value the value to store in the BrightScript number, rounded to the nearest 32-bit
     *              integer.
     */
    constructor(initialValue) {
        this.kind = BrsType_1.ValueKind.Int32;
        this.value = Math.round(initialValue);
    }
    getValue() {
        return this.value;
    }
    /**
     * Creates a new BrightScript 32-bit integer value representing the integer contained in
     * `asString`.
     * @param asString the string representation of the value to store in the BrightScript 32-bit
     *                 int. Will be rounded to the nearest 32-bit integer.
     * @returns a BrightScript 32-bit integer value representing `asString`.
     */
    static fromString(asString) {
        if (asString.toLowerCase().startsWith("&h")) {
            asString = asString.slice(2); // remove "&h" from the string representation
            return new Int32(Number.parseInt(asString, 16));
        }
        return new Int32(Number.parseFloat(asString));
    }
    add(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Int32(this.getValue() + rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(rhs.getValue().add(this.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue() + rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() + rhs.getValue());
        }
    }
    subtract(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Int32(this.getValue() - rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).subtract(rhs);
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue() - rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() - rhs.getValue());
        }
    }
    multiply(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Int32(this.getValue() * rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(rhs.getValue().multiply(this.getValue()));
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue() * rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() * rhs.getValue());
        }
    }
    divide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Float_1.Float(this.getValue() / rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Float_1.Float(this.getValue() / rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue() / rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() / rhs.getValue());
        }
    }
    modulo(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Int32(this.getValue() % rhs.getValue());
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue() % rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue() % rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).modulo(rhs);
        }
    }
    intDivide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                // TODO: Is 32-bit precision enough here?
                return new Int32(Math.trunc(this.getValue() / rhs.getValue()));
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(Math.trunc(this.getValue() / rhs.getValue().toNumber()));
        }
    }
    pow(exponent) {
        switch (exponent.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Float_1.Float(Math.pow(this.getValue(), exponent.getValue()));
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).pow(exponent);
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(Math.pow(this.getValue(), exponent.getValue()));
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(Math.pow(this.getValue(), exponent.getValue()));
        }
    }
    and(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Int32(this.getValue() & rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).and(rhs);
            case BrsType_1.ValueKind.Float:
                return new Int32(this.getValue() & rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Int32(this.getValue() & rhs.getValue());
        }
    }
    or(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Int32(this.getValue() | rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).or(rhs);
            case BrsType_1.ValueKind.Float:
                return new Int32(this.getValue() | rhs.getValue());
            case BrsType_1.ValueKind.Double:
                return new Int32(this.getValue() | rhs.getValue());
        }
    }
    lessThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int32:
                return BrsType_1.BrsBoolean.from(this.getValue() < other.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).lessThan(other);
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue()).lessThan(other);
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue()).lessThan(other);
            default:
                return BrsType_1.BrsBoolean.False;
        }
    }
    greaterThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int32:
                return BrsType_1.BrsBoolean.from(this.getValue() > other.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).greaterThan(other);
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue()).greaterThan(other);
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue()).greaterThan(other);
            default:
                return BrsType_1.BrsBoolean.False;
        }
    }
    equalTo(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int32:
                return BrsType_1.BrsBoolean.from(this.getValue() === other.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).equalTo(other);
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(this.getValue()).equalTo(other);
            case BrsType_1.ValueKind.Double:
                return new Double_1.Double(this.getValue()).equalTo(other);
            default:
                return BrsType_1.BrsBoolean.False;
        }
    }
    toString(parent) {
        return this.value.toString();
    }
}
exports.Int32 = Int32;
//# sourceMappingURL=data:application/json;base64,