"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const BrsType_1 = require("./BrsType");
const Int32_1 = require("./Int32");
const Int64_1 = require("./Int64");
const Float_1 = require("./Float");
class Double {
    /**
     * Creates a new BrightScript double-precision value representing the provided `value`.
     * @param value the value to store in the BrightScript double, rounded to 64-bit (double)
     *              precision.
     */
    constructor(value) {
        this.kind = BrsType_1.ValueKind.Double;
        this.value = value;
    }
    getValue() {
        return this.value;
    }
    /**
     * Creates a new BrightScript double-precision value representing the floating point value
     * contained in `asString`.
     * @param asString the string representation of the value to store in the BrightScript double.
     *                 Will be rounded to 64-bit (double) precision.
     * @returns a BrightScript double value representing `asString`.
     */
    static fromString(asString) {
        return new Double(Number.parseFloat(asString));
    }
    add(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (double) + (int64) -> (double)
                return new Double(this.getValue() + rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Double(this.getValue() + rhs.getValue());
        }
    }
    subtract(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (double) - (int64) -> (double)
                return new Double(this.getValue() - rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Double(this.getValue() - rhs.getValue());
        }
    }
    multiply(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (double) - (int64) -> (double)
                return new Double(this.getValue() * rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Double(this.getValue() * rhs.getValue());
        }
    }
    divide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                // TODO: Confirm that (double) - (int64) -> (double)
                return new Double(this.getValue() / rhs.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Double(this.getValue() / rhs.getValue());
        }
    }
    modulo(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Double(this.getValue() % rhs.getValue());
            case BrsType_1.ValueKind.Int64:
                return new Double(this.getValue() % rhs.getValue().toNumber());
        }
    }
    intDivide(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(Math.trunc(this.getValue() / rhs.getValue().toNumber()));
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int32_1.Int32(Math.trunc(this.getValue() / rhs.getValue()));
        }
    }
    pow(exponent) {
        switch (exponent.kind) {
            case BrsType_1.ValueKind.Int32:
                return new Float_1.Float(Math.pow(this.getValue(), exponent.getValue()));
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).pow(exponent);
            case BrsType_1.ValueKind.Float:
                return new Float_1.Float(Math.pow(this.getValue(), exponent.getValue()));
            case BrsType_1.ValueKind.Double:
                return new Double(Math.pow(this.getValue(), exponent.getValue()));
        }
    }
    and(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).and(rhs);
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int32_1.Int32(this.getValue() & rhs.getValue());
        }
    }
    or(rhs) {
        switch (rhs.kind) {
            case BrsType_1.ValueKind.Int64:
                return new Int64_1.Int64(this.getValue()).or(rhs);
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return new Int32_1.Int32(this.getValue() | rhs.getValue());
        }
    }
    lessThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue() < other.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return _1.BrsBoolean.from(this.getValue() < other.getValue());
            default:
                return _1.BrsBoolean.False;
        }
    }
    greaterThan(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue() > other.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return _1.BrsBoolean.from(this.getValue() > other.getValue());
            default:
                return _1.BrsBoolean.False;
        }
    }
    equalTo(other) {
        switch (other.kind) {
            case BrsType_1.ValueKind.Int64:
                return _1.BrsBoolean.from(this.getValue() === other.getValue().toNumber());
            case BrsType_1.ValueKind.Int32:
            case BrsType_1.ValueKind.Float:
            case BrsType_1.ValueKind.Double:
                return _1.BrsBoolean.from(this.getValue() === other.getValue());
            default:
                return _1.BrsBoolean.False;
        }
    }
    toString(parent) {
        return this.value.toString();
    }
}
exports.Double = Double;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG91YmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jyc1R5cGVzL0RvdWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF5QztBQUN6Qyx1Q0FBa0Q7QUFFbEQsbUNBQWdDO0FBQ2hDLG1DQUFnQztBQUNoQyxtQ0FBZ0M7QUFFaEMsTUFBYSxNQUFNO0lBUWY7Ozs7T0FJRztJQUNILFlBQVksS0FBYTtRQVpoQixTQUFJLEdBQUcsbUJBQVMsQ0FBQyxNQUFNLENBQUM7UUFhN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQVhELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQVdEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBZ0I7UUFDOUIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFjO1FBQ2QsUUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFO1lBQ2QsS0FBSyxtQkFBUyxDQUFDLEtBQUs7Z0JBQ2hCLG9EQUFvRDtnQkFDcEQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDbkUsS0FBSyxtQkFBUyxDQUFDLEtBQUssQ0FBQztZQUNyQixLQUFLLG1CQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3JCLEtBQUssbUJBQVMsQ0FBQyxNQUFNO2dCQUNqQixPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7SUFFRCxRQUFRLENBQUMsR0FBYztRQUNuQixRQUFRLEdBQUcsQ0FBQyxJ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