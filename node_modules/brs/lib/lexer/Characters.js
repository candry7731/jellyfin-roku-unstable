"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Determines whether or not a single-character string is a base-10 digit.
 *
 * @param char a single-character string that might contain a base-10 digit.
 * @returns `true` if `char` is between 0 and 9 (inclusive), otherwise `false`.
 */
function isDecimalDigit(char) {
    if (char.length > 1) {
        throw new Error(`Lexer#isDecimalDigit expects a single character; received '${char}'`);
    }
    return char >= "0" && char <= "9";
}
exports.isDecimalDigit = isDecimalDigit;
/**
 * Determines whether or not a single-character string is a base-16 digit.
 *
 * @param char a single-character string that might contain a base-16 digit.
 * @returns `true` if `char` matches `/[a-fA-F0-9]/` otherwise `false`.
 */
function isHexDigit(char) {
    if (char.length > 1) {
        throw new Error(`Lexer#isHexDigit expects a single character; received '${char}'`);
    }
    let c = char.toLowerCase();
    return isDecimalDigit(c) || (c >= "a" && c <= "f");
}
exports.isHexDigit = isHexDigit;
/**
 * Determines whether a single-character string is alphabetic (or `_`).
 *
 * @param char a single-character string that might contain an alphabetic character.
 * @returns `true` if `char` is between "a" and "z" or "A" and "Z" (inclusive), or is `_`,
 *          otherwise false.
 */
function isAlpha(char) {
    if (char.length > 1) {
        throw new Error(`Lexer#isAlpha expects a single character; received '${char}'`);
    }
    let c = char.toLowerCase();
    return (c >= "a" && c <= "z") || c === "_";
}
exports.isAlpha = isAlpha;
/**
 * Determines whether a single-character string is alphanumeric (or `_`).
 *
 * @param char a single-character string that might contain an alphabetic or numeric character.
 * @returns `true` if `char` is alphabetic, numeric, or `_`, otherwise `false`.
 */
function isAlphaNumeric(char) {
    if (char.length > 1) {
        throw new Error(`Lexer#isAlphaNumeric expects a single character; received '${char}'`);
    }
    return isAlpha(char) || isDecimalDigit(char);
}
exports.isAlphaNumeric = isAlphaNumeric;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sZXhlci9DaGFyYWN0ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7O0dBS0c7QUFDSCxTQUFnQixjQUFjLENBQUMsSUFBWTtJQUN2QyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELElBQUksR0FBRyxDQUFDLENBQUM7S0FDMUY7SUFFRCxPQUFPLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQztBQUN0QyxDQUFDO0FBTkQsd0NBTUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLFVBQVUsQ0FBQyxJQUFZO0lBQ25DLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQywwREFBMEQsSUFBSSxHQUFHLENBQUMsQ0FBQztLQUN0RjtJQUVELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFQRCxnQ0FPQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLE9BQU8sQ0FBQyxJQUFZO0lBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsSUFBSSxHQUFHLENBQUMsQ0FBQztLQUNuRjtJQUVELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixPQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQztBQUMvQyxDQUFDO0FBUEQsMEJBT0M7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLGNBQWMsQ0FBQyxJQUFZO0lBQ3ZDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsSUFBSSxHQUFHLENBQUMsQ0FBQztLQUMxRjtJQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBTkQsd0NBTUMifQ==