"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Lexeme_1 = require("./Lexeme");
const ReservedWords_1 = require("./ReservedWords");
const Error_1 = require("../Error");
const Characters_1 = require("./Characters");
const brsTypes_1 = require("../brsTypes");
class Lexer {
    constructor() {
        /** Allows consumers to observe errors as they're detected. */
        this.events = new events_1.EventEmitter();
    }
    /**
     * A convenience function, equivalent to `new Lexer().scan(toScan)`, that converts a string
     * containing BrightScript code to an array of `Token` objects that will later be used to build
     * an abstract syntax tree.
     *
     * @param toScan the BrightScript code to convert into tokens
     * @param filename the name of the file to be scanned
     * @returns an object containing an array of `errors` and an array of `tokens` to be passed to a parser.
     */
    static scan(toScan, filename = "") {
        return new Lexer().scan(toScan, filename);
    }
    /**
     * Convenience function to subscribe to the `err` events emitted by `lexer.events`.
     * @param errorHandler the function to call for every Lexer error emitted after subscribing
     * @returns an object with a `dispose` function, used to unsubscribe from errors
     */
    onError(errorHandler) {
        this.events.on("err", errorHandler);
        return {
            dispose: () => {
                this.events.removeListener("err", errorHandler);
            },
        };
    }
    /**
     * Convenience function to subscribe to a single `err` event emitted by `lexer.events`.
     * @param errorHandler the function to call for the first Lexer error emitted after subscribing
     */
    onErrorOnce(errorHandler) {
        this.events.once("err", errorHandler);
    }
    /**
     * Converts a string containing BrightScript code to an array of `Token` objects that will
     * later be used to build an abstract syntax tree.
     *
     * @param toScan the BrightScript code to convert into tokens
     * @param filename the name of the file to be scanned
     * @returns an object containing an array of `errors` and an array of `tokens` to be passed to a parser.
     */
    scan(toScan, filename) {
        /** The zero-indexed position at which the token under consideration begins. */
        let start = 0;
        /** The zero-indexed position being examined for the token under consideration. */
        let current = 0;
        /** The one-indexed line number being parsed. */
        let line = 1;
        /** The zero-indexed column number being parsed. */
        let column = 0;
        /** The BrightScript code being converted to an array of `Token`s. */
        let source = toScan;
        /** The tokens produced from `source`. */
        let tokens = [];
        /** The errors produced from `source.` */
        let errors = [];
        const addError = (err) => {
            errors.push(err);
            this.events.emit("err", err);
        };
        while (!isAtEnd()) {
            start = current;
            scanToken();
        }
        tokens.push({
            kind: Lexeme_1.Lexeme.Eof,
            isReserved: false,
            text: "\0",
            location: {
                start: {
                    line: line,
                    column: column,
                },
                end: {
                    line: line,
                    column: column + 1,
                },
                file: filename,
            },
        });
        return { tokens, errors };
        /**
         * Determines whether or not the lexer as reached the end of its input.
         * @returns `true` if the lexer has read to (or past) the end of its input, otherwise `false`.
         */
        function isAtEnd() {
            return current >= source.length;
        }
        /**
         * Reads a non-deterministic number of characters from `source`, produces a `Token`, and adds it to
         * the `tokens` array.
         *
         * Accepts and returns nothing, because it's side-effect driven.
         */
        function scanToken() {
            let c = advance();
            switch (c.toLowerCase()) {
                case "(":
                    addToken(Lexeme_1.Lexeme.LeftParen);
                    break;
                case ")":
                    addToken(Lexeme_1.Lexeme.RightParen);
                    break;
                case "{":
                    addToken(Lexeme_1.Lexeme.LeftBrace);
                    break;
                case "}":
                    addToken(Lexeme_1.Lexeme.RightBrace);
                    break;
                case "[":
                    addToken(Lexeme_1.Lexeme.LeftSquare);
                    break;
                case "]":
                    addToken(Lexeme_1.Lexeme.RightSquare);
                    break;
                case ",":
                    addToken(Lexeme_1.Lexeme.Comma);
                    break;
                case ".":
                    // this might be a float/double literal, because decimals without a leading 0
                    // are allowed
                    if (Characters_1.isDecimalDigit(peek())) {
                        decimalNumber(true);
                    }
                    else {
                        addToken(Lexeme_1.Lexeme.Dot);
                    }
                    break;
                case "+":
                    switch (peek()) {
                        case "=":
                            advance();
                            addToken(Lexeme_1.Lexeme.PlusEqual);
                            break;
                        case "+":
                            advance();
                            addToken(Lexeme_1.Lexeme.PlusPlus);
                            break;
                        default:
                            addToken(Lexeme_1.Lexeme.Plus);
                            break;
                    }
                    break;
                case "-":
                    switch (peek()) {
                        case "=":
                            advance();
                            addToken(Lexeme_1.Lexeme.MinusEqual);
                            break;
                        case "-":
                            advance();
                            addToken(Lexeme_1.Lexeme.MinusMinus);
                            break;
                        default:
                            addToken(Lexeme_1.Lexeme.Minus);
                            break;
                    }
                    break;
                case "*":
                    switch (peek()) {
                        case "=":
                            advance();
                            addToken(Lexeme_1.Lexeme.StarEqual);
                            break;
                        default:
                            addToken(Lexeme_1.Lexeme.Star);
                            break;
                    }
                    break;
                case "/":
                    switch (peek()) {
                        case "=":
                            advance();
                            addToken(Lexeme_1.Lexeme.SlashEqual);
                            break;
                        default:
                            addToken(Lexeme_1.Lexeme.Slash);
                            break;
                    }
                    break;
                case "^":
                    addToken(Lexeme_1.Lexeme.Caret);
                    break;
                case "\\":
                    switch (peek()) {
                        case "=":
                            advance();
                            addToken(Lexeme_1.Lexeme.BackslashEqual);
                            break;
                        default:
                            addToken(Lexeme_1.Lexeme.Backslash);
                            break;
                    }
                    break;
                case "=":
                    addToken(Lexeme_1.Lexeme.Equal);
                    break;
                case ":":
                    addToken(Lexeme_1.Lexeme.Colon);
                    break;
                case ";":
                    addToken(Lexeme_1.Lexeme.Semicolon);
                    break;
                case "?":
                    addToken(Lexeme_1.Lexeme.Print);
                    break;
                case "<":
                    switch (peek()) {
                        case "=":
                            advance();
                            addToken(Lexeme_1.Lexeme.LessEqual);
                            break;
                        case "<":
                            advance();
                            switch (peek()) {
                                case "=":
                                    advance();
                                    addToken(Lexeme_1.Lexeme.LeftShiftEqual);
                                    break;
                                default:
                                    addToken(Lexeme_1.Lexeme.LeftShift);
                                    break;
                            }
                            break;
                        case ">":
                            advance();
                            addToken(Lexeme_1.Lexeme.LessGreater);
                            break;
                        default:
                            addToken(Lexeme_1.Lexeme.Less);
                            break;
                    }
                    break;
                case ">":
                    switch (peek()) {
                        case "=":
                            advance();
                            addToken(Lexeme_1.Lexeme.GreaterEqual);
                            break;
                        case ">":
                            advance();
                            switch (peek()) {
                                case "=":
                                    advance();
                                    addToken(Lexeme_1.Lexeme.RightShiftEqual);
                                    break;
                                default:
                                    addToken(Lexeme_1.Lexeme.RightShift);
                                    break;
                            }
                            break;
                        default:
                            addToken(Lexeme_1.Lexeme.Greater);
                            break;
                    }
                    break;
                case "'":
                    // BrightScript doesn't have block comments; only line
                    while (peek() !== "\n" && !isAtEnd()) {
                        advance();
                    }
                    break;
                case " ":
                case "\r":
                case "\t":
                    // ignore whitespace; indentation isn't signficant in BrightScript
                    break;
                case "\n":
                    // consecutive newlines aren't significant, because they're just blank lines
                    // so only add blank lines when they're not consecutive
                    let previous = lastToken();
                    if (previous && previous.kind !== Lexeme_1.Lexeme.Newline) {
                        addToken(Lexeme_1.Lexeme.Newline);
                    }
                    // but always advance the line counter
                    line++;
                    // and always reset the column counter
                    column = 0;
                    break;
                case '"':
                    string();
                    break;
                case "#":
                    preProcessedConditional();
                    break;
                default:
                    if (Characters_1.isDecimalDigit(c)) {
                        decimalNumber(false);
                    }
                    else if (c === "&" && peek().toLowerCase() === "h") {
                        advance(); // move past 'h'
                        hexadecimalNumber();
                    }
                    else if (Characters_1.isAlpha(c)) {
                        identifier();
                    }
                    else {
                        addError(new Error_1.BrsError(`Unexpected character '${c}'`, locationOf(c)));
                    }
                    break;
            }
        }
        /**
         * Reads and returns the next character from `string` while **moving the current position forward**.
         * @returns the new "current" character.
         */
        function advance() {
            current++;
            column++;
            return source.charAt(current - 1);
        }
        /**
         * Determines whether the "current" character matches an `expected` character and advances the
         * "current" character if it does.
         *
         * @param expected a single-character string to test for.
         * @returns `true` if `expected` is strictly equal to the current character, otherwise `false`
         *          (including if we've reached the end of the input).
         */
        function match(expected) {
            if (expected.length > 1) {
                throw new Error(`Lexer#match expects a single character; received '${expected}'`);
            }
            if (isAtEnd()) {
                return false;
            }
            if (source.charAt(current) !== expected) {
                return false;
            }
            current++;
            return true;
        }
        /**
         * Returns the character at position `current` or a null character if we've reached the end of
         * input.
         *
         * @returns the current character if we haven't reached the end of input, otherwise a null
         *          character.
         */
        function peek() {
            if (isAtEnd()) {
                return "\0";
            }
            return source.charAt(current);
        }
        /**
         * Returns the character after position `current`, or a null character if we've reached the end of
         * input.
         *
         * @returns the character after the current one if we haven't reached the end of input, otherwise a
         *          null character.
         */
        function peekNext() {
            if (current + 1 > source.length) {
                return "\0";
            }
            return source.charAt(current + 1);
        }
        /**
         * Reads characters within a string literal, advancing through escaped characters to the
         * terminating `"`, and adds the produced token to the `tokens` array. Creates a `BrsError` if the
         * string is terminated by a newline or the end of input.
         */
        function string() {
            while (!isAtEnd()) {
                if (peek() === '"') {
                    if (peekNext() === '"') {
                        // skip over two consecutive `"` characters to handle escaped `"` literals
                        advance();
                    }
                    else {
                        // otherwise the string has ended
                        break;
                    }
                }
                if (peekNext() === "\n") {
                    // BrightScript doesn't support multi-line strings
                    addError(new Error_1.BrsError("Unterminated string at end of line", locationOf(source.slice(start, current))));
                    return;
                }
                advance();
            }
            if (isAtEnd()) {
                // terminating a string with EOF is also not allowed
                addError(new Error_1.BrsError("Unterminated string at end of file", locationOf(source.slice(start, current))));
                return;
            }
            // move past the closing `"`
            advance();
            // trim the surrounding quotes, and replace the double-" literal with a single
            let value = source.slice(start + 1, current - 1).replace(/""/g, '"');
            addToken(Lexeme_1.Lexeme.String, new brsTypes_1.BrsString(value));
        }
        /**
         * Reads characters within a base-10 number literal, advancing through fractional and
         * exponential portions as well as trailing type identifiers, and adds the produced token
         * to the `tokens` array. Also responsible for BrightScript's integer literal vs. float
         * literal rules.
         * @param hasSeenDecimal `true` if decimal point has already been found, otherwise `false`
         *
         * @see https://sdkdocs.roku.com/display/sdkdoc/Expressions%2C+Variables%2C+and+Types#Expressions,Variables,andTypes-NumericLiterals
         */
        function decimalNumber(hasSeenDecimal) {
            let containsDecimal = hasSeenDecimal;
            while (Characters_1.isDecimalDigit(peek())) {
                advance();
            }
            // look for a fractional portion
            if (!hasSeenDecimal && peek() === ".") {
                containsDecimal = true;
                // consume the "." parse the fractional part
                advance();
                // read the remaining digits
                while (Characters_1.isDecimalDigit(peek())) {
                    advance();
                }
            }
            let asString = source.slice(start, current);
            let numberOfDigits = containsDecimal ? asString.length - 1 : asString.length;
            let designator = peek().toLowerCase();
            if (numberOfDigits >= 10 && designator !== "&") {
                // numeric literals over 10 digits with no type designator are implicitly Doubles
                addToken(Lexeme_1.Lexeme.Double, brsTypes_1.Double.fromString(asString));
                return;
            }
            else if (designator === "#") {
                // numeric literals ending with "#" are forced to Doubles
                advance();
                asString = source.slice(start, current);
                addToken(Lexeme_1.Lexeme.Double, brsTypes_1.Double.fromString(asString));
                return;
            }
            else if (designator === "d") {
                // literals that use "D" as the exponent are also automatic Doubles
                // consume the "D"
                advance();
                // exponents are optionally signed
                if (peek() === "+" || peek() === "-") {
                    advance();
                }
                // consume the exponent
                while (Characters_1.isDecimalDigit(peek())) {
                    advance();
                }
                // replace the exponential marker with a JavaScript-friendly "e"
                asString = source.slice(start, current).replace(/[dD]/, "e");
                addToken(Lexeme_1.Lexeme.Double, brsTypes_1.Double.fromString(asString));
                return;
            }
            if (designator === "!") {
                // numeric literals ending with "!" are forced to Floats
                advance();
                asString = source.slice(start, current);
                addToken(Lexeme_1.Lexeme.Float, brsTypes_1.Float.fromString(asString));
                return;
            }
            else if (designator === "e") {
                // literals that use "E" as the exponent are also automatic Floats
                // consume the "E"
                advance();
                // exponents are optionally signed
                if (peek() === "+" || peek() === "-") {
                    advance();
                }
                // consume the exponent
                while (Characters_1.isDecimalDigit(peek())) {
                    advance();
                }
                asString = source.slice(start, current);
                addToken(Lexeme_1.Lexeme.Float, brsTypes_1.Float.fromString(asString));
                return;
            }
            else if (containsDecimal) {
                // anything with a decimal but without matching Double rules is a Float
                addToken(Lexeme_1.Lexeme.Float, brsTypes_1.Float.fromString(asString));
                return;
            }
            if (designator === "&") {
                // numeric literals ending with "&" are forced to LongIntegers
                asString = source.slice(start, current);
                advance();
                addToken(Lexeme_1.Lexeme.LongInteger, brsTypes_1.Int64.fromString(asString));
                return;
            }
            else {
                // otherwise, it's a regular integer
                addToken(Lexeme_1.Lexeme.Integer, brsTypes_1.Int32.fromString(asString));
                return;
            }
        }
        /**
         * Reads characters within a base-16 number literal, advancing through trailing type
         * identifiers, and adds the produced token to the `tokens` array. Also responsible for
         * BrightScript's integer literal vs. long-integer literal rules _for hex literals only_.
         *
         * @see https://sdkdocs.roku.com/display/sdkdoc/Expressions%2C+Variables%2C+and+Types#Expressions,Variables,andTypes-NumericLiterals
         */
        function hexadecimalNumber() {
            while (Characters_1.isHexDigit(peek())) {
                advance();
            }
            // fractional hex literals aren't valid
            if (peek() === "." && Characters_1.isHexDigit(peekNext())) {
                advance(); // consume the "."
                addError(new Error_1.BrsError("Fractional hex literals are not supported", locationOf(source.slice(start, current))));
                return;
            }
            if (peek() === "&") {
                // literals ending with "&" are forced to LongIntegers
                advance();
                let asString = source.slice(start, current);
                addToken(Lexeme_1.Lexeme.LongInteger, brsTypes_1.Int64.fromString(asString));
            }
            else {
                let asString = source.slice(start, current);
                addToken(Lexeme_1.Lexeme.Integer, brsTypes_1.Int32.fromString(asString));
            }
        }
        /**
         * Reads characters within an identifier, advancing through alphanumeric characters. Adds the
         * produced token to the `tokens` array.
         */
        function identifier() {
            while (Characters_1.isAlphaNumeric(peek())) {
                advance();
            }
            let text = source.slice(start, current).toLowerCase();
            // some identifiers can be split into two words, so check the "next" word and see what we get
            if ((text === "end" || text === "else" || text === "exit" || text === "for") &&
                (peek() === " " || peek() === "\t")) {
                let endOfFirstWord = {
                    position: current,
                    column: column,
                };
                // skip past any whitespace
                let whitespace = "";
                while (peek() === " " || peek() === "\t") {
                    //keep the whitespace so we can replace it later
                    whitespace += peek();
                    advance();
                }
                while (Characters_1.isAlphaNumeric(peek())) {
                    advance();
                } // read the next word
                let twoWords = source.slice(start, current);
                //replace all of the whitespace with a single space character so we can properly match keyword token types
                twoWords = twoWords.replace(whitespace, " ");
                let maybeTokenType = ReservedWords_1.KeyWords[twoWords.toLowerCase()];
                if (maybeTokenType) {
                    addToken(maybeTokenType);
                    return;
                }
                else {
                    // reset if the last word and the current word didn't form a multi-word Lexeme
                    current = endOfFirstWord.position;
                    column = endOfFirstWord.column;
                }
            }
            // look for a type designator character ($ % ! # &). vars may have them, but functions
            // may not. Let the parser figure that part out.
            let nextChar = peek();
            if (["$", "%", "!", "#", "&"].includes(nextChar)) {
                text += nextChar;
                advance();
            }
            let tokenType = ReservedWords_1.KeyWords[text.toLowerCase()] || Lexeme_1.Lexeme.Identifier;
            if (tokenType === ReservedWords_1.KeyWords.rem) {
                // The 'rem' keyword can be used to indicate comments as well, so
                // consume the rest of the line, but don't add the token; it's not
                // particularly useful.
                while (peek() !== "\n" && !isAtEnd()) {
                    advance();
                }
            }
            else {
                addToken(tokenType);
            }
        }
        /**
         * Reads characters within an identifier with a leading '#', typically reserved for conditional
         * compilation. Adds the produced token to the `tokens` array.
         */
        function preProcessedConditional() {
            advance(); // advance past the leading #
            while (Characters_1.isAlphaNumeric(peek())) {
                advance();
            }
            let text = source.slice(start, current).toLowerCase();
            // some identifiers can be split into two words, so check the "next" word and see what we get
            if ((text === "#end" || text === "#else") && peek() === " ") {
                let endOfFirstWord = current;
                advance(); // skip past the space
                while (Characters_1.isAlphaNumeric(peek())) {
                    advance();
                } // read the next word
                let twoWords = source.slice(start, current);
                switch (twoWords.replace(/ {2,}/g, " ")) {
                    case "#else if":
                        addToken(Lexeme_1.Lexeme.HashElseIf);
                        return;
                    case "#end if":
                        addToken(Lexeme_1.Lexeme.HashEndIf);
                        return;
                }
                // reset if the last word and the current word didn't form a multi-word Lexeme
                current = endOfFirstWord;
            }
            switch (text) {
                case "#if":
                    addToken(Lexeme_1.Lexeme.HashIf);
                    return;
                case "#else":
                    addToken(Lexeme_1.Lexeme.HashElse);
                    return;
                case "#elseif":
                    addToken(Lexeme_1.Lexeme.HashElseIf);
                    return;
                case "#endif":
                    addToken(Lexeme_1.Lexeme.HashEndIf);
                    return;
                case "#const":
                    addToken(Lexeme_1.Lexeme.HashConst);
                    return;
                case "#error":
                    addToken(Lexeme_1.Lexeme.HashError);
                    // #error must be followed by a message; scan it separately to preserve whitespace
                    start = current;
                    while (!isAtEnd() && peek() !== "\n") {
                        advance();
                    }
                    // grab all text since we found #error as one token
                    addToken(Lexeme_1.Lexeme.HashErrorMessage);
                    // consume the trailing newline here; it's not semantically significant
                    match("\n");
                    start = current;
                    return;
                default:
                    addError(new Error_1.BrsError(`Found unexpected conditional-compilation string '${text}'`, locationOf(source.slice(start, current))));
            }
        }
        /**
         * Retrieves the token that was most recently added.
         * @returns the most recently added token.
         */
        function lastToken() {
            return tokens[tokens.length - 1];
        }
        /**
         * Creates a `Token` and adds it to the `tokens` array.
         * @param kind the type of token to produce.
         * @param literal an optional literal value to include in the token.
         */
        function addToken(kind, literal) {
            let withWhitespace = source.slice(start, current);
            let text = withWhitespace.trimLeft() || withWhitespace;
            tokens.push({
                kind: kind,
                text: text,
                isReserved: ReservedWords_1.ReservedWords.has(text.toLowerCase()),
                literal: literal,
                location: locationOf(text),
            });
        }
        /**
         * Creates a `TokenLocation` at the lexer's current position for the provided `text`.
         * @param text the text to create a location for
         * @returns the location of `text` as a `TokenLocation`
         */
        function locationOf(text) {
            return {
                start: {
                    line: line,
                    column: column - text.length,
                },
                end: {
                    line: line,
                    column: Math.max(column - text.length + 1, column),
                },
                file: filename,
            };
        }
    }
}
exports.Lexer = Lexer;
//# sourceMappingURL=data:application/json;base64,