"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Lexeme;
(function (Lexeme) {
    // parens (and friends)
    Lexeme["LeftParen"] = "LeftParen";
    Lexeme["RightParen"] = "RightParen";
    Lexeme["LeftSquare"] = "LeftSquare";
    Lexeme["RightSquare"] = "RightSquare";
    Lexeme["LeftBrace"] = "LeftBrace";
    Lexeme["RightBrace"] = "RightBrace";
    // operators
    Lexeme["Caret"] = "Caret";
    Lexeme["Minus"] = "Minus";
    Lexeme["Plus"] = "Plus";
    Lexeme["Star"] = "Star";
    Lexeme["Slash"] = "Slash";
    Lexeme["Mod"] = "Mod";
    Lexeme["Backslash"] = "Backslash";
    // postfix operators
    Lexeme["PlusPlus"] = "PlusPlus";
    Lexeme["MinusMinus"] = "MinusMinus";
    // bitshift
    Lexeme["LeftShift"] = "LeftShift";
    Lexeme["RightShift"] = "RightShift";
    // assignment operators
    Lexeme["MinusEqual"] = "MinusEqual";
    Lexeme["PlusEqual"] = "PlusEqual";
    Lexeme["StarEqual"] = "StarEqual";
    Lexeme["SlashEqual"] = "SlashEqual";
    Lexeme["BackslashEqual"] = "BackslashEqual";
    Lexeme["LeftShiftEqual"] = "LeftShiftEqual";
    Lexeme["RightShiftEqual"] = "RightShiftEqual";
    // comparators
    Lexeme["Less"] = "Less";
    Lexeme["LessEqual"] = "LessEqual";
    Lexeme["Greater"] = "Greater";
    Lexeme["GreaterEqual"] = "GreaterEqual";
    Lexeme["Equal"] = "Equal";
    Lexeme["LessGreater"] = "LessGreater";
    // literals
    Lexeme["Identifier"] = "Identifier";
    Lexeme["String"] = "String";
    Lexeme["Integer"] = "Integer";
    Lexeme["Float"] = "Float";
    Lexeme["Double"] = "Double";
    Lexeme["LongInteger"] = "LongInteger";
    // other single-character symbols
    Lexeme["Dot"] = "Dot";
    Lexeme["Comma"] = "Comma";
    Lexeme["Colon"] = "Colon";
    Lexeme["Semicolon"] = "Semicolon";
    // conditional compilation
    Lexeme["HashIf"] = "HashIf";
    Lexeme["HashElseIf"] = "HashElseIf";
    Lexeme["HashElse"] = "HashElse";
    Lexeme["HashEndIf"] = "HashEndIf";
    Lexeme["HashConst"] = "HashConst";
    Lexeme["HashError"] = "HashError";
    Lexeme["HashErrorMessage"] = "HashErrorMessage";
    // keywords
    // canonical source: https://sdkdocs.roku.com/display/sdkdoc/Reserved+Words
    Lexeme["And"] = "And";
    Lexeme["Box"] = "Box";
    Lexeme["CreateObject"] = "CreateObject";
    Lexeme["Dim"] = "Dim";
    Lexeme["Else"] = "Else";
    Lexeme["ElseIf"] = "ElseIf";
    Lexeme["End"] = "End";
    Lexeme["EndFunction"] = "EndFunction";
    Lexeme["EndFor"] = "EndFor";
    Lexeme["EndIf"] = "EndIf";
    Lexeme["EndSub"] = "EndSub";
    Lexeme["EndWhile"] = "EndWhile";
    Lexeme["Eval"] = "Eval";
    Lexeme["Exit"] = "Exit";
    Lexeme["ExitFor"] = "ExitFor";
    Lexeme["ExitWhile"] = "ExitWhile";
    Lexeme["False"] = "False";
    Lexeme["For"] = "For";
    Lexeme["ForEach"] = "ForEach";
    Lexeme["Function"] = "Function";
    Lexeme["GetGlobalAA"] = "GetGlobalAA";
    Lexeme["GetLastRunCompileError"] = "GetLastRunCompileError";
    Lexeme["GetLastRunRunTimeError"] = "GetLastRunRunTimeError";
    Lexeme["Goto"] = "Goto";
    Lexeme["If"] = "If";
    Lexeme["Invalid"] = "Invalid";
    Lexeme["Let"] = "Let";
    Lexeme["Next"] = "Next";
    Lexeme["Not"] = "Not";
    Lexeme["ObjFun"] = "ObjFun";
    Lexeme["Or"] = "Or";
    Lexeme["Pos"] = "Pos";
    Lexeme["Print"] = "Print";
    Lexeme["Rem"] = "Rem";
    Lexeme["Return"] = "Return";
    Lexeme["Step"] = "Step";
    Lexeme["Stop"] = "Stop";
    Lexeme["Sub"] = "Sub";
    Lexeme["Tab"] = "Tab";
    Lexeme["To"] = "To";
    Lexeme["True"] = "True";
    Lexeme["Type"] = "Type";
    Lexeme["While"] = "While";
    // structural
    Lexeme["Newline"] = "Newline";
    Lexeme["Eof"] = "Eof";
})(Lexeme = exports.Lexeme || (exports.Lexeme = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGV4ZW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xleGVyL0xleGVtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQVksTUFtSFg7QUFuSEQsV0FBWSxNQUFNO0lBQ2QsdUJBQXVCO0lBQ3ZCLGlDQUF1QixDQUFBO0lBQ3ZCLG1DQUF5QixDQUFBO0lBQ3pCLG1DQUF5QixDQUFBO0lBQ3pCLHFDQUEyQixDQUFBO0lBQzNCLGlDQUF1QixDQUFBO0lBQ3ZCLG1DQUF5QixDQUFBO0lBRXpCLFlBQVk7SUFDWix5QkFBZSxDQUFBO0lBQ2YseUJBQWUsQ0FBQTtJQUNmLHVCQUFhLENBQUE7SUFDYix1QkFBYSxDQUFBO0lBQ2IseUJBQWUsQ0FBQTtJQUNmLHFCQUFXLENBQUE7SUFDWCxpQ0FBdUIsQ0FBQTtJQUV2QixvQkFBb0I7SUFDcEIsK0JBQXFCLENBQUE7SUFDckIsbUNBQXlCLENBQUE7SUFFekIsV0FBVztJQUNYLGlDQUF1QixDQUFBO0lBQ3ZCLG1DQUF5QixDQUFBO0lBRXpCLHVCQUF1QjtJQUN2QixtQ0FBeUIsQ0FBQTtJQUN6QixpQ0FBdUIsQ0FBQTtJQUN2QixpQ0FBdUIsQ0FBQTtJQUN2QixtQ0FBeUIsQ0FBQTtJQUN6QiwyQ0FBaUMsQ0FBQTtJQUNqQywyQ0FBaUMsQ0FBQTtJQUNqQyw2Q0FBbUMsQ0FBQTtJQUVuQyxjQUFjO0lBQ2QsdUJBQWEsQ0FBQTtJQUNiLGlDQUF1QixDQUFBO0lBQ3ZCLDZCQUFtQixDQUFBO0lBQ25CLHVDQUE2QixDQUFBO0lBQzdCLHlCQUFlLENBQUE7SUFDZixxQ0FBMkIsQ0FBQTtJQUUzQixXQUFXO0lBQ1gsbUNBQXlCLENBQUE7SUFDekIsMkJBQWlCLENBQUE7SUFDakIsNkJBQW1CLENBQUE7SUFDbkIseUJBQWUsQ0FBQTtJQUNmLDJCQUFpQixDQUFBO0lBQ2pCLHFDQUEyQixDQUFBO0lBRTNCLGlDQUFpQztJQUNqQyxxQkFBVyxDQUFBO0lBQ1gseUJBQWUsQ0FBQTtJQUNmLHlCQUFlLENBQUE7SUFDZixpQ0FBdUIsQ0FBQTtJQUV2QiwwQkFBMEI7SUFDMUIsMkJBQWlCLENBQUE7SUFDakIsbUNBQXlCLENBQUE7SUFDekIsK0JBQXFCLENBQUE7SUFDckIsaUNBQXVCLENBQUE7SUFDdkIsaUNBQXVCLENBQUE7SUFDdkIsaUNBQXVCLENBQUE7SUFDdkIsK0NBQXFDLENBQUE7SUFFckMsV0FBVztJQUNYLDJFQUEyRTtJQUMzRSxxQkFBVyxDQUFBO0lBQ1gscUJBQVcsQ0FBQTtJQUNYLHVDQUE2QixDQUFBO0lBQzdCLHFCQUFXLENBQUE7SUFDWCx1QkFBYSxDQUFBO0lBQ2IsMkJBQWlCLENBQUE7SUFDakIscUJBQVcsQ0FBQTtJQUNYLHFDQUEyQixDQUFBO0lBQzNCLDJCQUFpQixDQUFBO0lBQ2pCLHlCQUFlLENBQUE7SUFDZiwyQkFBaUIsQ0FBQTtJQUNqQiwrQkFBcUIsQ0FBQTtJQUNyQix1QkFBYSxDQUFBO0lBQ2IsdUJBQWEsQ0FBQTtJQUNiLDZCQUFtQixDQUFBO0lBQ25CLGlDQUF1QixDQUFBO0lBQ3ZCLHlCQUFlLENBQUE7SUFDZixxQkFBVyxDQUFBO0lBQ1gsNkJBQW1CLENBQUE7SUFDbkIsK0JBQXFCLENBQUE7SUFDckIscUNBQTJCLENBQUE7SUFDM0IsMkRBQWlELENBQUE7SUFDakQsMkRBQWlELENBQUE7SUFDakQsdUJBQWEsQ0FBQTtJQUNiLG1CQUFTLENBQUE7SUFDVCw2QkFBbUIsQ0FBQTtJQUNuQixxQkFBVyxDQUFBO0lBQ1gsdUJBQWEsQ0FBQTtJQUNiLHFCQUFXLENBQUE7SUFDWCwyQkFBaUIsQ0FBQTtJQUNqQixtQkFBUyxDQUFBO0lBQ1QscUJBQVcsQ0FBQTtJQUNYLHlCQUFlLENBQUE7SUFDZixxQkFBVyxDQUFBO0lBQ1gsMkJBQWlCLENBQUE7SUFDakIsdUJBQWEsQ0FBQTtJQUNiLHVCQUFhLENBQUE7SUFDYixxQkFBVyxDQUFBO0lBQ1gscUJBQVcsQ0FBQTtJQUNYLG1CQUFTLENBQUE7SUFDVCx1QkFBYSxDQUFBO0lBQ2IsdUJBQWEsQ0FBQTtJQUNiLHlCQUFlLENBQUE7SUFFZixhQUFhO0lBQ2IsNkJBQW1CLENBQUE7SUFDbkIscUJBQVcsQ0FBQTtBQUNmLENBQUMsRUFuSFcsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBbUhqQiJ9