"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const brsTypes_1 = require("../brsTypes");
/** Returns the absolute value of a float. */
exports.Abs = new brsTypes_1.Callable("Abs", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.abs(x.getValue())),
});
/*
 * Returns the integer as a 32-bit float.
 * ** NOTE: the function name implies it makes a 64-bit float, but the docs say
 *     it currently returns a 32-bit float, but may return a 64-bit float in the future.
 */
exports.Cdbl = new brsTypes_1.Callable("Cdbl", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(x.getValue()),
});
/** Returns an integer from a float rounding up from midpoints */
exports.Cint = new brsTypes_1.Callable("Cint", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: (interpreter, x) => new brsTypes_1.Int32(Math.round(x.getValue())),
});
/** Returns the integer as a 32-bit float. */
exports.Csng = new brsTypes_1.Callable("Csng", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(x.getValue()),
});
/** Returns an integer from a float removing fractional parts. */
exports.Fix = new brsTypes_1.Callable("Fix", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: (interpreter, x) => new brsTypes_1.Int32(Math.trunc(x.getValue())),
});
/** Returns an integer from a float. */
exports.Int = new brsTypes_1.Callable("Int", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: (interpreter, x) => new brsTypes_1.Int32(Math.floor(x.getValue())),
});
function SgnImpl(interpreter, x) {
    let val = x.getValue();
    if (val > 0.0)
        return new brsTypes_1.Int32(1);
    else if (val < 0.0)
        return new brsTypes_1.Int32(-1);
    else
        return new brsTypes_1.Int32(0);
}
/** Returns -1 if parameter is negative, 0 if zero, and 1 if positive. */
exports.Sgn = new brsTypes_1.Callable("Sgn", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: SgnImpl,
}, {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: SgnImpl,
});
/** Returns the arc-tangent (in radians) of a float. */
exports.Atn = new brsTypes_1.Callable("Atn", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.atan(x.getValue())),
});
/** Returns the cosine of a float (argument must be provided in radians). */
exports.Cos = new brsTypes_1.Callable("Cos", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.cos(x.getValue())),
});
/** Returns the sine of a float (argument must be provided in radians). */
exports.Sin = new brsTypes_1.Callable("Sin", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.sin(x.getValue())),
});
/** Returns the tangent float (argument must be provided in radians). */
exports.Tan = new brsTypes_1.Callable("Tan", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.tan(x.getValue())),
});
/** Returns the natural exponent of a float. */
exports.Exp = new brsTypes_1.Callable("Exp", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.exp(x.getValue())),
});
/** Returns the log of a float. */
exports.Log = new brsTypes_1.Callable("Log", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.log(x.getValue())),
});
/** Returns the square root of a float. */
exports.Sqr = new brsTypes_1.Callable("Sqr", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.Float,
    },
    impl: (interpreter, x) => new brsTypes_1.Float(Math.sqrt(x.getValue())),
});
/**
 * Returns a random number in a given range. If the range is zero, a random
 * float between [0,1) is returned. If the range is a positive number, a
 * random integer between 1 and that number is returned (inclusive is returned).
 *
 * **NOTE:** the float returned is in the range [0,1) to match the javascript
 *     implementation, while the brightscript specification calls for (0,1).
 *     This should be okay in practice, but if this is necessary a more complicated
 *     implementation will be necessary.
 */
exports.Rnd = new brsTypes_1.Callable("Rnd", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("range", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.Dynamic,
    },
    impl: (interpreter, range) => {
        if (range.getValue() === 0)
            return new brsTypes_1.Float(Math.random());
        else
            return new brsTypes_1.Int32(Math.floor(Math.random() * range.getValue() + 1));
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGRsaWIvTWF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBDQUFnRjtBQUdoRiw2Q0FBNkM7QUFDaEMsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNsRixDQUFDLENBQUM7QUFFSDs7OztHQUlHO0FBQ1UsUUFBQSxJQUFJLEdBQUcsSUFBSSxtQkFBUSxDQUFDLE1BQU0sRUFBRTtJQUNyQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQ3hFLENBQUMsQ0FBQztBQUVILGlFQUFpRTtBQUNwRCxRQUFBLElBQUksR0FBRyxJQUFJLG1CQUFRLENBQUMsTUFBTSxFQUFFO0lBQ3JDLFNBQVMsRUFBRTtRQUNQLElBQUksRUFBRSxDQUFDLElBQUkseUJBQWMsQ0FBQyxHQUFHLEVBQUUsb0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxPQUFPLEVBQUUsb0JB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QUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNuRixDQUFDLENBQUM7QUFFSCw0RUFBNEU7QUFDL0QsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNsRixDQUFDLENBQUM7QUFFSCwwRUFBMEU7QUFDN0QsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNsRixDQUFDLENBQUM7QUFFSCx3RUFBd0U7QUFDM0QsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNsRixDQUFDLENBQUM7QUFFSCwrQ0FBK0M7QUFDbEMsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNsRixDQUFDLENBQUM7QUFFSCxrQ0FBa0M7QUFDckIsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNsRixDQUFDLENBQUM7QUFFSCwwQ0FBMEM7QUFDN0IsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsR0FBRyxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTyxFQUFFLG9CQUFTLENBQUMsS0FBSztLQUMzQjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztDQUNuRixDQUFDLENBQUM7QUFFSDs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLEdBQUcsR0FBRyxJQUFJLG1CQUFRLENBQUMsS0FBSyxFQUFFO0lBQ25DLFNBQVMsRUFBRTtRQUNQLElBQUksRUFBRSxDQUFDLElBQUkseUJBQWMsQ0FBQyxPQUFPLEVBQUUsb0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRCxPQUFPLEVBQUUsb0JBQVMsQ0FBQyxPQUFPO0tBQzdCO0lBQ0QsSUFBSSxFQUFFLENBQUMsV0FBd0IsRUFBRSxLQUFZLEVBQUUsRUFBRTtRQUM3QyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO1lBQUUsT0FBTyxJQUFJLGdCQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7O1lBQ3ZELE9BQU8sSUFBSSxnQkFBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Q0FDSixDQUFDLENBQUMifQ==