"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const brsTypes_1 = require("../brsTypes");
/**
 * Moves the cursor to the specified position on the current line. If the
 * provided position is greater than the current console width and the output
 * is a TTY, the resulting position is modulo'd by the current console width.
 * May be used several times in a `print` list.
 */
exports.Tab = new brsTypes_1.Callable("Tab", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("position", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, position) => {
        let target = position.getValue();
        if (target < 0 || target < interpreter.stdout.position()) {
            return new brsTypes_1.BrsString("");
        }
        // TODO: this probably won't handle text wrapping well, but I'm not
        // sure what the reference implementation does here yet
        return new brsTypes_1.BrsString(" ".repeat(target - interpreter.stdout.position()));
    },
});
/**
 * Returns a number from 0 to the current console width, indicating the
 * position of the output cursor. Requires a "dummy argument" of any type, as
 * it's completely ignored.
 */
exports.Pos = new brsTypes_1.Callable("Pos", {
    signature: {
        // `pos` expects an argument and doesn't use it. The reference
        // implementation's documentation even says it must be provided but
        // isn't used: https://sdkdocs.roku.com/display/sdkdoc/Program+Statements#ProgramStatements-PRINTitemlist
        args: [new brsTypes_1.StdlibArgument("dummy", brsTypes_1.ValueKind.Dynamic)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: (interpreter) => {
        return new brsTypes_1.Int32(interpreter.stdout.position());
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RkbGliL1ByaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMENBQW9GO0FBR3BGOzs7OztHQUtHO0FBQ1UsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsVUFBVSxFQUFFLG9CQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsT0FBTyxFQUFFLG9CQUFTLENBQUMsTUFBTTtLQUM1QjtJQUNELElBQUksRUFBRSxDQUFDLFdBQXdCLEVBQUUsUUFBZSxFQUFFLEVBQUU7UUFDaEQsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pDLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN0RCxPQUFPLElBQUksb0JBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM1QjtRQUVELG1FQUFtRTtRQUNuRSx1REFBdUQ7UUFDdkQsT0FBTyxJQUFJLG9CQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztDQUNKLENBQUMsQ0FBQztBQUVIOzs7O0dBSUc7QUFDVSxRQUFBLEdBQUcsR0FBRyxJQUFJLG1CQUFRLENBQUMsS0FBSyxFQUFFO0lBQ25DLFNBQVMsRUFBRTtRQUNQLDhEQUE4RDtRQUM5RCxtRUFBbUU7UUFDbkUseUdBQXlHO1FBQ3pHLElBQUksRUFBRSxDQUFDLElBQUkseUJBQWMsQ0FBQyxPQUFPLEVBQUUsb0JBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxPQUFPLEVBQUUsb0JBQVMsQ0FBQyxLQUFLO0tBQzNCO0lBQ0QsSUFBSSxFQUFFLENBQUMsV0FBd0IsRUFBRSxFQUFFO1FBQy9CLE9BQU8sSUFBSSxnQkFBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0osQ0FBQyxDQUFDIn0=