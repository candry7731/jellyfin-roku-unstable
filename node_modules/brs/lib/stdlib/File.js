"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const brsTypes_1 = require("../brsTypes");
const url_1 = require("url");
const nanomatch = __importStar(require("nanomatch"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/*
 * Returns a memfs volume based on the brs path uri.  For example, passing in
 * "tmp:/test.txt" will return the memfs temporary volume on the interpreter.
 *
 * Returns invalid in no appopriate volume is found for the path
 */
function getVolumeByPath(interpreter, path) {
    try {
        const protocol = new url_1.URL(path).protocol;
        if (protocol === "tmp:") {
            return interpreter.temporaryVolume;
        }
        if (protocol === "pkg:") {
            return fs;
        }
    }
    catch (err) {
        return null;
    }
    return null;
}
exports.getVolumeByPath = getVolumeByPath;
/*
 * Returns a memfs file path from a brs file uri
 *   ex. "tmp:/test/test1.txt" -> "/test/test1.txt"
 */
function getPath(fileUri) {
    return new url_1.URL(fileUri).pathname;
}
exports.getPath = getPath;
/** Copies a file from src to dst, return true if successful */
exports.CopyFile = new brsTypes_1.Callable("CopyFile", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("source", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("destination", brsTypes_1.ValueKind.String),
        ],
        returns: brsTypes_1.ValueKind.Boolean,
    },
    impl: (interpreter, src, dst) => {
        const srcVolume = getVolumeByPath(interpreter, src.value);
        if (srcVolume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const dstVolume = getVolumeByPath(interpreter, dst.value);
        if (dstVolume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const srcMemfsPath = getPath(src.value);
        const dstMemfsPath = getPath(dst.value);
        try {
            let contents = srcVolume.readFileSync(srcMemfsPath);
            dstVolume.writeFileSync(dstMemfsPath, contents);
            return brsTypes_1.BrsBoolean.True;
        }
        catch (err) {
            return brsTypes_1.BrsBoolean.False;
        }
    },
});
/** Copies a file from src to dst, return true if successful */
exports.MoveFile = new brsTypes_1.Callable("MoveFile", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("source", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("destination", brsTypes_1.ValueKind.String),
        ],
        returns: brsTypes_1.ValueKind.Boolean,
    },
    impl: (interpreter, src, dst) => {
        const srcVolume = getVolumeByPath(interpreter, src.value);
        if (srcVolume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const dstVolume = getVolumeByPath(interpreter, dst.value);
        if (dstVolume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const srcMemfsPath = getPath(src.value);
        const dstMemfsPath = getPath(dst.value);
        try {
            let contents = srcVolume.readFileSync(srcMemfsPath);
            dstVolume.writeFileSync(dstMemfsPath, contents);
            srcVolume.unlinkSync(srcMemfsPath);
            return brsTypes_1.BrsBoolean.True;
        }
        catch (err) {
            return brsTypes_1.BrsBoolean.False;
        }
    },
});
/** Deletes a file, return true if successful */
exports.DeleteFile = new brsTypes_1.Callable("DeleteFile", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("file", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.Boolean,
    },
    impl: (interpreter, file) => {
        const volume = getVolumeByPath(interpreter, file.value);
        if (volume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const memfsPath = getPath(file.value);
        try {
            volume.unlinkSync(memfsPath);
            return brsTypes_1.BrsBoolean.True;
        }
        catch (err) {
            return brsTypes_1.BrsBoolean.False;
        }
    },
});
/** Deletes a directory (if empty), return true if successful */
exports.DeleteDirectory = new brsTypes_1.Callable("DeleteDirectory", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("dir", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.Boolean,
    },
    impl: (interpreter, dir) => {
        const volume = getVolumeByPath(interpreter, dir.value);
        if (volume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const memfsPath = getPath(dir.value);
        try {
            volume.rmdirSync(memfsPath);
            return brsTypes_1.BrsBoolean.True;
        }
        catch (err) {
            return brsTypes_1.BrsBoolean.False;
        }
    },
});
/** Creates a directory, return true if successful */
exports.CreateDirectory = new brsTypes_1.Callable("CreateDirectory", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("dir", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.Boolean,
    },
    impl: (interpreter, dir) => {
        const volume = getVolumeByPath(interpreter, dir.value);
        if (volume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const memfsPath = getPath(dir.value);
        try {
            volume.mkdirSync(memfsPath);
            return brsTypes_1.BrsBoolean.True;
        }
        catch (err) {
            return brsTypes_1.BrsBoolean.False;
        }
    },
});
/** Stubbed function for formatting a drive; always returns false */
exports.FormatDrive = new brsTypes_1.Callable("FormatDrive", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("drive", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("fs_type", brsTypes_1.ValueKind.String),
        ],
        returns: brsTypes_1.ValueKind.Boolean,
    },
    impl: (interpreter, dir) => {
        if (process.env.NODE_ENV !== "test") {
            console.error("`FormatDrive` is not implemented in `brs`.");
        }
        return brsTypes_1.BrsBoolean.False;
    },
});
/** Returns an array of paths in a directory */
exports.ListDir = new brsTypes_1.Callable("ListDir", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("path", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.Object,
    },
    impl: (interpreter, path) => {
        const volume = getVolumeByPath(interpreter, path.value);
        if (volume === null) {
            return new brsTypes_1.RoArray([]);
        }
        const memfsPath = getPath(path.value);
        try {
            let subPaths = volume.readdirSync(memfsPath).map(s => new brsTypes_1.BrsString(s));
            return new brsTypes_1.RoArray(subPaths);
        }
        catch (err) {
            return new brsTypes_1.RoArray([]);
        }
    },
});
/** Reads ascii file from file system. */
exports.ReadAsciiFile = new brsTypes_1.Callable("ReadAsciiFile", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("filepath", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, filepath, text) => {
        const volume = getVolumeByPath(interpreter, filepath.value);
        if (volume === null) {
            return new brsTypes_1.BrsString("");
        }
        const memfsPath = getPath(filepath.value);
        return new brsTypes_1.BrsString(volume.readFileSync(memfsPath).toString());
    },
});
/** Writes a string to a temporary file. */
exports.WriteAsciiFile = new brsTypes_1.Callable("WriteAsciiFile", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("filepath", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("text", brsTypes_1.ValueKind.String),
        ],
        returns: brsTypes_1.ValueKind.Boolean,
    },
    impl: (interpreter, filepath, text) => {
        const volume = getVolumeByPath(interpreter, filepath.value);
        if (volume === null) {
            return brsTypes_1.BrsBoolean.False;
        }
        const memfsPath = getPath(filepath.value);
        volume.writeFileSync(memfsPath, text.value);
        return brsTypes_1.BrsBoolean.True;
    },
});
/** Searches a directory for filenames that match a certain pattern. */
exports.MatchFiles = new brsTypes_1.Callable("MatchFiles", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("path", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("pattern_in", brsTypes_1.ValueKind.String),
        ],
        returns: brsTypes_1.ValueKind.Object,
    },
    impl: (interpreter, pathArg, patternIn) => {
        let volume = getVolumeByPath(interpreter, pathArg.value);
        if (volume == null) {
            // TODO: replace with RoList when that's implemented
            return new brsTypes_1.RoArray([]);
        }
        let localPath = path.join(interpreter.options.root, getPath(pathArg.value));
        try {
            let knownFiles = fs.readdirSync(localPath, "utf8");
            let matchedFiles = nanomatch.match(knownFiles, patternIn.value, {
                nocase: true,
                nodupes: true,
                noglobstar: true,
                nonegate: true,
            });
            matchedFiles = (matchedFiles || []).map((match) => new brsTypes_1.BrsString(match));
            // TODO: replace with RoList when that's implemented
            return new brsTypes_1.RoArray(matchedFiles);
        }
        catch (err) {
            // TODO: replace with RoList when that's implemented
            return new brsTypes_1.RoArray([]);
        }
    },
});
//# sourceMappingURL=data:application/json;base64,