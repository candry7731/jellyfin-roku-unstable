"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RoAssociativeArray_1 = require("../brsTypes/components/RoAssociativeArray");
const RoArray_1 = require("../brsTypes/components/RoArray");
const brsTypes_1 = require("../brsTypes");
/**
 * Converts a value to its representation as a BrsType. If no such
 * representation is possible, throws an Error.
 * @param {any} x Some value.
 * @return {BrsType} The BrsType representaion of `x`.
 * @throws {Error} If `x` cannot be represented as a BrsType.
 */
function brsValueOf(x) {
    if (x === null) {
        return brsTypes_1.BrsInvalid.Instance;
    }
    let t = typeof x;
    switch (t) {
        case "boolean":
            return brsTypes_1.BrsBoolean.from(x);
        case "string":
            return new brsTypes_1.BrsString(x);
        case "number":
            if (Number.isInteger(x)) {
                return x >= -2147483648 && x <= 2147483647 ? new brsTypes_1.Int32(x) : new brsTypes_1.Int64(x);
            }
            return new brsTypes_1.Float(x);
        case "object":
            if (Array.isArray(x)) {
                return new RoArray_1.RoArray(x.map(brsValueOf));
            }
            return new RoAssociativeArray_1.RoAssociativeArray(Object.getOwnPropertyNames(x).map((k) => ({
                name: new brsTypes_1.BrsString(k),
                value: brsValueOf(x[k]),
            })));
        default:
            throw new Error(`brsValueOf not implemented for: ${x} <${t}>`);
    }
}
function visit(x, visited) {
    if (visited.has(x)) {
        throw new Error("Nested object reference");
    }
    visited.add(x);
}
/**
 * Converts a BrsType value to its representation as a JSON string. If no such
 * representation is possible, throws an Error. Objects with cyclical references
 * are rejected.
 * @param {Interpreter} interpreter An Interpreter.
 * @param {BrsType} x Some BrsType value.
 * @param {Set<BrsAggregate>} visited An optional Set of visited of RoArray or
 *   RoAssociativeArray. If not provided, a new Set will be created.
 * @return {string} The JSON string representation of `x`.
 * @throws {Error} If `x` cannot be represented as a JSON string.
 */
function jsonOf(interpreter, x, visited = new Set()) {
    switch (x.kind) {
        case brsTypes_1.ValueKind.Invalid:
            return "null";
        case brsTypes_1.ValueKind.String:
            return `"${x.toString()}"`;
        case brsTypes_1.ValueKind.Boolean:
        case brsTypes_1.ValueKind.Double:
        case brsTypes_1.ValueKind.Float:
        case brsTypes_1.ValueKind.Int32:
        case brsTypes_1.ValueKind.Int64:
            return x.toString();
        case brsTypes_1.ValueKind.Object:
            if (x instanceof RoAssociativeArray_1.RoAssociativeArray) {
                visit(x, visited);
                return `{${x
                    .getElements()
                    .map((k) => {
                    return `"${k.toString()}":${jsonOf(interpreter, x.get(k), visited)}`;
                })
                    .join(",")}}`;
            }
            if (x instanceof RoArray_1.RoArray) {
                visit(x, visited);
                return `[${x
                    .getElements()
                    .map((el) => {
                    return jsonOf(interpreter, el, visited);
                })
                    .join(",")}]`;
            }
            break;
        case brsTypes_1.ValueKind.Callable:
        case brsTypes_1.ValueKind.Uninitialized:
            break;
        default:
            // Exhaustive check as per:
            // https://basarat.gitbooks.io/typescript/content/docs/types/discriminated-unions.html
            const _ = x;
            break;
    }
    throw new Error(`jsonOf not implemented for: ${x}`);
}
function logBrsErr(functionName, err) {
    if (process.env.NODE_ENV === "test") {
        return;
    }
    console.error(`BRIGHTSCRIPT: ERROR: ${functionName}: ${err.message}`);
}
exports.FormatJson = new brsTypes_1.Callable("FormatJson", {
    signature: {
        returns: brsTypes_1.ValueKind.String,
        args: [
            new brsTypes_1.StdlibArgument("x", brsTypes_1.ValueKind.Object),
            new brsTypes_1.StdlibArgument("flags", brsTypes_1.ValueKind.Int32, new brsTypes_1.Int32(0)),
        ],
    },
    impl: (interpreter, x, _flags) => {
        try {
            return new brsTypes_1.BrsString(jsonOf(interpreter, x));
        }
        catch (err) {
            // example RBI error:
            // "BRIGHTSCRIPT: ERROR: FormatJSON: Value type not supported: roFunction: pkg:/source/main.brs(14)"
            logBrsErr("FormatJSON", err);
            return new brsTypes_1.BrsString("");
        }
    },
});
exports.ParseJson = new brsTypes_1.Callable("ParseJson", {
    signature: {
        returns: brsTypes_1.ValueKind.Dynamic,
        args: [new brsTypes_1.StdlibArgument("jsonString", brsTypes_1.ValueKind.String)],
    },
    impl: (_, jsonString) => {
        try {
            let s = jsonString.toString().trim();
            if (s === "") {
                throw new Error("Data is empty");
            }
            return brsValueOf(JSON.parse(s));
        }
        catch (err) {
            // example RBI error:
            // "BRIGHTSCRIPT: ERROR: ParseJSON: Unknown identifier 'x': pkg:/source/main.brs(25)"
            logBrsErr("ParseJSON", err);
            return brsTypes_1.BrsInvalid.Instance;
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGRsaWIvSnNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtGQUErRTtBQUMvRSw0REFBeUQ7QUFJekQsMENBV3FCO0FBRXJCOzs7Ozs7R0FNRztBQUNILFNBQVMsVUFBVSxDQUFDLENBQU07SUFDdEIsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ1osT0FBTyxxQkFBVSxDQUFDLFFBQVEsQ0FBQztLQUM5QjtJQUNELElBQUksQ0FBQyxHQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLFFBQVEsQ0FBQyxFQUFFO1FBQ1AsS0FBSyxTQUFTO1lBQ1YsT0FBTyxxQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixLQUFLLFFBQVE7WUFDVCxPQUFPLElBQUksb0JBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixLQUFLLFFBQVE7WUFDVCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBYSxJQUFJLENBQUMsSUFBSSxVQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksZ0JBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxnQkFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xGO1lBQ0QsT0FBTyxJQUFJLGdCQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsS0FBSyxRQUFRO1lBQ1QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNsQixPQUFPLElBQUksaUJBQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7YUFDekM7WUFDRCxPQUFPLElBQUksdUNBQWtCLENBQ3pCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFTLEVB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