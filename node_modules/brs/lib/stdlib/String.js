"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const brsTypes_1 = require("../brsTypes");
/** Converts the string to all uppercase. */
exports.UCase = new brsTypes_1.Callable("UCase", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, s) => new brsTypes_1.BrsString(s.value.toUpperCase()),
});
/** Converts the string to all lowercase. */
exports.LCase = new brsTypes_1.Callable("LCase", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, s) => new brsTypes_1.BrsString(s.value.toLowerCase()),
});
/**
 * Returns the Unicode ("ASCII") value for the first character of the specified string.
 * An empty string argument will return `0`.
 */
exports.Asc = new brsTypes_1.Callable("Asc", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("letter", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, str) => new brsTypes_1.Int32(str.value.charCodeAt(0) || 0),
});
/**
 * Performs the inverse of the `Asc` function: returns a one-character string whose character has
 * the specified Unicode value.
 *
 * Returns empty string (`""`) if the specified value is `0` or an invalid Unicode value.
 */
exports.Chr = new brsTypes_1.Callable("Chr", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("ch", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, ch) => {
        const num = ch.getValue();
        if (num <= 0)
            return new brsTypes_1.BrsString("");
        else
            return new brsTypes_1.BrsString(String.fromCharCode(num));
    },
});
/**
 * Returns the first n characters in a string
 */
exports.Left = new brsTypes_1.Callable("Left", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String), new brsTypes_1.StdlibArgument("n", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, s, n) => new brsTypes_1.BrsString(s.value.substr(0, n.getValue())),
});
/**
 * Returns the last n characters in a string
 */
exports.Right = new brsTypes_1.Callable("Right", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String), new brsTypes_1.StdlibArgument("n", brsTypes_1.ValueKind.Int32)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, s, n) => {
        let end = s.value.length - 1;
        let start = end - (n.getValue() - 1);
        if (n.getValue() <= 0)
            return new brsTypes_1.BrsString("");
        else if (start < 0)
            return new brsTypes_1.BrsString(s.value);
        return new brsTypes_1.BrsString(s.value.substr(start, end));
    },
});
/**
 * Returns the index (1 based) of a string inside another string. Zero if there is no match.
 */
exports.Instr = new brsTypes_1.Callable("Instr", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("start", brsTypes_1.ValueKind.Int32),
            new brsTypes_1.StdlibArgument("str", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("search", brsTypes_1.ValueKind.String),
        ],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, start, str, search) => new brsTypes_1.Int32(str.value.indexOf(search.value, start.getValue() - 1) + 1),
});
/**
 * Return the number of characters in a string
 */
exports.Len = new brsTypes_1.Callable("Len", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: (interpreter, s) => new brsTypes_1.Int32(s.value.length),
});
/**
 * Return a string located in the middle of another string from start index to end index
 */
exports.Mid = new brsTypes_1.Callable("Mid", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("p", brsTypes_1.ValueKind.Int32),
        ],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, s, p) => {
        let start = p.getValue() - 1;
        return new brsTypes_1.BrsString(s.value.substring(start));
    },
}, {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("p", brsTypes_1.ValueKind.Int32),
            new brsTypes_1.StdlibArgument("n", brsTypes_1.ValueKind.Int32),
        ],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, s, p, n) => {
        let start = p.getValue() - 1;
        return new brsTypes_1.BrsString(s.value.substring(start, start + n.getValue()));
    },
});
/**
 * Return a string from a float. If it is positive, prefix it with a space.
 */
exports.Str = new brsTypes_1.Callable("Str", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("value", brsTypes_1.ValueKind.Float)],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, value) => {
        const floatValue = value.getValue();
        const prefix = floatValue > 0.0 ? " " : "";
        return new brsTypes_1.BrsString(prefix + String(floatValue));
    },
});
/**
 * Return a string from an integer. If it is positive, prefix it with a space.
 */
exports.StrI = new brsTypes_1.Callable("StrI", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("value", brsTypes_1.ValueKind.Int32),
            new brsTypes_1.StdlibArgument("radix", brsTypes_1.ValueKind.Int32, new brsTypes_1.Int32(10)),
        ],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, value, brsRadix) => {
        let radix = brsRadix.getValue();
        if (radix < 2 || radix > 36) {
            return new brsTypes_1.BrsString("");
        }
        const intValue = value.getValue();
        const prefix = intValue > 0 && radix === 10 ? " " : "";
        return new brsTypes_1.BrsString(prefix + intValue.toString(radix));
    },
});
/**
 * Return a string from another string replacing instances of {index} with the
 * respective parameter.
 */
exports.Substitute = new brsTypes_1.Callable("Substitute", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("str", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("arg0", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("arg1", brsTypes_1.ValueKind.String, new brsTypes_1.BrsString("")),
            new brsTypes_1.StdlibArgument("arg2", brsTypes_1.ValueKind.String, new brsTypes_1.BrsString("")),
            new brsTypes_1.StdlibArgument("arg3", brsTypes_1.ValueKind.String, new brsTypes_1.BrsString("")),
        ],
        returns: brsTypes_1.ValueKind.String,
    },
    impl: (interpreter, str, arg0, arg1, arg2, arg3) => {
        let completelyReplaced = [arg0, arg1, arg2, arg3].reduce((replaced, replacement, index) => replaced.replace(new RegExp(`\\{${index}\\}`, "g"), replacement.value), str.value);
        return new brsTypes_1.BrsString(completelyReplaced);
    },
});
/**
 * Return a float or integer from a string
 */
exports.Val = new brsTypes_1.Callable("Val", {
    signature: {
        args: [
            new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String),
            new brsTypes_1.StdlibArgument("radix", brsTypes_1.ValueKind.Int32, new brsTypes_1.Int32(10)),
        ],
        returns: brsTypes_1.ValueKind.Dynamic,
    },
    impl: (interpreter, s, brsRadix) => {
        function isBrsStrFloat(str) {
            return str.value.includes(".");
        }
        if (isBrsStrFloat(s)) {
            return new brsTypes_1.Float(Number(s.value));
        }
        else {
            return new brsTypes_1.Int32(parseInt(s.value, brsRadix.getValue()));
        }
    },
});
/**
 * Return an integer from a string or 0 if it can't be parsed.
 */
exports.StrToI = new brsTypes_1.Callable("StrToI", {
    signature: {
        args: [new brsTypes_1.StdlibArgument("s", brsTypes_1.ValueKind.String)],
        returns: brsTypes_1.ValueKind.Int32,
    },
    impl: (interpreter, s) => {
        let integerValue = parseInt(s.value);
        if (Number.isNaN(integerValue)) {
            return new brsTypes_1.Int32(0);
        }
        return new brsTypes_1.Int32(integerValue);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0ZGxpYi9TdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQ0FBb0c7QUFNcEcsNENBQTRDO0FBQy9CLFFBQUEsS0FBSyxHQUFHLElBQUksbUJBQVEsQ0FBQyxPQUFPLEVBQUU7SUFDdkMsU0FBUyxFQUFFO1FBQ1AsSUFBSSxFQUFFLENBQUMsSUFBSSx5QkFBYyxDQUFDLEdBQUcsRUFBRSxvQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sRUFBRSxvQkFBUyxDQUFDLE1BQU07S0FDNUI7SUFDRCxJQUFJLEVBQUUsQ0FBQyxXQUF3QixFQUFFLENBQVksRUFBRSxFQUFFLENBQUMsSUFBSSxvQkFBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDekYsQ0FBQyxDQUFDO0FBRUgsNENBQTRDO0FBQy9CLFFBQUEsS0FBSyxHQUFHLElBQUksbUJBQVEsQ0FBQyxPQUFPLEVBQUU7SUFDdkMsU0FBUyxFQUFFO1FBQ1AsSUFBSSxFQUFFLENBQUMsSUFBSSx5QkFBYyxDQUFDLEdBQUcsRUFBRSxvQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sRUFBRSxvQkFBUyxDQUFDLE1BQU07S0FDNUI7SUFDRCxJQUFJLEVBQUUsQ0FBQyxXQUF3QixFQUFFLENBQVksRUFBRSxFQUFFLENBQUMsSUFBSSxvQkFBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDekYsQ0FBQyxDQUFDO0FBRUg7OztHQUdHO0FBQ1UsUUFBQSxHQUFHLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUFjLENBQUMsUUFBUSxFQUFFLG9CQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsT0FBTyxFQUFFLG9CQUFT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