"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** Proxies a `stdout`-like stream to provide current-column tracking. */
class OutputProxy {
    /**
     * Creates a new proxy that tracks the current column of the provided stream.
     * @param outputStream the stream to proxy writes to
     */
    constructor(outputStream) {
        this.outputStream = outputStream;
        this.currentLineLength = 0;
    }
    /**
     * Writes a string's worth of data to the proxied stream and updates the current output column.
     * @param str the string to write to the proxied stream
     */
    write(str) {
        this.outputStream.write(str);
        let lines = str.split("\n");
        if (lines.length > 1) {
            // the length of the most recent line is now the current line length
            this.currentLineLength = lines[lines.length - 1].length;
            return;
        }
        // but if this wasn't a multi-line string, we're just appending to the current line
        this.currentLineLength += str.length;
    }
    /**
     * Calculates and returns the column that the next written character will
     * be placed in. If the proxied stream is a TTY, the current position will
     * be in the range `[0, proxiedStream.columns)`.
     *
     * @returns the zero-indexed position at which the next written character
     *          will be placed in the proxied output stream.
     */
    position() {
        if (!this.outputStream.isTTY || !this.outputStream.columns) {
            return this.currentLineLength;
        }
        return this.currentLineLength % this.outputStream.columns;
    }
}
exports.OutputProxy = OutputProxy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3V0cHV0UHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJwcmV0ZXIvT3V0cHV0UHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5RUFBeUU7QUFDekUsTUFBYSxXQUFXO0lBR3BCOzs7T0FHRztJQUNILFlBQW9CLFlBQWdDO1FBQWhDLGlCQUFZLEdBQVosWUFBWSxDQUFvQjtRQU5wRCxzQkFBaUIsR0FBRyxDQUFDLENBQUM7SUFNaUMsQ0FBQztJQUV4RDs7O09BR0c7SUFDSCxLQUFLLENBQUMsR0FBVztRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUIsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsQixvRUFBb0U7WUFDcEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN4RCxPQUFPO1NBQ1Y7UUFFRCxtRkFBbUY7UUFDbkYsSUFBSSxDQUFDLGlCQUFpQixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7WUFDeEQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7U0FDakM7UUFFRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztJQUM5RCxDQUFDO0NBQ0o7QUEzQ0Qsa0NBMkNDIn0=