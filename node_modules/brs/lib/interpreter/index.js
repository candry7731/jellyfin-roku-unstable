"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const brsTypes_1 = require("../brsTypes");
const lexer_1 = require("../lexer");
const Token_1 = require("../lexer/Token");
const parser_1 = require("../parser");
const Error_1 = require("../Error");
const StdLib = __importStar(require("../stdlib"));
const Environment_1 = require("./Environment");
const OutputProxy_1 = require("./OutputProxy");
const BrsFunction_1 = require("./BrsFunction");
const RoAssociativeArray_1 = require("../brsTypes/components/RoAssociativeArray");
const memory_fs_1 = __importDefault(require("memory-fs"));
const BrsComponent_1 = require("../brsTypes/components/BrsComponent");
const Boxing_1 = require("../brsTypes/Boxing");
/** The default set of execution options.  Includes the `stdout`/`stderr` pair from the process that invoked `brs`. */
exports.defaultExecutionOptions = {
    root: process.cwd(),
    stdout: process.stdout,
    stderr: process.stderr,
};
class Interpreter {
    /**
     * Creates a new Interpreter, including any global properties and functions.
     * @param options configuration for the execution, including the streams to use for `stdout` and
     *                `stderr` and the base directory for path resolution
     */
    constructor(options = exports.defaultExecutionOptions) {
        this._environment = new Environment_1.Environment();
        this.temporaryVolume = new memory_fs_1.default();
        /** Allows consumers to observe errors as they're detected. */
        this.events = new events_1.EventEmitter();
        /** The set of errors detected from executing an AST. */
        this.errors = [];
        this.stdout = new OutputProxy_1.OutputProxy(options.stdout);
        this.stderr = new OutputProxy_1.OutputProxy(options.stderr);
        this.options = options;
        Object.keys(StdLib)
            .map(name => StdLib[name])
            .filter(func => func instanceof brsTypes_1.Callable)
            .filter((func) => {
            if (!func.name) {
                throw new Error("Unnamed standard library function detected!");
            }
            return !!func.name;
        })
            .forEach((func) => this._environment.define(Environment_1.Scope.Global, func.name || "", func));
    }
    get environment() {
        return this._environment;
    }
    /**
     * Convenience function to subscribe to the `err` events emitted by `interpreter.events`.
     * @param errorHandler the function to call for every runtime error emitted after subscribing
     * @returns an object with a `dispose` function, used to unsubscribe from errors
     */
    onError(errorHandler) {
        this.events.on("err", errorHandler);
        return {
            dispose: () => {
                this.events.removeListener("err", errorHandler);
            },
        };
    }
    /**
     * Convenience function to subscribe to a single `err` event emitted by `interpreter.events`.
     * @param errorHandler the function to call for the first runtime error emitted after subscribing
     */
    onErrorOnce(errorHandler) {
        this.events.once("err", errorHandler);
    }
    /**
     * Temporarily sets an interpreter's environment to the provided one, then
     * passes the sub-interpreter to the provided JavaScript function. Always
     * reverts the current interpreter's environment to its original value.
     * @param func the JavaScript function to execute with the sub interpreter.
     */
    inSubEnv(func) {
        let originalEnvironment = this._environment;
        let newEnv = this._environment.createSubEnvironment();
        try {
            this._environment = newEnv;
            return func(this);
        }
        catch (err) {
            if (!(err instanceof Error_1.BrsError)) {
                console.error("Runtime error encountered in BRS implementation: ", err);
            }
            throw err;
        }
        finally {
            this._environment = originalEnvironment;
        }
    }
    exec(statements, ...args) {
        let results = statements.map(statement => this.execute(statement));
        try {
            let mainVariable = new parser_1.Expr.Variable({
                kind: lexer_1.Lexeme.Identifier,
                text: "main",
                isReserved: false,
                location: {
                    start: {
                        line: -1,
                        column: -1,
                    },
                    end: {
                        line: -1,
                        column: -1,
                    },
                    file: "(internal)",
                },
            });
            let maybeMain = this.visitVariable(mainVariable);
            if (maybeMain.kind === brsTypes_1.ValueKind.Callable) {
                results = [
                    this.visitCall(new parser_1.Expr.Call(mainVariable, mainVariable.name, args.map(arg => new parser_1.Expr.Literal(arg, mainVariable.location)))),
                ];
            }
        }
        catch (err) {
            if (err instanceof parser_1.Stmt.ReturnValue) {
                results = [err.value || brsTypes_1.BrsInvalid.Instance];
            }
            else {
                throw err;
            }
        }
        finally {
            return results;
        }
    }
    visitNamedFunction(statement) {
        if (statement.name.isReserved) {
            return this.addError(new Error_1.BrsError(`Cannot create a named function with reserved name '${statement.name.text}'`, statement.name.location));
        }
        if (this.environment.has(statement.name, [Environment_1.Scope.Module])) {
            // TODO: Figure out how to determine where the original version was declared
            // Maybe `Environment.define` records the location along with the value?
            return this.addError(new Error_1.BrsError(`Attempting to declare function '${statement.name.text}', but ` +
                `a property of that name already exists in this scope.`, statement.name.location));
        }
        this.environment.define(Environment_1.Scope.Module, statement.name.text, BrsFunction_1.toCallable(statement.func, statement.name.text));
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitReturn(statement) {
        if (!statement.value) {
            throw new parser_1.Stmt.ReturnValue(statement.tokens.return.location);
        }
        let toReturn = this.evaluate(statement.value);
        throw new parser_1.Stmt.ReturnValue(statement.tokens.return.location, toReturn);
    }
    visitExpression(statement) {
        return this.evaluate(statement.expression);
    }
    visitPrint(statement) {
        // the `tab` function is only in-scope while executing print statements
        this.environment.define(Environment_1.Scope.Function, "Tab", StdLib.Tab);
        statement.expressions.forEach((printable, index) => {
            if (Token_1.isToken(printable)) {
                switch (printable.kind) {
                    case lexer_1.Lexeme.Comma:
                        this.stdout.write(" ".repeat(16 - (this.stdout.position() % 16)));
                        break;
                    case lexer_1.Lexeme.Semicolon:
                        if (index === statement.expressions.length - 1) {
                            // Don't write an extra space for trailing `;` in print lists.
                            // They're used to suppress trailing newlines in `print` statements
                            break;
                        }
                        this.stdout.write(" ");
                        break;
                    default:
                        this.addError(new Error_1.BrsError(`Found unexpected print separator '${printable.text}'`, printable.location));
                }
            }
            else {
                this.stdout.write(this.evaluate(printable).toString());
            }
        });
        let lastExpression = statement.expressions[statement.expressions.length - 1];
        if (!Token_1.isToken(lastExpression) || lastExpression.kind !== lexer_1.Lexeme.Semicolon) {
            this.stdout.write("\n");
        }
        // `tab` is only in-scope when executing print statements, so remove it before we leave
        this.environment.remove("Tab");
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitAssignment(statement) {
        if (statement.name.isReserved) {
            this.addError(new Error_1.BrsError(`Cannot assign a value to reserved name '${statement.name.text}'`, statement.name.location));
            return brsTypes_1.BrsInvalid.Instance;
        }
        let value = this.evaluate(statement.value);
        let name = statement.name.text;
        const typeDesignators = {
            $: brsTypes_1.ValueKind.String,
            "%": brsTypes_1.ValueKind.Int32,
            "!": brsTypes_1.ValueKind.Float,
            "#": brsTypes_1.ValueKind.Double,
            "&": brsTypes_1.ValueKind.Int64,
        };
        let requiredType = typeDesignators[name.charAt(name.length - 1)];
        if (requiredType && requiredType !== value.kind) {
            return this.addError(new Error_1.TypeMismatch({
                message: `Attempting to assign incorrect value to statically-typed variable '${name}'`,
                left: {
                    type: requiredType,
                    location: statement.name.location,
                },
                right: {
                    type: value,
                    location: statement.value.location,
                },
            }));
        }
        this.environment.define(Environment_1.Scope.Function, statement.name.text, value);
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitBinary(expression) {
        let lexeme = expression.token.kind;
        let left = this.evaluate(expression.left);
        let right = brsTypes_1.BrsInvalid.Instance;
        if (lexeme !== lexer_1.Lexeme.And && lexeme !== lexer_1.Lexeme.Or) {
            // don't evaluate right-hand-side of boolean expressions, to preserve short-circuiting
            // behavior found in other languages. e.g. `foo() && bar()` won't execute `bar()` if
            // `foo()` returns `false`.
            right = this.evaluate(expression.right);
        }
        /**
         * Determines whether or not the provided pair of values are allowed to be compared to each other.
         * @param left the left-hand side of a comparison operator
         * @param operator the operator to use when comparing `left` and `right`
         * @param right the right-hand side of a comparison operator
         * @returns `true` if `left` and `right` are allowed to be compared to each other with `operator`,
         *          otherwise `false`.
         */
        function canCheckEquality(left, operator, right) {
            if (left.kind === brsTypes_1.ValueKind.Invalid || right.kind === brsTypes_1.ValueKind.Invalid) {
                // anything can be checked for *equality* with `invalid`, but greater than / less than comparisons
                // are type mismatches
                return operator === lexer_1.Lexeme.Equal || operator === lexer_1.Lexeme.LessGreater;
            }
            return ((left.kind < brsTypes_1.ValueKind.Dynamic || Boxing_1.isUnboxable(left)) &&
                (right.kind < brsTypes_1.ValueKind.Dynamic || Boxing_1.isUnboxable(right)));
        }
        switch (lexeme) {
            case lexer_1.Lexeme.Minus:
            case lexer_1.Lexeme.MinusEqual:
                if (brsTypes_1.isBrsNumber(left) && brsTypes_1.isBrsNumber(right)) {
                    return left.subtract(right);
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to subtract non-numeric values.",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            case lexer_1.Lexeme.Star:
            case lexer_1.Lexeme.StarEqual:
                if (brsTypes_1.isBrsNumber(left) && brsTypes_1.isBrsNumber(right)) {
                    return left.multiply(right);
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to multiply non-numeric values.",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            case lexer_1.Lexeme.Caret:
                if (brsTypes_1.isBrsNumber(left) && brsTypes_1.isBrsNumber(right)) {
                    return left.pow(right);
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to exponentiate non-numeric values.",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            case lexer_1.Lexeme.Slash:
            case lexer_1.Lexeme.SlashEqual:
                if (brsTypes_1.isBrsNumber(left) && brsTypes_1.isBrsNumber(right)) {
                    return left.divide(right);
                }
                return this.addError(new Error_1.TypeMismatch({
                    message: "Attempting to dividie non-numeric values.",
                    left: {
                        type: left,
                        location: expression.left.location,
                    },
                    right: {
                        type: right,
                        location: expression.right.location,
                    },
                }));
            case lexer_1.Lexeme.Mod:
                if (brsTypes_1.isBrsNumber(left) && brsTypes_1.isBrsNumber(right)) {
                    return left.modulo(right);
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to modulo non-numeric values.",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            case lexer_1.Lexeme.Backslash:
            case lexer_1.Lexeme.BackslashEqual:
                if (brsTypes_1.isBrsNumber(left) && brsTypes_1.isBrsNumber(right)) {
                    return left.intDivide(right);
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to integer-divide non-numeric values.",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            case lexer_1.Lexeme.Plus:
            case lexer_1.Lexeme.PlusEqual:
                if (brsTypes_1.isBrsNumber(left) && brsTypes_1.isBrsNumber(right)) {
                    return left.add(right);
                }
                else if (brsTypes_1.isBrsString(left) && brsTypes_1.isBrsString(right)) {
                    return left.concat(right);
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to add non-homogeneous values.",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            case lexer_1.Lexeme.Greater:
                if ((brsTypes_1.isBrsNumber(left) || brsTypes_1.isBrsString(left)) &&
                    (brsTypes_1.isBrsNumber(right) || brsTypes_1.isBrsString(right))) {
                    return left.greaterThan(right);
                }
                return this.addError(new Error_1.TypeMismatch({
                    message: "Attempting to compare non-primitive values.",
                    left: {
                        type: left,
                        location: expression.left.location,
                    },
                    right: {
                        type: right,
                        location: expression.right.location,
                    },
                }));
            case lexer_1.Lexeme.GreaterEqual:
                if ((brsTypes_1.isBrsNumber(left) || brsTypes_1.isBrsString(left)) &&
                    (brsTypes_1.isBrsNumber(right) || brsTypes_1.isBrsString(right))) {
                    return left.greaterThan(right).or(left.equalTo(right));
                }
                else if (canCheckEquality(left, lexeme, right)) {
                    return left.equalTo(right);
                }
                return this.addError(new Error_1.TypeMismatch({
                    message: "Attempting to compare non-primitive values.",
                    left: {
                        type: left,
                        location: expression.left.location,
                    },
                    right: {
                        type: right,
                        location: expression.right.location,
                    },
                }));
            case lexer_1.Lexeme.Less:
                if ((brsTypes_1.isBrsNumber(left) || brsTypes_1.isBrsString(left)) &&
                    (brsTypes_1.isBrsNumber(right) || brsTypes_1.isBrsString(right))) {
                    return left.lessThan(right);
                }
                return this.addError(new Error_1.TypeMismatch({
                    message: "Attempting to compare non-primitive values.",
                    left: {
                        type: left,
                        location: expression.left.location,
                    },
                    right: {
                        type: right,
                        location: expression.right.location,
                    },
                }));
            case lexer_1.Lexeme.LessEqual:
                if ((brsTypes_1.isBrsNumber(left) || brsTypes_1.isBrsString(left)) &&
                    (brsTypes_1.isBrsNumber(right) || brsTypes_1.isBrsString(right))) {
                    return left.lessThan(right).or(left.equalTo(right));
                }
                else if (canCheckEquality(left, lexeme, right)) {
                    return left.equalTo(right);
                }
                return this.addError(new Error_1.TypeMismatch({
                    message: "Attempting to compare non-primitive values.",
                    left: {
                        type: left,
                        location: expression.left.location,
                    },
                    right: {
                        type: right,
                        location: expression.right.location,
                    },
                }));
            case lexer_1.Lexeme.Equal:
                if (canCheckEquality(left, lexeme, right)) {
                    return left.equalTo(right);
                }
                return this.addError(new Error_1.TypeMismatch({
                    message: "Attempting to compare non-primitive values.",
                    left: {
                        type: left,
                        location: expression.left.location,
                    },
                    right: {
                        type: right,
                        location: expression.right.location,
                    },
                }));
            case lexer_1.Lexeme.LessGreater:
                if (canCheckEquality(left, lexeme, right)) {
                    return left.equalTo(right).not();
                }
                return this.addError(new Error_1.TypeMismatch({
                    message: "Attempting to compare non-primitive values.",
                    left: {
                        type: left,
                        location: expression.left.location,
                    },
                    right: {
                        type: right,
                        location: expression.right.location,
                    },
                }));
            case lexer_1.Lexeme.And:
                if (brsTypes_1.isBrsBoolean(left) && !left.toBoolean()) {
                    // short-circuit ANDs - don't evaluate RHS if LHS is false
                    return brsTypes_1.BrsBoolean.False;
                }
                else if (brsTypes_1.isBrsBoolean(left)) {
                    right = this.evaluate(expression.right);
                    if (brsTypes_1.isBrsBoolean(right)) {
                        return left.and(right);
                    }
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to 'and' boolean with non-boolean value",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
                else if (brsTypes_1.isBrsNumber(left)) {
                    right = this.evaluate(expression.right);
                    if (brsTypes_1.isBrsNumber(right)) {
                        // TODO: support boolean AND with numbers
                        return left.and(right);
                    }
                    // TODO: figure out how to handle 32-bit int AND 64-bit int
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to bitwise 'and' number with non-numberic value",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to 'and' unexpected values",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            case lexer_1.Lexeme.Or:
                if (brsTypes_1.isBrsBoolean(left) && left.toBoolean()) {
                    // short-circuit ORs - don't evaluate RHS if LHS is true
                    return brsTypes_1.BrsBoolean.True;
                }
                else if (brsTypes_1.isBrsBoolean(left)) {
                    right = this.evaluate(expression.right);
                    if (brsTypes_1.isBrsBoolean(right)) {
                        return left.or(right);
                    }
                    else {
                        return this.addError(new Error_1.TypeMismatch({
                            message: "Attempting to 'or' boolean with non-boolean value",
                            left: {
                                type: left,
                                location: expression.left.location,
                            },
                            right: {
                                type: right,
                                location: expression.right.location,
                            },
                        }));
                    }
                }
                else if (brsTypes_1.isBrsNumber(left)) {
                    right = this.evaluate(expression.right);
                    if (brsTypes_1.isBrsNumber(right)) {
                        return left.or(right);
                    }
                    // TODO: figure out how to handle 32-bit int OR 64-bit int
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to bitwise 'or' number with non-numeric expression",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
                else {
                    return this.addError(new Error_1.TypeMismatch({
                        message: "Attempting to 'or' unexpected values",
                        left: {
                            type: left,
                            location: expression.left.location,
                        },
                        right: {
                            type: right,
                            location: expression.right.location,
                        },
                    }));
                }
            default:
                return this.addError(new Error_1.BrsError(`Received unexpected token kind '${expression.token.kind}'`, expression.token.location));
        }
    }
    visitBlock(block) {
        block.statements.forEach(statement => this.execute(statement));
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitExitFor(statement) {
        throw new parser_1.Stmt.ExitForReason(statement.location);
    }
    visitExitWhile(expression) {
        throw new parser_1.Stmt.ExitWhileReason(expression.location);
    }
    visitCall(expression) {
        let functionName = "[anonymous function]";
        // TODO: autobox
        if (expression.callee instanceof parser_1.Expr.Variable ||
            expression.callee instanceof parser_1.Expr.DottedGet) {
            functionName = expression.callee.name.text;
        }
        // evaluate the function to call (it could be the result of another function call)
        const callee = this.evaluate(expression.callee);
        // evaluate all of the arguments as well (they could also be function calls)
        const args = expression.args.map(this.evaluate, this);
        if (!brsTypes_1.isBrsCallable(callee)) {
            return this.addError(new Error_1.BrsError(`'${functionName}' is not a function and cannot be called.`, expression.closingParen.location));
        }
        functionName = callee.getName();
        let satisfiedSignature = callee.getFirstSatisfiedSignature(args);
        if (satisfiedSignature) {
            try {
                let mPointer = this._environment.getM();
                if (expression.callee instanceof parser_1.Expr.DottedGet ||
                    expression.callee instanceof parser_1.Expr.IndexedGet) {
                    let maybeM = this.evaluate(expression.callee.obj);
                    maybeM = Boxing_1.isBoxable(maybeM) ? maybeM.box() : maybeM;
                    if (maybeM.kind === brsTypes_1.ValueKind.Object) {
                        if (maybeM instanceof RoAssociativeArray_1.RoAssociativeArray) {
                            mPointer = maybeM;
                        }
                    }
                    else {
                        return this.addError(new Error_1.BrsError("Attempted to retrieve a function from a primitive value", expression.closingParen.location));
                    }
                }
                return this.inSubEnv(subInterpreter => {
                    subInterpreter.environment.setM(mPointer);
                    return callee.call(this, ...args);
                });
            }
            catch (reason) {
                if (!(reason instanceof parser_1.Stmt.BlockEnd)) {
                    throw new Error("Something terrible happened and we didn't throw a `BlockEnd` instance.");
                }
                let returnedValue = reason.value;
                let returnLocation = reason.location;
                if (returnedValue && satisfiedSignature.signature.returns === brsTypes_1.ValueKind.Void) {
                    this.addError(new parser_1.Stmt.Runtime(`Attempting to return value of non-void type ${brsTypes_1.ValueKind.toString(returnedValue.kind)} ` + `from function ${callee.getName()} with void return type.`, returnLocation));
                }
                if (!returnedValue && satisfiedSignature.signature.returns !== brsTypes_1.ValueKind.Void) {
                    this.addError(new parser_1.Stmt.Runtime(`Attempting to return void value from function ${callee.getName()} with non-void return type.`, returnLocation));
                }
                if (returnedValue &&
                    satisfiedSignature.signature.returns !== brsTypes_1.ValueKind.Dynamic &&
                    satisfiedSignature.signature.returns !== returnedValue.kind) {
                    this.addError(new parser_1.Stmt.Runtime(`Attempting to return value of type ${brsTypes_1.ValueKind.toString(returnedValue.kind)}, ` +
                        `but function ${callee.getName()} declares return value of type ` +
                        brsTypes_1.ValueKind.toString(satisfiedSignature.signature.returns), returnLocation));
                }
                return returnedValue || brsTypes_1.BrsInvalid.Instance;
            }
        }
        else {
            function formatMismatch(mismatchedSignature) {
                let sig = mismatchedSignature.signature;
                let mismatches = mismatchedSignature.mismatches;
                let messageParts = [];
                let args = sig.args
                    .map(a => {
                    let requiredArg = `${a.name.text} as ${brsTypes_1.ValueKind.toString(a.type.kind)}`;
                    if (a.defaultValue) {
                        return `[${requiredArg}]`;
                    }
                    else {
                        return requiredArg;
                    }
                })
                    .join(", ");
                messageParts.push(`function ${functionName}(${args}) as ${brsTypes_1.ValueKind.toString(sig.returns)}:`);
                messageParts.push(...mismatches
                    .map(mm => {
                    switch (mm.reason) {
                        case brsTypes_1.MismatchReason.TooFewArguments:
                            return `* ${functionName} requires at least ${mm.expected} arguments, but received ${mm.received}.`;
                        case brsTypes_1.MismatchReason.TooManyArguments:
                            return `* ${functionName} accepts at most ${mm.expected} arguments, but received ${mm.received}.`;
                        case brsTypes_1.MismatchReason.ArgumentTypeMismatch:
                            return `* Argument '${mm.argName}' must be of type ${mm.expected}, but received ${mm.received}.`;
                    }
                })
                    .map(line => `    ${line}`));
                return messageParts.map(line => `    ${line}`).join("\n");
            }
            let mismatchedSignatures = callee.getAllSignatureMismatches(args);
            let header;
            let messages;
            if (mismatchedSignatures.length === 1) {
                header = `Provided arguments don't match ${functionName}'s signature.`;
                messages = [formatMismatch(mismatchedSignatures[0])];
            }
            else {
                header = `Provided arguments don't match any of ${functionName}'s signatures.`;
                messages = mismatchedSignatures.map(formatMismatch);
            }
            return this.addError(new Error_1.BrsError([header, ...messages].join("\n"), expression.closingParen.location));
        }
    }
    visitDottedGet(expression) {
        let source = this.evaluate(expression.obj);
        if (brsTypes_1.isIterable(source)) {
            try {
                return source.get(new brsTypes_1.BrsString(expression.name.text));
            }
            catch (err) {
                return this.addError(new Error_1.BrsError(err.message, expression.name.location));
            }
        }
        let boxedSource = Boxing_1.isBoxable(source) ? source.box() : source;
        if (boxedSource instanceof BrsComponent_1.BrsComponent) {
            try {
                return boxedSource.getMethod(expression.name.text) || brsTypes_1.BrsInvalid.Instance;
            }
            catch (err) {
                return this.addError(new Error_1.BrsError(err.message, expression.name.location));
            }
        }
        else {
            return this.addError(new Error_1.TypeMismatch({
                message: "Attempting to retrieve property from non-iterable value",
                left: {
                    type: source,
                    location: expression.location,
                },
            }));
        }
    }
    visitIndexedGet(expression) {
        let source = this.evaluate(expression.obj);
        if (!brsTypes_1.isIterable(source)) {
            throw new Error_1.TypeMismatch({
                message: "Attempting to retrieve property from non-iterable value",
                left: {
                    type: source,
                    location: expression.location,
                },
            });
        }
        let index = this.evaluate(expression.index);
        if (!brsTypes_1.isBrsNumber(index) && !brsTypes_1.isBrsString(index)) {
            throw new Error_1.TypeMismatch({
                message: "Attempting to retrieve property from iterable with illegal index type",
                left: {
                    type: source,
                    location: expression.obj.location,
                },
                right: {
                    type: index,
                    location: expression.index.location,
                },
            });
        }
        try {
            return source.get(index);
        }
        catch (err) {
            return this.addError(new Error_1.BrsError(err.message, expression.closingSquare.location));
        }
    }
    visitGrouping(expr) {
        return this.evaluate(expr.expression);
    }
    visitFor(statement) {
        // BrightScript for/to loops evaluate the counter initial value, final value, and increment
        // values *only once*, at the top of the for/to loop.
        this.execute(statement.counterDeclaration);
        const finalValue = this.evaluate(statement.finalValue);
        const increment = this.evaluate(statement.increment);
        const counterName = statement.counterDeclaration.name;
        const step = new parser_1.Stmt.Assignment({ equals: statement.tokens.for }, counterName, new parser_1.Expr.Binary(new parser_1.Expr.Variable(counterName), {
            kind: lexer_1.Lexeme.Plus,
            text: "+",
            isReserved: false,
            location: {
                start: {
                    line: -1,
                    column: -1,
                },
                end: {
                    line: -1,
                    column: -1,
                },
                file: "(internal)",
            },
        }, new parser_1.Expr.Literal(increment, statement.increment.location)));
        let loopExitReason;
        while (this.evaluate(new parser_1.Expr.Variable(counterName))
            .equalTo(finalValue)
            .not()
            .toBoolean()) {
            // execute the block
            try {
                this.execute(statement.body);
            }
            catch (reason) {
                if (reason instanceof parser_1.Stmt.ExitForReason) {
                    loopExitReason = reason;
                    break;
                }
                else {
                    // re-throw returns, runtime errors, etc.
                    throw reason;
                }
            }
            // then increment the counter
            this.execute(step);
        }
        // BrightScript for/to loops execute the body one more time when initial === final
        if (loopExitReason === undefined) {
            this.execute(statement.body);
            // they also increments the counter once more
            this.execute(step);
        }
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitForEach(statement) {
        let target = this.evaluate(statement.target);
        if (!brsTypes_1.isIterable(target)) {
            return this.addError(new Error_1.BrsError(`Attempting to iterate across values of non-iterable type ` +
                brsTypes_1.ValueKind.toString(target.kind), statement.item.location));
        }
        target.getElements().every(element => {
            this.environment.define(Environment_1.Scope.Function, statement.item.text, element);
            // execute the block
            try {
                this.execute(statement.body);
            }
            catch (reason) {
                if (reason instanceof parser_1.Stmt.ExitForReason) {
                    // break out of the loop
                    return false;
                }
                else {
                    // re-throw returns, runtime errors, etc.
                    throw reason;
                }
            }
            // keep looping
            return true;
        });
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitWhile(statement) {
        while (this.evaluate(statement.condition)
            .equalTo(brsTypes_1.BrsBoolean.True)
            .toBoolean()) {
            try {
                this.execute(statement.body);
            }
            catch (reason) {
                if (reason instanceof parser_1.Stmt.ExitWhileReason) {
                    break;
                }
                else {
                    // re-throw returns, runtime errors, etc.
                    throw reason;
                }
            }
        }
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitIf(statement) {
        if (this.evaluate(statement.condition)
            .equalTo(brsTypes_1.BrsBoolean.True)
            .toBoolean()) {
            this.execute(statement.thenBranch);
            return brsTypes_1.BrsInvalid.Instance;
        }
        else {
            for (const elseIf of statement.elseIfs || []) {
                if (this.evaluate(elseIf.condition)
                    .equalTo(brsTypes_1.BrsBoolean.True)
                    .toBoolean()) {
                    this.execute(elseIf.thenBranch);
                    return brsTypes_1.BrsInvalid.Instance;
                }
            }
            if (statement.elseBranch) {
                this.execute(statement.elseBranch);
            }
            return brsTypes_1.BrsInvalid.Instance;
        }
    }
    visitAnonymousFunction(func) {
        return BrsFunction_1.toCallable(func);
    }
    visitLiteral(expression) {
        return expression.value;
    }
    visitArrayLiteral(expression) {
        return new brsTypes_1.RoArray(expression.elements.map(expr => this.evaluate(expr)));
    }
    visitAALiteral(expression) {
        return new RoAssociativeArray_1.RoAssociativeArray(expression.elements.map(member => ({
            name: member.name,
            value: this.evaluate(member.value),
        })));
    }
    visitDottedSet(statement) {
        let source = this.evaluate(statement.obj);
        let value = this.evaluate(statement.value);
        if (!brsTypes_1.isIterable(source)) {
            return this.addError(new Error_1.TypeMismatch({
                message: "Attempting to set property on non-iterable value",
                left: {
                    type: source,
                    location: statement.name.location,
                },
            }));
        }
        try {
            source.set(new brsTypes_1.BrsString(statement.name.text), value);
        }
        catch (err) {
            return this.addError(new Error_1.BrsError(err.message, statement.name.location));
        }
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitIndexedSet(statement) {
        let source = this.evaluate(statement.obj);
        if (!brsTypes_1.isIterable(source)) {
            return this.addError(new Error_1.TypeMismatch({
                message: "Attempting to set property on non-iterable value",
                left: {
                    type: source,
                    location: statement.obj.location,
                },
            }));
        }
        let index = this.evaluate(statement.index);
        if (!brsTypes_1.isBrsNumber(index) && !brsTypes_1.isBrsString(index)) {
            return this.addError(new Error_1.TypeMismatch({
                message: "Attempting to set property on iterable with illegal index type",
                left: {
                    type: source,
                    location: statement.obj.location,
                },
                right: {
                    type: index,
                    location: statement.index.location,
                },
            }));
        }
        let value = this.evaluate(statement.value);
        try {
            source.set(index, value);
        }
        catch (err) {
            return this.addError(new Error_1.BrsError(err.message, statement.closingSquare.location));
        }
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitIncrement(expression) {
        let target = this.evaluate(expression.value);
        if (!brsTypes_1.isBrsNumber(target)) {
            let operation = expression.token.kind === lexer_1.Lexeme.PlusPlus ? "increment" : "decrement";
            return this.addError(new Error_1.BrsError(`Attempting to ${operation} value of non-numeric type ${brsTypes_1.ValueKind.toString(target.kind)}`, expression.location));
        }
        let result;
        if (expression.token.kind === lexer_1.Lexeme.PlusPlus) {
            result = target.add(new brsTypes_1.Int32(1));
        }
        else {
            result = target.subtract(new brsTypes_1.Int32(1));
        }
        if (expression.value instanceof parser_1.Expr.Variable) {
            // store the result of the operation
            this.environment.define(Environment_1.Scope.Function, expression.value.name.text, result);
        }
        else if (expression.value instanceof parser_1.Expr.DottedGet) {
            // immediately execute a dotted "set" statement
            this.execute(new parser_1.Stmt.DottedSet(expression.value.obj, expression.value.name, new parser_1.Expr.Literal(result, expression.location)));
        }
        else if (expression.value instanceof parser_1.Expr.IndexedGet) {
            // immediately execute an indexed "set" statement
            this.execute(new parser_1.Stmt.IndexedSet(expression.value.obj, expression.value.index, new parser_1.Expr.Literal(result, expression.location), expression.value.closingSquare));
        }
        // always return `invalid`, because ++/-- are purely side-effects in BrightScript
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitUnary(expression) {
        let right = this.evaluate(expression.right);
        switch (expression.operator.kind) {
            case lexer_1.Lexeme.Minus:
                if (brsTypes_1.isBrsNumber(right)) {
                    return right.multiply(new brsTypes_1.Int32(-1));
                }
                else {
                    return this.addError(new Error_1.BrsError(`Attempting to negate non-numeric value.
                            value type: ${brsTypes_1.ValueKind.toString(right.kind)}`, expression.operator.location));
                }
            case lexer_1.Lexeme.Not:
                if (brsTypes_1.isBrsBoolean(right)) {
                    return right.not();
                }
                else {
                    return this.addError(new Error_1.BrsError(`Attempting to NOT non-boolean value.
                            value type: ${brsTypes_1.ValueKind.toString(right.kind)}`, expression.operator.location));
                }
        }
        return brsTypes_1.BrsInvalid.Instance;
    }
    visitVariable(expression) {
        try {
            return this.environment.get(expression.name);
        }
        catch (err) {
            if (err instanceof Environment_1.NotFound) {
                return brsTypes_1.Uninitialized.Instance;
            }
            throw err;
        }
    }
    evaluate(expression) {
        return expression.accept(this);
    }
    execute(statement) {
        return statement.accept(this);
    }
    /**
     * Emits an error via this processor's `events` property, then throws it.
     * @param err the ParseError to emit then throw
     */
    addError(err) {
        this.errors.push(err);
        this.events.emit("err", err);
        throw err;
    }
}
exports.Interpreter = Interpreter;
//# sourceMappingURL=data:application/json;base64,