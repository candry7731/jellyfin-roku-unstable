"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const brsTypes_1 = require("../brsTypes");
/** The logical region from a particular variable or function that defines where it may be accessed from. */
var Scope;
(function (Scope) {
    /** The set of native functions that are always accessible, e.g. `RebootSystem`. */
    Scope[Scope["Global"] = 0] = "Global";
    /** The set of named functions accessible from a set of files compiled together. */
    Scope[Scope["Module"] = 1] = "Module";
    /** The set of variables (including anonymous functions) accessible *only* from within a function body. */
    Scope[Scope["Function"] = 2] = "Function";
})(Scope = exports.Scope || (exports.Scope = {}));
/** An error thrown when attempting to access an uninitialized variable. */
class NotFound extends Error {
    constructor(reason) {
        super(reason);
    }
}
exports.NotFound = NotFound;
/** Holds a set of values in multiple scopes and provides access operations to them. */
class Environment {
    constructor() {
        /**
         * Functions that are always accessible.
         * @see Scope.Global
         */
        this.global = new Map();
        /**
         * Named functions that are compiled together into a single module.
         * @see Scope.Module
         */
        this.module = new Map();
        /**
         * Variables and anonymous functions accessible only within a function's body.
         * @see Scope.Function
         */
        this.function = new Map();
        /** The BrightScript `m` pointer, analogous to JavaScript's `this` pointer. */
        this.mPointer = new brsTypes_1.RoAssociativeArray([]);
    }
    /**
     * Stores a `value` for the `name`d variable in the provided `scope`.
     * @param scope The logical region from a particular variable or function that defines where it may be accessed from
     * @param name the name of the variable to define (in the form of an `Identifier`)
     * @param value the value of the variable to define
     */
    define(scope, name, value) {
        let destination;
        switch (scope) {
            case Scope.Function:
                destination = this.function;
                break;
            case Scope.Module:
                destination = this.module;
                break;
            default:
                destination = this.global;
                break;
        }
        destination.set(name.toLowerCase(), value);
    }
    /**
     * Sets the value of the special `m` variable, which is analogous to JavaScript's `this`.
     * @param newMPointer the new value to be used for the `m` pointer
     */
    setM(newMPointer) {
        this.mPointer = newMPointer;
    }
    /**
     * Retrieves the current value of the special `m` variable, which is analogous to JavaScript's `this`.
     * @returns the current value used for the `m` pointer.
     */
    getM() {
        return this.mPointer;
    }
    /**
     * Removes a variable from this environment's function scope.
     * @param name the name of the variable to remove (in the form of an `Identifier`)
     */
    remove(name) {
        this.function.delete(name.toLowerCase());
    }
    /**
     * Retrieves a variable from this environment, checking each internal scope in order of precedence.
     * @param name the name of the variable to retrieve (in the form of an `Identifier`)
     * @returns the value stored for `name` if any exist
     * @throws a `NotFound` error if no value is stored for `name`
     */
    get(name) {
        let lowercaseName = name.text.toLowerCase();
        // the special "LINE_NUM" variable always resolves to the line number on which it appears
        if (lowercaseName === "line_num") {
            return new brsTypes_1.Int32(name.location.start.line);
        }
        // "m" always maps to the special `m` pointer
        if (lowercaseName === "m") {
            return this.mPointer;
        }
        let source = [this.function, this.module, this.global].find(scope => scope.has(lowercaseName));
        if (source) {
            return source.get(lowercaseName);
        }
        throw new NotFound(`Undefined variable '${name.text}'`);
    }
    /**
     * Determines whether or not a variable exists in this environment.
     * @param name the name of the variable to search for (in the form of an `Identifier`)
     * @param scopeFilter the set of scopes with which to limit searches for `name`
     * @returns `true` if this environment contains `name`, otherwise `false`
     */
    has(name, scopeFilter = [Scope.Global, Scope.Module, Scope.Function]) {
        if (name.text.toLowerCase() === "m") {
            return true; // we always have an `m` scope of some sort!
        }
        let lowercaseName = name.text.toLowerCase();
        return (scopeFilter
            .map(scopeName => {
            switch (scopeName) {
                case Scope.Global:
                    return this.global;
                case Scope.Module:
                    return this.module;
                case Scope.Function:
                    return this.function;
            }
        })
            .find(scope => scope.has(lowercaseName)) != null);
    }
    /**
     * Creates a clone of the current environment, but without its function-scoped
     * values. Useful for creating sub-environments.
     *
     * The Reference BrightScript Implementation (RBI) doesn't currently create closures when
     * functions are created.  When a function is called, it has access only to:
     *
     * 1. Globally-defined functions (e.g. `RebootSystem`, `UCase`, et. al.)
     * 2. Named functions compiled together into a single "module"
     * 3. Parameters passed into the function
     * 4. The `m` pointer, defined by the way in which a function was called
     *
     * @returns a copy of this environment but with no function-scoped values.
     */
    createSubEnvironment() {
        let newEnvironment = new Environment();
        newEnvironment.global = this.global;
        newEnvironment.module = this.module;
        newEnvironment.mPointer = this.mPointer;
        return newEnvironment;
    }
}
exports.Environment = Environment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW52aXJvbm1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJwcmV0ZXIvRW52aXJvbm1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwwQ0FBaUU7QUFFakUsNEdBQTRHO0FBQzVHLElBQVksS0FPWDtBQVBELFdBQVksS0FBSztJQUNiLG1GQUFtRjtJQUNuRixxQ0FBTSxDQUFBO0lBQ04sbUZBQW1GO0lBQ25GLHFDQUFNLENBQUE7SUFDTiwwR0FBMEc7SUFDMUcseUNBQVEsQ0FBQTtBQUNaLENBQUMsRUFQVyxLQUFLLEdBQUwsYUFBSyxLQUFMLGFBQUssUUFPaEI7QUFFRCwyRUFBMkU7QUFDM0UsTUFBYSxRQUFTLFNBQVEsS0FBSztJQUMvQixZQUFZLE1BQWM7UUFDdEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUpELDRCQUlDO0FBRUQsdUZBQXVGO0FBQ3ZGLE1BQWEsV0FBVztJQUF4QjtRQUNJOzs7V0FHRztRQUNLLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztRQUM1Qzs7O1dBR0c7UUFDSyxXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQW1CLENBQUM7UUFDNUM7OztXQUdHO1FBQ0ssYUFBUSxHQUFHLElBQUksR0FBRyxFQUFtQixDQUFDO1FBQzlDLDhFQUE4RTtRQUN0RSxhQUFRLEdBQUcsSUFBSSw2QkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQXFJbEQsQ0FBQztJQW5JRzs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFZLEVBQUUsSUFBWSxFQUFFLEtBQWM7UUFDcEQsSUFBSSxXQUFpQyxDQUFDO1FBRXRDLFFBQVEsS0FBSyxFQUFFO1lBQ1gsS0FBSyxLQUFLLENBQUMsUUFBUTtnQkFDZixXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDNUIsTUFBTTtZQUNWLEtBQUssS0FBSyxDQUFDLE1BQU07Z0JBQ2IsV0FBVyxHQUFHLElBQUks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