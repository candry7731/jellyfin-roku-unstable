"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** Creates a pretty-printed representation of an expression to ease debugging. */
class AstPrinter {
    constructor() {
        this.indent = 0;
    }
    /**
     * Pretty-prints an expression for debugging purposes.
     * @param expression the expression to pretty-print.
     */
    print(expression) {
        this.indent = 0;
        return expression.accept(this);
    }
    visitAnonymousFunction(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitBinary(e) {
        return this.parenthesize(e.token.text, e.left, e.right);
    }
    visitCall(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitDottedGet(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitIndexedGet(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitGrouping(e) {
        return this.parenthesize("group", e.expression);
    }
    visitLiteral(e) {
        if (e.value == null) {
            return "invalid";
        }
        else {
            return e.value.toString();
        }
    }
    visitArrayLiteral(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitAALiteral(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitDottedSet(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitIndexedSet(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitIncrement(e) {
        return JSON.stringify(e, undefined, 2);
    }
    visitUnary(e) {
        return this.parenthesize(e.operator.text, e.right);
    }
    visitVariable(expression) {
        return JSON.stringify(expression, undefined, 2);
    }
    /**
     * Wraps an expression in parentheses to make its grouping visible during debugging.
     *
     * @param name The name of the expression type being printed.
     * @param expressions any subexpressions that need to be stringified as well.
     */
    parenthesize(name = "", ...expressions) {
        this.indent++;
        let out = [
            `(${name}\n`,
            expressions.map(e => `${"  ".repeat(this.indent)}${e.accept(this)}\n`).join(""),
            `${"  ".repeat(this.indent - 1)})`,
        ].join("");
        this.indent--;
        return out;
    }
}
exports.AstPrinter = AstPrinter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXN0UHJpbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcnByZXRlci9Bc3RQcmludGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEsa0ZBQWtGO0FBQ2xGLE1BQWEsVUFBVTtJQUF2QjtRQUNZLFdBQU0sR0FBRyxDQUFDLENBQUM7SUEwRXZCLENBQUM7SUF6RUc7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFVBQTJCO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsc0JBQXNCLENBQUMsQ0FBZ0I7UUFDbkMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFdBQVcsQ0FBQyxDQUFjO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBQ0QsU0FBUyxDQUFDLENBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNELGNBQWMsQ0FBQyxDQUFpQjtRQUM1QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ0QsZUFBZSxDQUFDLENBQWtCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRCxhQUFhLENBQUMsQ0FBZ0I7UUFDMUIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNELFlBQVksQ0FBQyxDQUFlO1FBQ3hCLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDakIsT0FBTyxTQUFTLENBQUM7U0FDcEI7YUFBTTtZQUNILE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFDRCxpQkFBaUIsQ0FBQyxDQUFvQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ0QsY0FBYyxDQUFDLENBQWlCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRCxjQUFjLENBQUMsQ0FBaUI7UUFDNUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNELGVBQWUsQ0FBQyxDQUFrQjtRQUM5QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ0QsY0FBYyxDQUFDLENBQWlCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRCxVQUFVLENBQUMsQ0FBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFDRCxhQUFhLENBQUMsVUFBeUI7UUFDbkMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssWUFBWSxDQUFDLE9BQWUsRUFBRSxFQUFFLEdBQUcsV0FBOEI7UUFDckUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsSUFBSSxHQUFHLEdBQUc7WUFDTixJQUFJLElBQUksSUFBSTtZQUNaLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDL0UsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUc7U0FDckMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Q0FDSjtBQTNFRCxnQ0EyRUMifQ==