"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const brsTypes_1 = require("./brsTypes");
class BrsError extends Error {
    constructor(message, location) {
        super(message);
        this.location = location;
    }
    /**
     * Formats the error into a human-readable string including filename, starting and ending line
     * and column, and the message associated with the error, e.g.:
     *
     * `lorem.brs(1,1-3): Expected '(' after sub name`
     * ```
     */
    format() {
        let location = this.location;
        let formattedLocation;
        if (location.start.line === location.end.line) {
            let columns = `${location.start.column}`;
            if (location.start.column !== location.end.column) {
                columns += `-${location.end.column}`;
            }
            formattedLocation = `${location.file}(${location.start.line},${columns})`;
        }
        else {
            formattedLocation = `${location.file}(${location.start.line},${location.start.column},${location.end.line},${location.end.line})`;
        }
        return `${formattedLocation}: ${this.message}`;
    }
}
exports.BrsError = BrsError;
/**
 * Creates a "type mismatch"-like error message, but with the appropriate types specified.
 * @return a type mismatch error that will be tracked by this module.
 */
class TypeMismatch extends BrsError {
    constructor(mismatchMetadata) {
        let messageLines = [
            mismatchMetadata.message,
            `    left: ${brsTypes_1.ValueKind.toString(getKind(mismatchMetadata.left.type))}`,
        ];
        let location = mismatchMetadata.left.location;
        if (mismatchMetadata.right) {
            messageLines.push(`    right: ${brsTypes_1.ValueKind.toString(getKind(mismatchMetadata.right.type))}`);
            location.end = mismatchMetadata.right.location.end;
        }
        super(messageLines.join("\n"), location);
    }
}
exports.TypeMismatch = TypeMismatch;
/**
 * Returns the `.kind` property of a `BrsType`, otherwise returns the provided `ValueKind`.
 * @param maybeType the `BrsType` to extract a `.kind` field from, or the `ValueKind` to return directly
 * @returns the `ValueKind` for `maybeType`
 */
function getKind(maybeType) {
    if (typeof maybeType === "number") {
        return maybeType;
    }
    else {
        return maybeType.kind;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBZ0Q7QUFHaEQsTUFBYSxRQUFTLFNBQVEsS0FBSztJQUMvQixZQUFZLE9BQWUsRUFBVyxRQUFrQjtRQUNwRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFEbUIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUV4RCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsTUFBTTtRQUNGLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFN0IsSUFBSSxpQkFBeUIsQ0FBQztRQUU5QixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO1lBQzNDLElBQUksT0FBTyxHQUFHLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN6QyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO2dCQUMvQyxPQUFPLElBQUksSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3hDO1lBQ0QsaUJBQWlCLEdBQUcsR0FBRyxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLE9BQU8sR0FBRyxDQUFDO1NBQzdFO2FBQU07WUFDSCxpQkFBaUIsR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQztTQUNySTtRQUVELE9BQU8sR0FBRyxpQkFBaUIsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkQsQ0FBQztDQUNKO0FBN0JELDRCQTZCQztBQXNCRDs7O0dBR0c7QUFDSCxNQUFhLFlBQWEsU0FBUSxRQUFRO0lBQ3RDLFlBQVksZ0JBQXNDO1FBQzlDLElBQUksWUFBWSxHQUFHO1lBQ2YsZ0JBQWdCLENBQUMsT0FBTztZQUN4QixhQUFhLG9CQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtTQUN6RSxDQUFDO1FBQ0YsSUFBSSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUU5QyxJQUFJLGdCQUFnQixDQUFDLEtBQUssRUFBRTtZQUN4QixZQUFZLENBQUMsSUFBSSxDQUNiLGNBQWMsb0JBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQzNFLENBQUM7WUFFRixRQUFRLENBQUMsR0FBRyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1NBQ3REO1FBRUQsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNKO0FBbEJELG9DQWtCQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLE9BQU8sQ0FBQyxTQUE4QjtJQUMzQyxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUMvQixPQUFPLFNBQVMsQ0FBQztLQUNwQjtTQUFNO1FBQ0gsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO0tBQ3pCO0FBQ0wsQ0FBQyJ9