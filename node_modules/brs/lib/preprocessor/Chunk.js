"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** A series of BrightScript tokens that will be parsed and interpreted directly. */
class BrightScript {
    constructor(tokens) {
        this.tokens = tokens;
    }
    accept(visitor) {
        return visitor.visitBrightScript(this);
    }
}
exports.BrightScript = BrightScript;
/**
 * A conditional compilation directive that declares a constant value that's in-scope only during
 * preprocessing.
 *
 * Typically takes the form of:
 *
 * @example
 * #const foo = true
 */
class Declaration {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
    accept(visitor) {
        return visitor.visitDeclaration(this);
    }
}
exports.Declaration = Declaration;
/**
 * A directive that adds the "conditional" to "conditional compilation". Typically takes the form
 * of:
 *
 * @example
 * #if foo
 *     someBrightScriptGoesHere()
 * #else if bar
 *     compileSomeOtherCode()
 * #else
 *     otherwise("compile this!")
 * #end if
 */
class If {
    constructor(condition, thenChunks, elseIfs, elseChunks) {
        this.condition = condition;
        this.thenChunks = thenChunks;
        this.elseIfs = elseIfs;
        this.elseChunks = elseChunks;
    }
    accept(visitor) {
        return visitor.visitIf(this);
    }
}
exports.If = If;
/**
 * A forced BrightScript compilation error with a message attached.  Typically takes the form of:
 *
 * @example
 * #error Some message describing the error goes here.
 */
class Error {
    constructor(hashError, message) {
        this.hashError = hashError;
        this.message = message;
    }
    accept(visitor) {
        return visitor.visitError(this);
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2h1bmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJlcHJvY2Vzc29yL0NodW5rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBcUJBLG9GQUFvRjtBQUNwRixNQUFhLFlBQVk7SUFDckIsWUFBcUIsTUFBZTtRQUFmLFdBQU0sR0FBTixNQUFNLENBQVM7SUFBRyxDQUFDO0lBRXhDLE1BQU0sQ0FBQyxPQUFnQjtRQUNuQixPQUFPLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDO0NBQ0o7QUFORCxvQ0FNQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBYSxXQUFXO0lBQ3BCLFlBQXFCLElBQVcsRUFBVyxLQUFZO1FBQWxDLFNBQUksR0FBSixJQUFJLENBQU87UUFBVyxVQUFLLEdBQUwsS0FBSyxDQUFPO0lBQUcsQ0FBQztJQUUzRCxNQUFNLENBQUMsT0FBZ0I7UUFDbkIsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBTkQsa0NBTUM7QUFXRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFhLEVBQUU7SUFDWCxZQUNhLFNBQWdCLEVBQ2hCLFVBQW1CLEVBQ25CLE9BQXFCLEVBQ3JCLFVBQW9CO1FBSHBCLGNBQVMsR0FBVCxTQUFTLENBQU87UUFDaEIsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUNuQixZQUFPLEdBQVAsT0FBTyxDQUFjO1FBQ3JCLGVBQVUsR0FBVixVQUFVLENBQVU7SUFDOUIsQ0FBQztJQUVKLE1BQU0sQ0FBQyxPQUFnQjtRQUNuQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNKO0FBWEQsZ0JBV0M7QUFFRDs7Ozs7R0FLRztBQUNILE1BQWEsS0FBSztJQUNkLFlBQXFCLFNBQWdCLEVBQVcsT0FBZTtRQUExQyxjQUFTLEdBQVQsU0FBUyxDQUFPO1FBQVcsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUFHLENBQUM7SUFFbkUsTUFBTSxDQUFDLE9BQWdCO1FBQ25CLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0o7QUFORCxzQkFNQyJ9