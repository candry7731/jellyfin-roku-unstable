"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Parser_1 = require("./Parser");
const Preprocessor_1 = require("./Preprocessor");
const Manifest_1 = require("./Manifest");
class Preprocessor {
    constructor() {
        this.parser = new Parser_1.Parser();
        this._preprocessor = new Preprocessor_1.Preprocessor();
        this.events = new events_1.EventEmitter();
        // plumb errors from the internal parser and preprocessor out to the public interface for convenience
        this.parser.events.on("err", err => this.events.emit("err", err));
        this._preprocessor.events.on("err", err => this.events.emit("err", err));
    }
    /**
     * Convenience function to subscribe to the `err` events emitted by `preprocessor.events`.
     * @param errorHandler the function to call for every preprocessing error emitted after subscribing
     * @returns an object with a `dispose` function, used to unsubscribe from errors
     */
    onError(errorHandler) {
        this.events.on("err", errorHandler);
        return {
            dispose: () => {
                this.events.removeListener("err", errorHandler);
            },
        };
    }
    /**
     * Convenience function to subscribe to a single `err` event emitted by `preprocessor.events`.
     * @param errorHandler the function to call for the first preprocessing error emitted after subscribing
     */
    onErrorOnce(errorHandler) {
        this.events.once("err", errorHandler);
    }
    /**
     * Pre-processes a set of tokens, evaluating any conditional compilation directives encountered.
     * @param tokens the set of tokens to process
     * @param manifest the data stored in the found manifest file
     * @returns an array of processed tokens representing a subset of the provided ones
     */
    preprocess(tokens, manifest) {
        let parserResults = this.parser.parse(tokens);
        if (parserResults.errors.length > 0) {
            return {
                processedTokens: [],
                errors: parserResults.errors,
            };
        }
        return this._preprocessor.filter(parserResults.chunks, Manifest_1.getBsConst(manifest));
    }
}
exports.Preprocessor = Preprocessor;
const Chunk = __importStar(require("./Chunk"));
exports.Chunk = Chunk;
var Parser_2 = require("./Parser");
exports.Parser = Parser_2.Parser;
var Manifest_2 = require("./Manifest");
exports.getManifest = Manifest_2.getManifest;
exports.getManifestSync = Manifest_2.getManifestSync;
exports.getBsConst = Manifest_2.getBsConst;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJlcHJvY2Vzc29yL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLG1DQUFzQztBQUl0QyxxQ0FBa0M7QUFDbEMsaURBQXFGO0FBQ3JGLHlDQUFrRDtBQUVsRCxNQUFhLFlBQVk7SUE0QnJCO1FBM0JRLFdBQU0sR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO1FBQ3RCLGtCQUFhLEdBQUcsSUFBSSwyQkFBb0IsRUFBRSxDQUFDO1FBRTFDLFdBQU0sR0FBRyxJQUFJLHFCQUFZLEVBQUUsQ0FBQztRQXlCakMscUdBQXFHO1FBQ3JHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQTFCRDs7OztPQUlHO0lBQ0ksT0FBTyxDQUFDLFlBQWtEO1FBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNwQyxPQUFPO1lBQ0gsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDVixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDcEQsQ0FBQztTQUNKLENBQUM7SUFDTixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksV0FBVyxDQUFDLFlBQWtEO1FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBUUQ7Ozs7O09BS0c7SUFDSCxVQUFVLENBQUMsTUFBNEIsRUFBRSxRQUFrQjtRQUN2RCxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqQyxPQUFPO2dCQUNILGVBQWUsRUFBRSxFQUFFO2dCQUNuQixNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU07YUFDL0IsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLHFCQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0NBQ0o7QUFuREQsb0NBbURDO0FBRUQsK0NBQWlDO0FBR3hCLHNCQUFLO0FBQ2QsbUNBQWtDO0FBQXpCLDBCQUFBLE1BQU0sQ0FBQTtBQUNmLHVDQUFnRjtBQUF2RSxpQ0FBQSxXQUFXLENBQUE7QUFBRSxxQ0FBQSxlQUFlLENBQUE7QUFBRSxnQ0FBQSxVQUFVLENBQUEifQ==