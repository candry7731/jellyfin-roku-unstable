import { BrsType, BrsBoolean } from "./";
import { ValueKind, Comparable } from "./BrsType";
import { BrsNumber, Numeric } from "./BrsNumber";
import { Int32 } from "./Int32";
import { Double } from "./Double";
import { Int64 } from "./Int64";
export declare class Float implements Numeric, Comparable {
    readonly kind = ValueKind.Float;
    private readonly value;
    getValue(): number;
    /**
     * Creates a new BrightScript floating-point value representing the provided `value`.
     * @param value the value to store in the BrightScript float, rounded to 32-bit floating point
     *              precision and maintaining only seven significant digits of accuracy.
     */
    constructor(value: number);
    /**
     * Creates a new BrightScript floating-point value representing the floating point value
     * contained in `asString`.
     * @param asString the string representation of the value to store in the BrightScript float.
     *                 Will be rounded to 32-bit floating point precision.
     * @returns a BrightScript floating-point value representing `asString`.
     */
    static fromString(asString: string): Float;
    add(rhs: BrsNumber): BrsNumber;
    subtract(rhs: BrsNumber): BrsNumber;
    multiply(rhs: BrsNumber): BrsNumber;
    divide(rhs: BrsNumber): Float | Double;
    modulo(rhs: BrsNumber): BrsNumber;
    intDivide(rhs: BrsNumber): Int32 | Int64;
    pow(exponent: BrsNumber): BrsNumber;
    and(rhs: BrsNumber): BrsNumber;
    or(rhs: BrsNumber): BrsNumber;
    lessThan(other: BrsType): BrsBoolean;
    greaterThan(other: BrsType): BrsBoolean;
    equalTo(other: BrsType): BrsBoolean;
    toString(parent?: BrsType): string;
}
