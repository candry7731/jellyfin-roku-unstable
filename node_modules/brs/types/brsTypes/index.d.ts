import { ValueKind, BrsInvalid, BrsBoolean, BrsString, Uninitialized, BrsValue } from "./BrsType";
import { RoArray } from "./components/RoArray";
import { RoAssociativeArray } from "./components/RoAssociativeArray";
import { Int32 } from "./Int32";
import { Int64 } from "./Int64";
import { Float } from "./Float";
import { Double } from "./Double";
import { Callable } from "./Callable";
import { BrsComponent } from "./components/BrsComponent";
export * from "./BrsType";
export * from "./Int32";
export * from "./Int64";
export * from "./Float";
export * from "./Double";
export * from "./components/RoArray";
export * from "./components/RoAssociativeArray";
export * from "./components/Timespan";
export * from "./components/BrsObjects";
export * from "./components/RoRegex";
export * from "./components/RoString";
export * from "./Callable";
/**
 * Determines whether or not the given value is a number.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` is a numeric value, otherwise `false`.
 */
export declare function isBrsNumber(value: BrsType): value is BrsNumber;
/**
 * Determines whether or not the given value is a string.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` is a string, otherwise `false`.
 */
export declare function isBrsString(value: BrsType): value is BrsString;
/**
 * Determines whether or not the given value is a boolean.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` if a boolean, otherwise `false`.
 */
export declare function isBrsBoolean(value: BrsType): value is BrsBoolean;
/**
 * Determines whether or not the given value is a BrightScript callable.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` is a Callable value, otherwise `false`.
 */
export declare function isBrsCallable(value: BrsType): value is Callable;
/**
 * Determines whether or not the provided value is an instance of a iterable BrightScript type.
 * @param value the BrightScript value in question.
 * @returns `true` if `value` can be iterated across, otherwise `false`.
 */
export declare function isIterable(value: BrsType): value is Iterable;
/** The set of BrightScript numeric types. */
export declare type BrsNumber = Int32 | Int64 | Float | Double;
/**
 * The set of all comparable BrightScript types. Only primitive (i.e. intrinsic * and unboxed)
 * BrightScript types are comparable to each other.
 */
export declare type BrsPrimitive = BrsInvalid | BrsBoolean | BrsString | BrsNumber;
/** The set of BrightScript iterable types. */
export declare type Iterable = RoArray | RoAssociativeArray;
export declare type AllComponents = {
    kind: ValueKind.Object;
} & BrsComponent & BrsValue;
/** The set of all supported types in BrightScript. */
export declare type BrsType = BrsPrimitive | Iterable | Callable | AllComponents | Uninitialized;
