import { BrsValue, ValueKind, BrsString, BrsBoolean, BrsInvalid } from "../BrsType";
import { BrsComponent, BrsIterable } from "./BrsComponent";
import { BrsType } from "..";
import { Callable } from "../Callable";
import { Int32 } from "../Int32";
/** A member of an `AssociativeArray` in BrightScript. */
export interface AAMember {
    /** The member's name. */
    name: BrsString;
    /** The value associated with `name`. */
    value: BrsType;
}
export declare class RoAssociativeArray extends BrsComponent implements BrsValue, BrsIterable {
    readonly kind = ValueKind.Object;
    private elements;
    constructor(elements: AAMember[]);
    toString(parent?: BrsType): string;
    equalTo(other: BrsType): BrsBoolean;
    getValue(): Map<string, BrsType>;
    getElements(): BrsString[];
    getValues(): BrsType[];
    get(index: BrsType): BrsInvalid | BrsBoolean | BrsString | Int32 | import("..").Int64 | import("..").Float | import("..").Double | Callable | import("..").AllComponents | import("..").Uninitialized;
    set(index: BrsType, value: BrsType): BrsInvalid;
    /** Removes all elements from the associative array */
    private clear;
    /** Removes a given item from the associative array */
    private delete;
    /** Given a key and value, adds an item to the associative array if it doesn't exist
     * Or replaces the value of a key that already exists in the associative array
     */
    private addreplace;
    /** Returns the number of items in the associative array */
    private count;
    /** Returns a boolean indicating whether or not a given key exists in the associative array */
    private doesexist;
    /** Appends a new associative array to another. If two keys are the same, the value of the original AA is replaced with the new one. */
    private append;
    /** Returns an array of keys from the associative array in lexicographical order */
    private keys;
    /** Returns an array of values from the associative array in lexicographical order */
    private items;
    /** Given a key, returns the value associated with that key. This method is case insensitive. */
    private lookup;
}
