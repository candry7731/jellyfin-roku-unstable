import { BrsComponent } from "./BrsComponent";
import { BrsValue, ValueKind, BrsString, BrsBoolean, Comparable } from "../BrsType";
import { BrsType } from "..";
import { Unboxable } from "../Boxing";
export declare class RoString extends BrsComponent implements BrsValue, Comparable, Unboxable {
    readonly kind = ValueKind.Object;
    private intrinsic;
    getValue(): string;
    constructor(initialValue: BrsString);
    equalTo(other: BrsType): BrsBoolean;
    lessThan(other: BrsType): BrsBoolean;
    greaterThan(other: BrsType): BrsBoolean;
    unbox(): BrsString;
    toString(_parent?: BrsType): string;
    /** Sets the string to the first len characters of s. */
    private setString;
    /** Appends the first len characters of s to the end of the string. */
    private appendString;
    /** Returns the number of characters in the string. */
    private len;
    /** Returns a string consisting of the first len characters of the string. */
    private left;
    /** Returns a string consisting of the last len characters of the string. */
    private right;
    private mid;
    private instr;
    /**
     * Returns a copy of the string with all instances of fromStr replaced with toStr. If fromStr is
     * empty the return value is the same as the source string.
     */
    private replace;
    /**
     * Returns the string with any leading and trailing whitespace characters (space, TAB, LF, CR,
     * VT, FF, NO-BREAK SPACE, et al) removed.
     */
    private trim;
    /** Returns the value of the string interpreted as a decimal number. */
    private toInt;
    /** Returns the value of the string interpreted as a floating point number. */
    private toFloat;
    /**
     * Splits the string into separate substrings separated by a single delimiter character. Returns
     * an roList containing each of the substrings. The delimiters are not returned.
     */
    private tokenize;
    /**
     * Splits the input string using the separator string as a delimiter, and returns an array of
     * the split token strings (not including the delimiter). An empty separator string indicates
     * to split the string by character.
     */
    private split;
    /**
     * Returns the string with certain characters ("'<>&) replaced with the corresponding HTML
     * entity encoding.
     */
    private getEntityEncode;
    /** URL encodes the specified string per RFC 3986 and returns the encoded string. */
    private escape;
    /** URL decodes the specified string per RFC 3986 and returns the decoded string. */
    private unescape;
    /**
     * Encode the specified string with escape sequences for reserved Uniform Resource Identifier
     * (URI) characters.
     */
    private encodeUri;
    /**
     * Decode the specified string with escape sequences for reserved Uniform Resource Identifier
     * (URI) characters.
     */
    private decodeUri;
    /**
     * Encode the specified string with escape sequences for reserved Uniform Resource Identifier
     * (URI) component characters.
     */
    private encodeUriComponent;
    private decodeUriComponent;
}
