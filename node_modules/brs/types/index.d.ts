import * as PP from "./preprocessor";
import { ExecutionOptions } from "./interpreter";
import * as _lexer from "./lexer";
export { _lexer as lexer };
import * as BrsTypes from "./brsTypes";
export { BrsTypes as types };
export { PP as preprocessor };
import * as _parser from "./parser";
export { _parser as parser };
/**
 * Executes a BrightScript file by path and writes its output to the streams
 * provided in `options`.
 *
 * @param filename the absolute path to the `.brs` file to be executed
 * @param options configuration for the execution, including the streams to use for `stdout` and
 *                `stderr` and the base directory for path resolution
 *
 * @returns a `Promise` that will be resolve if `filename` is successfully
 *          executed, or be rejected if an error occurs.
 */
export declare function execute(filenames: string[], options: Partial<ExecutionOptions>): Promise<BrsTypes.BrsType[]>;
/**
 * A synchronous version of `execute`. Executes a BrightScript file by path and writes its output to the streams
 * provided in `options`.
 *
 * @param filename the paths to BrightScript files to execute synchronously
 * @param options configuration for the execution, including the streams to use for `stdout` and
 *                `stderr` and the base directory for path resolution
 * @param args the set of arguments to pass to the `main` function declared in one of the provided filenames
 *
 * @returns the value returned by the executed file(s)
 */
export declare function executeSync(filenames: string[], options: Partial<ExecutionOptions>, args: BrsTypes.BrsType[]): BrsTypes.BrsType[];
/**
 * Launches an interactive read-execute-print loop, which reads input from
 * `stdin` and executes it.
 *
 * **NOTE:** Currently limited to single-line inputs :(
 */
export declare function repl(): void;
