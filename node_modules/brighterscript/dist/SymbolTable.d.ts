import type { Range } from 'vscode-languageserver';
import type { BscType } from './types/BscType';
/**
 * Stores the types associated with variables and functions in the Brighterscript code
 * Can be part of a hierarchy, so lookups can reference parent scopes
 */
export declare class SymbolTable {
    constructor(parent?: SymbolTable | undefined);
    /**
     * The map of symbols declared directly in this SymbolTable (excludes parent SymbolTable).
     * Indexed by lower symbol name
     */
    private symbolMap;
    get parent(): SymbolTable;
    /**
     * Sets the parent table for lookups. There can only be one parent at a time, but sometimes you
     * want to temporarily change the parent, and then restore it later. This allows that.
     *
     * @param [parent]
     */
    private parentStack;
    pushParent(parent?: SymbolTable): SymbolTable;
    /**
     * Remove the current parent, restoring the previous parent (if there was one)
     */
    popParent(): SymbolTable;
    /**
     * Checks if the symbol table contains the given symbol by name
     * If the identifier is not in this table, it will check the parent
     *
     * @param name the name to lookup
     * @param searchParent should we look to our parent if we don't have the symbol?
     * @returns true if this symbol is in the symbol table
     */
    hasSymbol(name: string, searchParent?: boolean): boolean;
    /**
     * Gets the name/type pair for a given named variable or function name
     * If the identifier is not in this table, it will check the parent
     *
     * @param  name the name to lookup
     * @param searchParent should we look to our parent if we don't have the symbol?
     * @returns An array of BscSymbols - one for each time this symbol had a type implicitly defined
     */
    getSymbol(name: string, searchParent?: boolean): BscSymbol[];
    /**
     * Adds a new symbol to the table
     * @param name
     * @param  type
     */
    addSymbol(name: string, range: Range, type: BscType): void;
    /**
     * Adds all the symbols from another table to this one
     * It will overwrite any existing symbols in this table
     * @param symbolTable
     */
    mergeSymbolTable(symbolTable: SymbolTable): void;
    /**
     * Serialize this SymbolTable to JSON (useful for debugging reasons)
     */
    private toJSON;
}
export interface BscSymbol {
    name: string;
    range: Range;
    type: BscType;
}
