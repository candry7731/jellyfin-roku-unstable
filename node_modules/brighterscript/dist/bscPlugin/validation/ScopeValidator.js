"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopeValidator = void 0;
const vscode_uri_1 = require("vscode-uri");
const reflection_1 = require("../../astUtils/reflection");
const Cache_1 = require("../../Cache");
const DiagnosticMessages_1 = require("../../DiagnosticMessages");
const util_1 = require("../../util");
const roku_types_1 = require("../../roku-types");
/**
 * The lower-case names of all platform-included scenegraph nodes
 */
const platformNodeNames = new Set(Object.values(roku_types_1.nodes).map(x => x.name.toLowerCase()));
const platformComponentNames = new Set(Object.values(roku_types_1.components).map(x => x.name.toLowerCase()));
/**
 * A validator that handles all scope validations for a program validation cycle.
 * You should create ONE of these to handle all scope events between beforeProgramValidate and afterProgramValidate,
 * and call reset() before using it again in the next cycle
 */
class ScopeValidator {
    constructor() {
        this.events = [];
        this.onceCache = new Cache_1.Cache();
        this.multiScopeCache = new Cache_1.Cache();
    }
    processEvent(event) {
        this.events.push(event);
        event.scope.linkSymbolTable();
        this.detectDuplicateEnums(event);
        this.validateCreateObjectCalls(event);
        this.iterateExpressions(event);
        event.scope.unlinkSymbolTable();
    }
    reset() {
        this.onceCache.clear();
        this.multiScopeCache.clear();
        this.events = [];
    }
    /**
     * Adds a diagnostic to the first scope for this key. Prevents duplicate diagnostics
     * for diagnostics where scope isn't important. (i.e. CreateObject validations)
     */
    addDiagnosticOnce(event, diagnostic) {
        this.onceCache.getOrAdd(`${diagnostic.code}-${diagnostic.message}-${util_1.default.rangeToString(diagnostic.range)}`, () => {
            event.scope.addDiagnostics([diagnostic]);
            return true;
        });
    }
    addDiagnostic(event, diagnostic) {
        event.scope.addDiagnostics([diagnostic]);
    }
    /**
     * Add a diagnostic (to the first scope) that will have `relatedInformation` for each affected scope
     */
    addMultiScopeDiagnostic(event, diagnostic, message = 'Not defined in scope') {
        var _a, _b;
        diagnostic = this.multiScopeCache.getOrAdd(`${(_a = diagnostic.file) === null || _a === void 0 ? void 0 : _a.srcPath}-${diagnostic.code}-${diagnostic.message}-${util_1.default.rangeToString(diagnostic.range)}`, () => {
            if (!diagnostic.relatedInformation) {
                diagnostic.relatedInformation = [];
            }
            this.addDiagnostic(event, diagnostic);
            return diagnostic;
        });
        const info = {
            message: `${message} '${event.scope.name}'`
        };
        if ((0, reflection_1.isXmlScope)(event.scope) && ((_b = event.scope.xmlFile) === null || _b === void 0 ? void 0 : _b.srcPath)) {
            info.location = util_1.default.createLocation(vscode_uri_1.URI.file(event.scope.xmlFile.srcPath).toString(), util_1.default.createRange(0, 0, 0, 10));
        }
        else {
            info.location = util_1.default.createLocation(vscode_uri_1.URI.file(diagnostic.file.srcPath).toString(), diagnostic.range);
        }
        diagnostic.relatedInformation.push(info);
    }
    /**
     * Find the closest symbol table for the given position
     */
    getSymbolTable(scope, file, position) {
        var _a, _b;
        let symbolTable;
        symbolTable = (_a = file.getFunctionScopeAtPosition(position)) === null || _a === void 0 ? void 0 : _a.func.symbolTable;
        if (!symbolTable) {
            symbolTable = (_b = file.getNamespaceStatementForPosition(position)) === null || _b === void 0 ? void 0 : _b.symbolTable;
        }
        if (!symbolTable) {
            symbolTable = scope.symbolTable;
        }
        return symbolTable;
    }
    iterateExpressions(event) {
        const { scope } = event;
        event.scope.enumerateOwnFiles((file) => {
            var _a, _b, _c;
            if ((0, reflection_1.isBrsFile)(file)) {
                const expressions = [
                    ...file.parser.references.expressions,
                    //all class "extends <whatever>" expressions
                    ...file.parser.references.classStatements.map(x => { var _a; return (_a = x.parentClassName) === null || _a === void 0 ? void 0 : _a.expression; }),
                    //all interface "extends <whatever>" expressions
                    ...file.parser.references.interfaceStatements.map(x => { var _a; return (_a = x.parentInterfaceName) === null || _a === void 0 ? void 0 : _a.expression; })
                ];
                outer: for (let referenceExpression of expressions) {
                    if (!referenceExpression) {
                        continue;
                    }
                    let expression;
                    //lift the callee from call expressions to handle namespaced function calls
                    if ((0, reflection_1.isCallExpression)(referenceExpression)) {
                        expression = referenceExpression.callee;
                    }
                    else if ((0, reflection_1.isNewExpression)(referenceExpression)) {
                        expression = referenceExpression.call.callee;
                    }
                    else {
                        expression = referenceExpression;
                    }
                    const tokens = util_1.default.getAllDottedGetParts(expression);
                    if ((tokens === null || tokens === void 0 ? void 0 : tokens.length) > 0) {
                        const symbolTable = this.getSymbolTable(scope, file, tokens[0].range.start); //flag all unknown left-most variables
                        if (!symbolTable.hasSymbol((_a = tokens[0]) === null || _a === void 0 ? void 0 : _a.text)) {
                            this.addMultiScopeDiagnostic(event, Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.cannotFindName(tokens[0].text)), { range: tokens[0].range }));
                            //skip to the next expression
                            continue;
                        }
                        //at this point, we know the first item is a known symbol. find unknown namespace parts after the first part
                        if (tokens.length > 1) {
                            const firstNamespacePart = tokens.shift().text;
                            const firstNamespacePartLower = firstNamespacePart === null || firstNamespacePart === void 0 ? void 0 : firstNamespacePart.toLowerCase();
                            const namespaceContainer = scope.namespaceLookup.get(firstNamespacePartLower);
                            const enumStatement = scope.getEnum(firstNamespacePartLower);
                            //if this isn't a namespace, skip it
                            if (!namespaceContainer && !enumStatement) {
                                continue;
                            }
                            //catch unknown namespace items
                            const processedNames = [firstNamespacePart];
                            for (const token of tokens !== null && tokens !== void 0 ? tokens : []) {
                                processedNames.push(token.text);
                                const entityName = processedNames.join('.');
                                const entityNameLower = entityName.toLowerCase();
                                //if this is an enum member, stop validating here to prevent errors further down the chain
                                if (scope.getEnumMemberMap().has(entityNameLower)) {
                                    break;
                                }
                                if (!scope.getEnumMap().has(entityNameLower) &&
                                    !scope.getClassMap().has(entityNameLower) &&
                                    !scope.getConstMap().has(entityNameLower) &&
                                    !scope.getCallableByName(entityNameLower) &&
                                    !scope.namespaceLookup.has(entityNameLower)) {
                                    //if this looks like an enum, provide a nicer error message
                                    const theEnum = (_b = this.getEnum(scope, entityNameLower)) === null || _b === void 0 ? void 0 : _b.item;
                                    if (theEnum) {
                                        this.addMultiScopeDiagnostic(event, Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.unknownEnumValue((_c = token.text) === null || _c === void 0 ? void 0 : _c.split('.').pop(), theEnum.fullName)), { range: tokens[tokens.length - 1].range, relatedInformation: [{
                                                    message: 'Enum declared here',
                                                    location: util_1.default.createLocation(vscode_uri_1.URI.file(file.srcPath).toString(), theEnum.tokens.name.range)
                                                }] }));
                                    }
                                    else {
                                        this.addMultiScopeDiagnostic(event, Object.assign(Object.assign({}, DiagnosticMessages_1.DiagnosticMessages.cannotFindName(token.text, entityName)), { range: token.range, file: file }));
                                    }
                                    //no need to add another diagnostic for future unknown items
                                    continue outer;
                                }
                            }
                        }
                    }
                }
            }
        });
    }
    /**
     * Given a string optionally separated by dots, find an enum related to it.
     * For example, all of these would return the enum: `SomeNamespace.SomeEnum.SomeMember`, SomeEnum.SomeMember, `SomeEnum`
     */
    getEnum(scope, name) {
        //look for the enum directly
        let result = scope.getEnumMap().get(name);
        //assume we've been given the enum.member syntax, so pop the member and try again
        if (!result) {
            const parts = name.split('.');
            parts.pop();
            result = scope.getEnumMap().get(parts.join('.'));
        }
        return result;
    }
    /**
     * Flag duplicate enums
     */
    detectDuplicateEnums(event) {
        const diagnostics = [];
        const enumLocationsByName = new Cache_1.Cache();
        event.scope.enumerateBrsFiles((file) => {
            for (const enumStatement of file.parser.references.enumStatements) {
                const fullName = enumStatement.fullName;
                const nameLower = fullName === null || fullName === void 0 ? void 0 : fullName.toLowerCase();
                if ((nameLower === null || nameLower === void 0 ? void 0 : nameLower.length) > 0) {
                    enumLocationsByName.getOrAdd(nameLower, () => []).push({
                        file: file,
                        statement: enumStatement
                    });
                }
            }
        });
        //now that we've collected all enum declarations, flag duplicates
        for (const enumLocations of enumLocationsByName.values()) {
            //sort by srcPath to keep the primary enum location consistent
            enumLocations.sort((a, b) => {
                var _a, _b;
                const pathA = (_a = a.file) === null || _a === void 0 ? void 0 : _a.srcPath;
                const pathB = (_b = b.file) === null || _b === void 0 ? void 0 : _b.srcPath;
                if (pathA < pathB) {
                    return -1;
                }
                else if (pathA > pathB) {
                    return 1;
                }
                return 0;
            });
            const primaryEnum = enumLocations.shift();
            const fullName = primaryEnum.statement.fullName;
            for (const duplicateEnumInfo of enumLocations) {
                diagnostics.push(Object.assign(Object.assign({}, DiagnosticMessages_1.DiagnosticMessages.duplicateEnumDeclaration(event.scope.name, fullName)), { file: duplicateEnumInfo.file, range: duplicateEnumInfo.statement.tokens.name.range, relatedInformation: [{
                            message: 'Enum declared here',
                            location: util_1.default.createLocation(vscode_uri_1.URI.file(primaryEnum.file.srcPath).toString(), primaryEnum.statement.tokens.name.range)
                        }] }));
            }
        }
        event.scope.addDiagnostics(diagnostics);
    }
    /**
     * Validate every function call to `CreateObject`.
     * Ideally we would create better type checking/handling for this, but in the mean time, we know exactly
     * what these calls are supposed to look like, and this is a very common thing for brs devs to do, so just
     * do this manually for now.
     */
    validateCreateObjectCalls(event) {
        const diagnostics = [];
        event.scope.enumerateBrsFiles((file) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            for (const call of file.functionCalls) {
                //skip non CreateObject function calls
                if (((_a = call.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'createobject' || !(0, reflection_1.isLiteralExpression)((_b = call === null || call === void 0 ? void 0 : call.args[0]) === null || _b === void 0 ? void 0 : _b.expression)) {
                    continue;
                }
                const firstParamToken = (_d = (_c = call === null || call === void 0 ? void 0 : call.args[0]) === null || _c === void 0 ? void 0 : _c.expression) === null || _d === void 0 ? void 0 : _d.token;
                const firstParamStringValue = (_e = firstParamToken === null || firstParamToken === void 0 ? void 0 : firstParamToken.text) === null || _e === void 0 ? void 0 : _e.replace(/"/g, '');
                //if this is a `createObject('roSGNode'` call, only support known sg node types
                if ((firstParamStringValue === null || firstParamStringValue === void 0 ? void 0 : firstParamStringValue.toLowerCase()) === 'rosgnode' && (0, reflection_1.isLiteralExpression)((_f = call === null || call === void 0 ? void 0 : call.args[1]) === null || _f === void 0 ? void 0 : _f.expression)) {
                    const componentName = (_h = (_g = call === null || call === void 0 ? void 0 : call.args[1]) === null || _g === void 0 ? void 0 : _g.expression) === null || _h === void 0 ? void 0 : _h.token;
                    //don't validate any components with a colon in their name (probably component libraries, but regular components can have them too).
                    if ((_j = componentName === null || componentName === void 0 ? void 0 : componentName.text) === null || _j === void 0 ? void 0 : _j.includes(':')) {
                        continue;
                    }
                    //add diagnostic for unknown components
                    const unquotedComponentName = (_k = componentName === null || componentName === void 0 ? void 0 : componentName.text) === null || _k === void 0 ? void 0 : _k.replace(/"/g, '');
                    if (unquotedComponentName && !platformNodeNames.has(unquotedComponentName.toLowerCase()) && !event.program.getComponent(unquotedComponentName)) {
                        this.addDiagnosticOnce(event, Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.unknownRoSGNode(unquotedComponentName)), { range: componentName.range }));
                    }
                    else if ((call === null || call === void 0 ? void 0 : call.args.length) !== 2) {
                        // roSgNode should only ever have 2 args in `createObject`
                        this.addDiagnosticOnce(event, Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.mismatchCreateObjectArgumentCount(firstParamStringValue, [2], call === null || call === void 0 ? void 0 : call.args.length)), { range: call.range }));
                    }
                }
                else if (!platformComponentNames.has(firstParamStringValue.toLowerCase())) {
                    this.addDiagnosticOnce(event, Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.unknownBrightScriptComponent(firstParamStringValue)), { range: firstParamToken.range }));
                }
                else {
                    // This is valid brightscript component
                    // Test for invalid arg counts
                    const brightScriptComponent = roku_types_1.components[firstParamStringValue.toLowerCase()];
                    // Valid arg counts for createObject are 1+ number of args for constructor
                    let validArgCounts = brightScriptComponent.constructors.map(cnstr => cnstr.params.length + 1);
                    if (validArgCounts.length === 0) {
                        // no constructors for this component, so createObject only takes 1 arg
                        validArgCounts = [1];
                    }
                    if (!validArgCounts.includes(call === null || call === void 0 ? void 0 : call.args.length)) {
                        // Incorrect number of arguments included in `createObject()`
                        this.addDiagnosticOnce(event, Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.mismatchCreateObjectArgumentCount(firstParamStringValue, validArgCounts, call === null || call === void 0 ? void 0 : call.args.length)), { range: call.range }));
                    }
                    // Test for deprecation
                    if (brightScriptComponent.isDeprecated) {
                        this.addDiagnosticOnce(event, Object.assign(Object.assign({ file: file }, DiagnosticMessages_1.DiagnosticMessages.deprecatedBrightScriptComponent(firstParamStringValue, brightScriptComponent.deprecatedDescription)), { range: call.range }));
                    }
                }
            }
        });
        event.scope.addDiagnostics(diagnostics);
    }
}
exports.ScopeValidator = ScopeValidator;
//# sourceMappingURL=ScopeValidator.js.map